
Qdice-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000333c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003510  08003510  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003518  08003518  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000014  08003534  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003534  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9cd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfa  00000000  00000000  0002aa09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002c708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  0002d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b78  00000000  00000000  0002dd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c375  00000000  00000000  000418a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b24e  00000000  00000000  0004dc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8e6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d0  00000000  00000000  000c8ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033e4 	.word	0x080033e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080033e4 	.word	0x080033e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f82e 	bl	8000484 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	0415      	lsls	r5, r2, #16
 8000438:	0c2d      	lsrs	r5, r5, #16
 800043a:	000f      	movs	r7, r1
 800043c:	0001      	movs	r1, r0
 800043e:	002e      	movs	r6, r5
 8000440:	46c6      	mov	lr, r8
 8000442:	4684      	mov	ip, r0
 8000444:	0400      	lsls	r0, r0, #16
 8000446:	0c14      	lsrs	r4, r2, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	0c09      	lsrs	r1, r1, #16
 800044c:	4346      	muls	r6, r0
 800044e:	434d      	muls	r5, r1
 8000450:	4360      	muls	r0, r4
 8000452:	4361      	muls	r1, r4
 8000454:	1940      	adds	r0, r0, r5
 8000456:	0c34      	lsrs	r4, r6, #16
 8000458:	1824      	adds	r4, r4, r0
 800045a:	b500      	push	{lr}
 800045c:	42a5      	cmp	r5, r4
 800045e:	d903      	bls.n	8000468 <__aeabi_lmul+0x34>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	0240      	lsls	r0, r0, #9
 8000464:	4680      	mov	r8, r0
 8000466:	4441      	add	r1, r8
 8000468:	0c25      	lsrs	r5, r4, #16
 800046a:	186d      	adds	r5, r5, r1
 800046c:	4661      	mov	r1, ip
 800046e:	4359      	muls	r1, r3
 8000470:	437a      	muls	r2, r7
 8000472:	0430      	lsls	r0, r6, #16
 8000474:	1949      	adds	r1, r1, r5
 8000476:	0424      	lsls	r4, r4, #16
 8000478:	0c00      	lsrs	r0, r0, #16
 800047a:	1820      	adds	r0, r4, r0
 800047c:	1889      	adds	r1, r1, r2
 800047e:	bc80      	pop	{r7}
 8000480:	46b8      	mov	r8, r7
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 f8ba 	bl	800061c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 f8b5 	bl	800061c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__clzdi2>:
 800061c:	b510      	push	{r4, lr}
 800061e:	2900      	cmp	r1, #0
 8000620:	d103      	bne.n	800062a <__clzdi2+0xe>
 8000622:	f000 f807 	bl	8000634 <__clzsi2>
 8000626:	3020      	adds	r0, #32
 8000628:	e002      	b.n	8000630 <__clzdi2+0x14>
 800062a:	1c08      	adds	r0, r1, #0
 800062c:	f000 f802 	bl	8000634 <__clzsi2>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__clzsi2>:
 8000634:	211c      	movs	r1, #28
 8000636:	2301      	movs	r3, #1
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	4298      	cmp	r0, r3
 800063c:	d301      	bcc.n	8000642 <__clzsi2+0xe>
 800063e:	0c00      	lsrs	r0, r0, #16
 8000640:	3910      	subs	r1, #16
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	4298      	cmp	r0, r3
 8000646:	d301      	bcc.n	800064c <__clzsi2+0x18>
 8000648:	0a00      	lsrs	r0, r0, #8
 800064a:	3908      	subs	r1, #8
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0x22>
 8000652:	0900      	lsrs	r0, r0, #4
 8000654:	3904      	subs	r1, #4
 8000656:	a202      	add	r2, pc, #8	; (adr r2, 8000660 <__clzsi2+0x2c>)
 8000658:	5c10      	ldrb	r0, [r2, r0]
 800065a:	1840      	adds	r0, r0, r1
 800065c:	4770      	bx	lr
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	02020304 	.word	0x02020304
 8000664:	01010101 	.word	0x01010101
	...

08000670 <readSW>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void readSW(){
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	currentSwStates[Roll] = HAL_GPIO_ReadPin(SW_ROLL_GPIO_Port, SW_ROLL_Pin);
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	015b      	lsls	r3, r3, #5
 8000678:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <readSW+0x64>)
 800067a:	0019      	movs	r1, r3
 800067c:	0010      	movs	r0, r2
 800067e:	f000 fe27 	bl	80012d0 <HAL_GPIO_ReadPin>
 8000682:	0003      	movs	r3, r0
 8000684:	001a      	movs	r2, r3
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <readSW+0x68>)
 8000688:	701a      	strb	r2, [r3, #0]
	currentSwStates[Dice] = HAL_GPIO_ReadPin(SW_DICE_GPIO_Port, SW_DICE_Pin);
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	021b      	lsls	r3, r3, #8
 800068e:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <readSW+0x64>)
 8000690:	0019      	movs	r1, r3
 8000692:	0010      	movs	r0, r2
 8000694:	f000 fe1c 	bl	80012d0 <HAL_GPIO_ReadPin>
 8000698:	0003      	movs	r3, r0
 800069a:	001a      	movs	r2, r3
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <readSW+0x68>)
 800069e:	705a      	strb	r2, [r3, #1]
	currentSwStates[Speed] = HAL_GPIO_ReadPin(SW_SPEED_GPIO_Port, SW_SPEED_Pin);
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	01db      	lsls	r3, r3, #7
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <readSW+0x64>)
 80006a6:	0019      	movs	r1, r3
 80006a8:	0010      	movs	r0, r2
 80006aa:	f000 fe11 	bl	80012d0 <HAL_GPIO_ReadPin>
 80006ae:	0003      	movs	r3, r0
 80006b0:	001a      	movs	r2, r3
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <readSW+0x68>)
 80006b4:	709a      	strb	r2, [r3, #2]
	currentSwStates[Mode] = HAL_GPIO_ReadPin(SW_MODE_GPIO_Port, SW_MODE_Pin);
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	019b      	lsls	r3, r3, #6
 80006ba:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <readSW+0x64>)
 80006bc:	0019      	movs	r1, r3
 80006be:	0010      	movs	r0, r2
 80006c0:	f000 fe06 	bl	80012d0 <HAL_GPIO_ReadPin>
 80006c4:	0003      	movs	r3, r0
 80006c6:	001a      	movs	r2, r3
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <readSW+0x68>)
 80006ca:	70da      	strb	r2, [r3, #3]

}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	50000400 	.word	0x50000400
 80006d8:	2000003c 	.word	0x2000003c

080006dc <debounceCheck>:

uint8_t debounceCheck(uint8_t readState, uint8_t diceCode){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	0002      	movs	r2, r0
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	1dbb      	adds	r3, r7, #6
 80006ea:	1c0a      	adds	r2, r1, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	if(lastSwStates[diceCode] == readState)
 80006ee:	1dbb      	adds	r3, r7, #6
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4a09      	ldr	r2, [pc, #36]	; (8000718 <debounceCheck+0x3c>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	1dfa      	adds	r2, r7, #7
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d101      	bne.n	8000702 <debounceCheck+0x26>
		return 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	e006      	b.n	8000710 <debounceCheck+0x34>
	else{
		lastSwStates[diceCode] = readState;
 8000702:	1dbb      	adds	r3, r7, #6
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4a04      	ldr	r2, [pc, #16]	; (8000718 <debounceCheck+0x3c>)
 8000708:	1df9      	adds	r1, r7, #7
 800070a:	7809      	ldrb	r1, [r1, #0]
 800070c:	54d1      	strb	r1, [r2, r3]
		return 1;
 800070e:	2301      	movs	r3, #1
	}
}
 8000710:	0018      	movs	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	b002      	add	sp, #8
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000038 	.word	0x20000038

0800071c <HAL_GPIO_EXTI_Callback>:
		ITM_SendChar(*ptr++);
	}
	return len;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	0002      	movs	r2, r0
 8000724:	1dbb      	adds	r3, r7, #6
 8000726:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == INT_PULSE_Pin){
 8000728:	1dbb      	adds	r3, r7, #6
 800072a:	881a      	ldrh	r2, [r3, #0]
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	429a      	cmp	r2, r3
 8000732:	d124      	bne.n	800077e <HAL_GPIO_EXTI_Callback+0x62>
		currentTick = HAL_GetTick();
 8000734:	f000 fb9e 	bl	8000e74 <HAL_GetTick>
 8000738:	0002      	movs	r2, r0
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <HAL_GPIO_EXTI_Callback+0x6c>)
 800073c:	601a      	str	r2, [r3, #0]
		if(rolling){
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_GPIO_EXTI_Callback+0x70>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d01b      	beq.n	800077e <HAL_GPIO_EXTI_Callback+0x62>
			rolling = false;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_GPIO_EXTI_Callback+0x70>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
			currentTick = currentTick % 100;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_GPIO_EXTI_Callback+0x6c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2164      	movs	r1, #100	; 0x64
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff fd5e 	bl	8000214 <__aeabi_uidivmod>
 8000758:	000b      	movs	r3, r1
 800075a:	001a      	movs	r2, r3
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_GPIO_EXTI_Callback+0x6c>)
 800075e:	601a      	str	r2, [r3, #0]
			rollNumber = currentTick % dices[currentDice];
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_GPIO_EXTI_Callback+0x74>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	0019      	movs	r1, r3
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_GPIO_EXTI_Callback+0x78>)
 800076c:	5c5b      	ldrb	r3, [r3, r1]
 800076e:	0019      	movs	r1, r3
 8000770:	0010      	movs	r0, r2
 8000772:	f7ff fd4f 	bl	8000214 <__aeabi_uidivmod>
 8000776:	000b      	movs	r3, r1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_GPIO_EXTI_Callback+0x7c>)
 800077c:	701a      	strb	r2, [r3, #0]


	}


}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	200000d8 	.word	0x200000d8
 800078c:	20000031 	.word	0x20000031
 8000790:	20000030 	.word	0x20000030
 8000794:	20000000 	.word	0x20000000
 8000798:	20000032 	.word	0x20000032

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fb36 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f882 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f000 f922 	bl	80009f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007ac:	f000 f8f0 	bl	8000990 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TM1638_Init();
 80007b0:	f002 fc11 	bl	8002fd6 <TM1638_Init>
  TM1638_ConfigDisplay(7, TM1638DisplayStateON);
 80007b4:	2101      	movs	r1, #1
 80007b6:	2007      	movs	r0, #7
 80007b8:	f002 fc15 	bl	8002fe6 <TM1638_ConfigDisplay>
  TM1638_SetSingleDigit_HEX(8 | TM1638DecimalPoint, 0);
 80007bc:	2100      	movs	r1, #0
 80007be:	2088      	movs	r0, #136	; 0x88
 80007c0:	f002 fc62 	bl	8003088 <TM1638_SetSingleDigit_HEX>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	currentTick = HAL_GetTick();
 80007c4:	f000 fb56 	bl	8000e74 <HAL_GetTick>
 80007c8:	0002      	movs	r2, r0
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <main+0xf8>)
 80007cc:	601a      	str	r2, [r3, #0]


	if((currentTick-lastPress)>DEBOUNCE_TIME_MS){
 80007ce:	4b31      	ldr	r3, [pc, #196]	; (8000894 <main+0xf8>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b31      	ldr	r3, [pc, #196]	; (8000898 <main+0xfc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	2b46      	cmp	r3, #70	; 0x46
 80007da:	d9f3      	bls.n	80007c4 <main+0x28>
		readSW();
 80007dc:	f7ff ff48 	bl	8000670 <readSW>
		if(debounceCheck(currentSwStates[Roll], Roll)){
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <main+0x100>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2100      	movs	r1, #0
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff ff78 	bl	80006dc <debounceCheck>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d00b      	beq.n	8000808 <main+0x6c>
			if(!currentSwStates[Roll]){
 80007f0:	4b2a      	ldr	r3, [pc, #168]	; (800089c <main+0x100>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d107      	bne.n	8000808 <main+0x6c>
			  	//ADD FUNCTIONAL CODE HERE
				rolling = true;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <main+0x104>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
				lastPress = HAL_GetTick();
 80007fe:	f000 fb39 	bl	8000e74 <HAL_GetTick>
 8000802:	0002      	movs	r2, r0
 8000804:	4b24      	ldr	r3, [pc, #144]	; (8000898 <main+0xfc>)
 8000806:	601a      	str	r2, [r3, #0]
			  }
		}

		if(debounceCheck(currentSwStates[Dice], Dice)){
 8000808:	4b24      	ldr	r3, [pc, #144]	; (800089c <main+0x100>)
 800080a:	785b      	ldrb	r3, [r3, #1]
 800080c:	2101      	movs	r1, #1
 800080e:	0018      	movs	r0, r3
 8000810:	f7ff ff64 	bl	80006dc <debounceCheck>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d013      	beq.n	8000840 <main+0xa4>
			if(!currentSwStates[Dice]){
 8000818:	4b20      	ldr	r3, [pc, #128]	; (800089c <main+0x100>)
 800081a:	785b      	ldrb	r3, [r3, #1]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10f      	bne.n	8000840 <main+0xa4>
			  	//ADD FUNCTIONAL CODE HERE
				currentDice = (currentDice + 1) % NDICES;
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <main+0x108>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	2107      	movs	r1, #7
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff fddd 	bl	80003e8 <__aeabi_idivmod>
 800082e:	000b      	movs	r3, r1
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <main+0x108>)
 8000834:	701a      	strb	r2, [r3, #0]
				lastPress = HAL_GetTick();
 8000836:	f000 fb1d 	bl	8000e74 <HAL_GetTick>
 800083a:	0002      	movs	r2, r0
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <main+0xfc>)
 800083e:	601a      	str	r2, [r3, #0]
			}
		}

		if(debounceCheck(currentSwStates[Speed], Speed)){
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <main+0x100>)
 8000842:	789b      	ldrb	r3, [r3, #2]
 8000844:	2102      	movs	r1, #2
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff ff48 	bl	80006dc <debounceCheck>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d008      	beq.n	8000862 <main+0xc6>
			if(!currentSwStates[Speed]){
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <main+0x100>)
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d104      	bne.n	8000862 <main+0xc6>
				//ADD FUNCTIONAL CODE HERE
				lastPress = HAL_GetTick();
 8000858:	f000 fb0c 	bl	8000e74 <HAL_GetTick>
 800085c:	0002      	movs	r2, r0
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <main+0xfc>)
 8000860:	601a      	str	r2, [r3, #0]
			  }
		}

		if(debounceCheck(currentSwStates[Mode], Mode)){
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <main+0x100>)
 8000864:	78db      	ldrb	r3, [r3, #3]
 8000866:	2103      	movs	r1, #3
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ff37 	bl	80006dc <debounceCheck>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d0a8      	beq.n	80007c4 <main+0x28>
			if(!currentSwStates[Mode]){
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <main+0x100>)
 8000874:	78db      	ldrb	r3, [r3, #3]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1a4      	bne.n	80007c4 <main+0x28>
	//			  currentDice = (currentDice + 1) % NDICES;
				HAL_GPIO_TogglePin(SW_HV_GPIO_Port, SW_HV_Pin);
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	019b      	lsls	r3, r3, #6
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <main+0x10c>)
 8000880:	0019      	movs	r1, r3
 8000882:	0010      	movs	r0, r2
 8000884:	f000 fd5e 	bl	8001344 <HAL_GPIO_TogglePin>
				lastPress = HAL_GetTick();
 8000888:	f000 faf4 	bl	8000e74 <HAL_GetTick>
 800088c:	0002      	movs	r2, r0
 800088e:	4b02      	ldr	r3, [pc, #8]	; (8000898 <main+0xfc>)
 8000890:	601a      	str	r2, [r3, #0]
	currentTick = HAL_GetTick();
 8000892:	e797      	b.n	80007c4 <main+0x28>
 8000894:	200000d8 	.word	0x200000d8
 8000898:	20000034 	.word	0x20000034
 800089c:	2000003c 	.word	0x2000003c
 80008a0:	20000031 	.word	0x20000031
 80008a4:	20000030 	.word	0x20000030
 80008a8:	50000800 	.word	0x50000800

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b09d      	sub	sp, #116	; 0x74
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	2438      	movs	r4, #56	; 0x38
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	0018      	movs	r0, r3
 80008b8:	2338      	movs	r3, #56	; 0x38
 80008ba:	001a      	movs	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	f002 fd89 	bl	80033d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c2:	2324      	movs	r3, #36	; 0x24
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	0018      	movs	r0, r3
 80008c8:	2314      	movs	r3, #20
 80008ca:	001a      	movs	r2, r3
 80008cc:	2100      	movs	r1, #0
 80008ce:	f002 fd81 	bl	80033d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d2:	003b      	movs	r3, r7
 80008d4:	0018      	movs	r0, r3
 80008d6:	2324      	movs	r3, #36	; 0x24
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f002 fd7a 	bl	80033d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <SystemClock_Config+0xdc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a29      	ldr	r2, [pc, #164]	; (800098c <SystemClock_Config+0xe0>)
 80008e6:	401a      	ands	r2, r3
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <SystemClock_Config+0xdc>)
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	0109      	lsls	r1, r1, #4
 80008ee:	430a      	orrs	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f2:	0021      	movs	r1, r4
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2202      	movs	r2, #2
 80008f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2201      	movs	r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2210      	movs	r2, #16
 8000904:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2202      	movs	r2, #2
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	02d2      	lsls	r2, r2, #11
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	03d2      	lsls	r2, r2, #15
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	187b      	adds	r3, r7, r1
 8000924:	0018      	movs	r0, r3
 8000926:	f000 fd45 	bl	80013b4 <HAL_RCC_OscConfig>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800092e:	f000 f95f 	bl	8000bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	2124      	movs	r1, #36	; 0x24
 8000934:	187b      	adds	r3, r7, r1
 8000936:	220f      	movs	r2, #15
 8000938:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2203      	movs	r2, #3
 800093e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2101      	movs	r1, #1
 8000956:	0018      	movs	r0, r3
 8000958:	f001 f8f0 	bl	8001b3c <HAL_RCC_ClockConfig>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000960:	f000 f946 	bl	8000bf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000964:	003b      	movs	r3, r7
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800096a:	003b      	movs	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000970:	003b      	movs	r3, r7
 8000972:	0018      	movs	r0, r3
 8000974:	f001 fb38 	bl	8001fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800097c:	f000 f938 	bl	8000bf0 <Error_Handler>
  }
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b01d      	add	sp, #116	; 0x74
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	40007000 	.word	0x40007000
 800098c:	ffffe7ff 	.word	0xffffe7ff

08000990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 8000996:	4a15      	ldr	r2, [pc, #84]	; (80009ec <MX_USART1_UART_Init+0x5c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 800099c:	22e1      	movs	r2, #225	; 0xe1
 800099e:	0252      	lsls	r2, r2, #9
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <MX_USART1_UART_Init+0x58>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 fe5b 	bl	8002690 <HAL_UART_Init>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f907 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000054 	.word	0x20000054
 80009ec:	40013800 	.word	0x40013800

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b08b      	sub	sp, #44	; 0x2c
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	2414      	movs	r4, #20
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	0018      	movs	r0, r3
 80009fc:	2314      	movs	r3, #20
 80009fe:	001a      	movs	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	f002 fce7 	bl	80033d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b6a      	ldr	r3, [pc, #424]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0a:	4b69      	ldr	r3, [pc, #420]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a12:	4b67      	ldr	r3, [pc, #412]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	2204      	movs	r2, #4
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b64      	ldr	r3, [pc, #400]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a22:	4b63      	ldr	r3, [pc, #396]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	430a      	orrs	r2, r1
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a2a:	4b61      	ldr	r3, [pc, #388]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b5e      	ldr	r3, [pc, #376]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a3a:	4b5d      	ldr	r3, [pc, #372]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a42:	4b5b      	ldr	r3, [pc, #364]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a46:	2201      	movs	r2, #1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b58      	ldr	r3, [pc, #352]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a52:	4b57      	ldr	r3, [pc, #348]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a54:	2102      	movs	r1, #2
 8000a56:	430a      	orrs	r2, r1
 8000a58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a5a:	4b55      	ldr	r3, [pc, #340]	; (8000bb0 <MX_GPIO_Init+0x1c0>)
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	2202      	movs	r2, #2
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_HV_GPIO_Port, SW_HV_Pin, GPIO_PIN_RESET);
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	019b      	lsls	r3, r3, #6
 8000a6a:	4852      	ldr	r0, [pc, #328]	; (8000bb4 <MX_GPIO_Init+0x1c4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	0019      	movs	r1, r3
 8000a70:	f000 fc4b 	bl	800130a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW_CLK_Pin|DISP_CS_Pin|DISP_DATA_Pin, GPIO_PIN_RESET);
 8000a74:	23e0      	movs	r3, #224	; 0xe0
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	484f      	ldr	r0, [pc, #316]	; (8000bb8 <MX_GPIO_Init+0x1c8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	f000 fc44 	bl	800130a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_HV_Pin */
  GPIO_InitStruct.Pin = SW_HV_Pin;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	0192      	lsls	r2, r2, #6
 8000a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_HV_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	4a45      	ldr	r2, [pc, #276]	; (8000bb4 <MX_GPIO_Init+0x1c4>)
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	0010      	movs	r0, r2
 8000aa4:	f000 fa9e 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000aa8:	0021      	movs	r1, r4
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	22c0      	movs	r2, #192	; 0xc0
 8000aae:	0212      	lsls	r2, r2, #8
 8000ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab2:	000c      	movs	r4, r1
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	4a3c      	ldr	r2, [pc, #240]	; (8000bb4 <MX_GPIO_Init+0x1c4>)
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	0010      	movs	r0, r2
 8000ac8:	f000 fa8c 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2203      	movs	r2, #3
 8000ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	4a36      	ldr	r2, [pc, #216]	; (8000bbc <MX_GPIO_Init+0x1cc>)
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	0010      	movs	r0, r2
 8000ae6:	f000 fa7d 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	4a34      	ldr	r2, [pc, #208]	; (8000bc0 <MX_GPIO_Init+0x1d0>)
 8000aee:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2203      	movs	r2, #3
 8000af4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	193a      	adds	r2, r7, r4
 8000afe:	23a0      	movs	r3, #160	; 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 fa6d 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	4a2d      	ldr	r2, [pc, #180]	; (8000bc4 <MX_GPIO_Init+0x1d4>)
 8000b0e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	2203      	movs	r2, #3
 8000b14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	4a26      	ldr	r2, [pc, #152]	; (8000bb8 <MX_GPIO_Init+0x1c8>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f000 fa5e 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_ROLL_Pin SW_MODE_Pin SW_SPEED_Pin SW_DICE_Pin */
  GPIO_InitStruct.Pin = SW_ROLL_Pin|SW_MODE_Pin|SW_SPEED_Pin|SW_DICE_Pin;
 8000b28:	0021      	movs	r1, r4
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	22f0      	movs	r2, #240	; 0xf0
 8000b2e:	0212      	lsls	r2, r2, #8
 8000b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	000c      	movs	r4, r1
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <MX_GPIO_Init+0x1c8>)
 8000b44:	0019      	movs	r1, r3
 8000b46:	0010      	movs	r0, r2
 8000b48:	f000 fa4c 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_PULSE_Pin */
  GPIO_InitStruct.Pin = INT_PULSE_Pin;
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	0052      	lsls	r2, r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_GPIO_Init+0x1d8>)
 8000b58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_PULSE_GPIO_Port, &GPIO_InitStruct);
 8000b60:	193a      	adds	r2, r7, r4
 8000b62:	23a0      	movs	r3, #160	; 0xa0
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 fa3b 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_CLK_Pin DISP_CS_Pin DISP_DATA_Pin */
  GPIO_InitStruct.Pin = SW_CLK_Pin|DISP_CS_Pin|DISP_DATA_Pin;
 8000b6e:	0021      	movs	r1, r4
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	22e0      	movs	r2, #224	; 0xe0
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <MX_GPIO_Init+0x1c8>)
 8000b8e:	0019      	movs	r1, r3
 8000b90:	0010      	movs	r0, r2
 8000b92:	f000 fa27 	bl	8000fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2007      	movs	r0, #7
 8000b9c:	f000 f9fc 	bl	8000f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ba0:	2007      	movs	r0, #7
 8000ba2:	f000 fa0e 	bl	8000fc2 <HAL_NVIC_EnableIRQ>

}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b00b      	add	sp, #44	; 0x2c
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	50000800 	.word	0x50000800
 8000bb8:	50000400 	.word	0x50000400
 8000bbc:	50001c00 	.word	0x50001c00
 8000bc0:	000098ff 	.word	0x000098ff
 8000bc4:	00000c7f 	.word	0x00000c7f
 8000bc8:	10210000 	.word	0x10210000

08000bcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d101      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bde:	f000 f937 	bl	8000e50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40001000 	.word	0x40001000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_MspInit+0x24>)
 8000c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x24>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_MspInit+0x24>)
 8000c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_MspInit+0x24>)
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	0549      	lsls	r1, r1, #21
 8000c16:	430a      	orrs	r2, r1
 8000c18:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	240c      	movs	r4, #12
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	0018      	movs	r0, r3
 8000c32:	2314      	movs	r3, #20
 8000c34:	001a      	movs	r2, r3
 8000c36:	2100      	movs	r1, #0
 8000c38:	f002 fbcc 	bl	80033d4 <memset>
  if(huart->Instance==USART1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <HAL_UART_MspInit+0x80>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12a      	bne.n	8000c9c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	01c9      	lsls	r1, r1, #7
 8000c50:	430a      	orrs	r2, r1
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	2201      	movs	r2, #1
 8000c66:	4013      	ands	r3, r2
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	22c0      	movs	r2, #192	; 0xc0
 8000c70:	00d2      	lsls	r2, r2, #3
 8000c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	0021      	movs	r1, r4
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2202      	movs	r2, #2
 8000c7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2203      	movs	r2, #3
 8000c86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	187a      	adds	r2, r7, r1
 8000c90:	23a0      	movs	r3, #160	; 0xa0
 8000c92:	05db      	lsls	r3, r3, #23
 8000c94:	0011      	movs	r1, r2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f9a4 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b009      	add	sp, #36	; 0x24
 8000ca2:	bd90      	pop	{r4, r7, pc}
 8000ca4:	40013800 	.word	0x40013800
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	2011      	movs	r0, #17
 8000cc4:	f000 f968 	bl	8000f98 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc8:	2011      	movs	r0, #17
 8000cca:	f000 f97a 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_InitTick+0x98>)
 8000cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_InitTick+0x98>)
 8000cd4:	2110      	movs	r1, #16
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cda:	2308      	movs	r3, #8
 8000cdc:	18fa      	adds	r2, r7, r3
 8000cde:	230c      	movs	r3, #12
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f001 f94d 	bl	8001f84 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cea:	f001 f91f 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	4914      	ldr	r1, [pc, #80]	; (8000d48 <HAL_InitTick+0x9c>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff fa06 	bl	8000108 <__udivsi3>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0xa0>)
 8000d04:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <HAL_InitTick+0xa4>)
 8000d06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_InitTick+0xa0>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_InitTick+0xa8>)
 8000d0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_InitTick+0xa0>)
 8000d10:	6a3a      	ldr	r2, [r7, #32]
 8000d12:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_InitTick+0xa0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_InitTick+0xa0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_InitTick+0xa0>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f001 fac4 	bl	80022b0 <HAL_TIM_Base_Init>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d105      	bne.n	8000d38 <HAL_InitTick+0x8c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_InitTick+0xa0>)
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f001 fb06 	bl	8002340 <HAL_TIM_Base_Start_IT>
 8000d34:	0003      	movs	r3, r0
 8000d36:	e000      	b.n	8000d3a <HAL_InitTick+0x8e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b00a      	add	sp, #40	; 0x28
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40021000 	.word	0x40021000
 8000d48:	000f4240 	.word	0x000f4240
 8000d4c:	200000dc 	.word	0x200000dc
 8000d50:	40001000 	.word	0x40001000
 8000d54:	000003e7 	.word	0x000003e7

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 faf6 	bl	800137c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <TIM6_DAC_IRQHandler+0x14>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f001 fb1a 	bl	80023d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	200000dc 	.word	0x200000dc

08000db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dbe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000de6:	f7ff ffe3 	bl	8000db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f002 facf 	bl	800338c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fcd5 	bl	800079c <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   r0, =_estack
 8000df4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e00:	08003520 	.word	0x08003520
  ldr r2, =_sbss
 8000e04:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e08:	20000120 	.word	0x20000120

08000e0c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_COMP_IRQHandler>
	...

08000e10 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x3c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Init+0x3c>)
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	430a      	orrs	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff ff3f 	bl	8000cac <HAL_InitTick>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e001      	b.n	8000e3e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e3a:	f7ff fedf 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_IncTick+0x1c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	001a      	movs	r2, r3
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_IncTick+0x20>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	18d2      	adds	r2, r2, r3
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_IncTick+0x20>)
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	20000010 	.word	0x20000010
 8000e70:	2000011c 	.word	0x2000011c

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b02      	ldr	r3, [pc, #8]	; (8000e84 <HAL_GetTick+0x10>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	2000011c 	.word	0x2000011c

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	0002      	movs	r2, r0
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b7f      	cmp	r3, #127	; 0x7f
 8000e9a:	d809      	bhi.n	8000eb0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	231f      	movs	r3, #31
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_EnableIRQ+0x30>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4091      	lsls	r1, r2
 8000eac:	000a      	movs	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
  }
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b7f      	cmp	r3, #127	; 0x7f
 8000ed0:	d828      	bhi.n	8000f24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <__NVIC_SetPriority+0xd4>)
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	33c0      	adds	r3, #192	; 0xc0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	589b      	ldr	r3, [r3, r2]
 8000ee2:	1dfa      	adds	r2, r7, #7
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	2203      	movs	r2, #3
 8000eea:	400a      	ands	r2, r1
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	21ff      	movs	r1, #255	; 0xff
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	43d2      	mvns	r2, r2
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	22ff      	movs	r2, #255	; 0xff
 8000f00:	401a      	ands	r2, r3
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0018      	movs	r0, r3
 8000f08:	2303      	movs	r3, #3
 8000f0a:	4003      	ands	r3, r0
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f10:	481f      	ldr	r0, [pc, #124]	; (8000f90 <__NVIC_SetPriority+0xd4>)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	33c0      	adds	r3, #192	; 0xc0
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f22:	e031      	b.n	8000f88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	400b      	ands	r3, r1
 8000f30:	3b08      	subs	r3, #8
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3306      	adds	r3, #6
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1dfa      	adds	r2, r7, #7
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	0011      	movs	r1, r2
 8000f44:	2203      	movs	r2, #3
 8000f46:	400a      	ands	r2, r1
 8000f48:	00d2      	lsls	r2, r2, #3
 8000f4a:	21ff      	movs	r1, #255	; 0xff
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	43d2      	mvns	r2, r2
 8000f52:	401a      	ands	r2, r3
 8000f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	22ff      	movs	r2, #255	; 0xff
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0018      	movs	r0, r3
 8000f64:	2303      	movs	r3, #3
 8000f66:	4003      	ands	r3, r0
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	001c      	movs	r4, r3
 8000f74:	230f      	movs	r3, #15
 8000f76:	4023      	ands	r3, r4
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	3306      	adds	r3, #6
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18c3      	adds	r3, r0, r3
 8000f84:	3304      	adds	r3, #4
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b003      	add	sp, #12
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	1c02      	adds	r2, r0, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ff81 	bl	8000ebc <__NVIC_SetPriority>
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	0002      	movs	r2, r0
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff ff57 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ffa:	e14f      	b.n	800129c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4091      	lsls	r1, r2
 8001006:	000a      	movs	r2, r1
 8001008:	4013      	ands	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d100      	bne.n	8001014 <HAL_GPIO_Init+0x30>
 8001012:	e140      	b.n	8001296 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d00b      	beq.n	8001034 <HAL_GPIO_Init+0x50>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001028:	2b11      	cmp	r3, #17
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b12      	cmp	r3, #18
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	409a      	lsls	r2, r3
 8001056:	0013      	movs	r3, r2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106a:	2201      	movs	r2, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	2201      	movs	r2, #1
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0xf2>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b12      	cmp	r3, #18
 80010d4:	d123      	bne.n	800111e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	58d3      	ldr	r3, [r2, r3]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2207      	movs	r2, #7
 80010e8:	4013      	ands	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	691a      	ldr	r2, [r3, #16]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2107      	movs	r1, #7
 8001102:	400b      	ands	r3, r1
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	6939      	ldr	r1, [r7, #16]
 800111c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	409a      	lsls	r2, r3
 800112c:	0013      	movs	r3, r2
 800112e:	43da      	mvns	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2203      	movs	r2, #3
 800113c:	401a      	ands	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	055b      	lsls	r3, r3, #21
 800115a:	4013      	ands	r3, r2
 800115c:	d100      	bne.n	8001160 <HAL_GPIO_Init+0x17c>
 800115e:	e09a      	b.n	8001296 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001160:	4b54      	ldr	r3, [pc, #336]	; (80012b4 <HAL_GPIO_Init+0x2d0>)
 8001162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001164:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_GPIO_Init+0x2d0>)
 8001166:	2101      	movs	r1, #1
 8001168:	430a      	orrs	r2, r1
 800116a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800116c:	4a52      	ldr	r2, [pc, #328]	; (80012b8 <HAL_GPIO_Init+0x2d4>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	589b      	ldr	r3, [r3, r2]
 8001178:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2203      	movs	r2, #3
 800117e:	4013      	ands	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	43da      	mvns	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	23a0      	movs	r3, #160	; 0xa0
 8001194:	05db      	lsls	r3, r3, #23
 8001196:	429a      	cmp	r2, r3
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x1ea>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a47      	ldr	r2, [pc, #284]	; (80012bc <HAL_GPIO_Init+0x2d8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x1e6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a46      	ldr	r2, [pc, #280]	; (80012c0 <HAL_GPIO_Init+0x2dc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x1e2>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a45      	ldr	r2, [pc, #276]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x1de>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a44      	ldr	r2, [pc, #272]	; (80012c8 <HAL_GPIO_Init+0x2e4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x1da>
 80011ba:	2305      	movs	r3, #5
 80011bc:	e008      	b.n	80011d0 <HAL_GPIO_Init+0x1ec>
 80011be:	2306      	movs	r3, #6
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x1ec>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x1ec>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x1ec>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x1ec>
 80011ce:	2300      	movs	r3, #0
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	2103      	movs	r1, #3
 80011d4:	400a      	ands	r2, r1
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	4935      	ldr	r1, [pc, #212]	; (80012b8 <HAL_GPIO_Init+0x2d4>)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	43da      	mvns	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	025b      	lsls	r3, r3, #9
 8001206:	4013      	ands	r3, r2
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43da      	mvns	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	029b      	lsls	r3, r3, #10
 8001230:	4013      	ands	r3, r2
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43da      	mvns	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	035b      	lsls	r3, r3, #13
 800125a:	4013      	ands	r3, r2
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43da      	mvns	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	039b      	lsls	r3, r3, #14
 8001284:	4013      	ands	r3, r2
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	40da      	lsrs	r2, r3
 80012a4:	1e13      	subs	r3, r2, #0
 80012a6:	d000      	beq.n	80012aa <HAL_GPIO_Init+0x2c6>
 80012a8:	e6a8      	b.n	8000ffc <HAL_GPIO_Init+0x18>
  }
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b006      	add	sp, #24
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	50000400 	.word	0x50000400
 80012c0:	50000800 	.word	0x50000800
 80012c4:	50000c00 	.word	0x50000c00
 80012c8:	50001c00 	.word	0x50001c00
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	000a      	movs	r2, r1
 80012da:	1cbb      	adds	r3, r7, #2
 80012dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	1cba      	adds	r2, r7, #2
 80012e4:	8812      	ldrh	r2, [r2, #0]
 80012e6:	4013      	ands	r3, r2
 80012e8:	d004      	beq.n	80012f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012ea:	230f      	movs	r3, #15
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e003      	b.n	80012fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012f4:	230f      	movs	r3, #15
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80012fc:	230f      	movs	r3, #15
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	781b      	ldrb	r3, [r3, #0]
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b004      	add	sp, #16
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	0008      	movs	r0, r1
 8001314:	0011      	movs	r1, r2
 8001316:	1cbb      	adds	r3, r7, #2
 8001318:	1c02      	adds	r2, r0, #0
 800131a:	801a      	strh	r2, [r3, #0]
 800131c:	1c7b      	adds	r3, r7, #1
 800131e:	1c0a      	adds	r2, r1, #0
 8001320:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001322:	1c7b      	adds	r3, r7, #1
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132a:	1cbb      	adds	r3, r7, #2
 800132c:	881a      	ldrh	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001332:	e003      	b.n	800133c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001334:	1cbb      	adds	r3, r7, #2
 8001336:	881a      	ldrh	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	000a      	movs	r2, r1
 800134e:	1cbb      	adds	r3, r7, #2
 8001350:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001358:	1cbb      	adds	r3, r7, #2
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4013      	ands	r3, r2
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43db      	mvns	r3, r3
 8001366:	1cb9      	adds	r1, r7, #2
 8001368:	8809      	ldrh	r1, [r1, #0]
 800136a:	400b      	ands	r3, r1
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b004      	add	sp, #16
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	0002      	movs	r2, r0
 8001384:	1dbb      	adds	r3, r7, #6
 8001386:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	1dba      	adds	r2, r7, #6
 800138e:	8812      	ldrh	r2, [r2, #0]
 8001390:	4013      	ands	r3, r2
 8001392:	d008      	beq.n	80013a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001396:	1dba      	adds	r2, r7, #6
 8001398:	8812      	ldrh	r2, [r2, #0]
 800139a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800139c:	1dbb      	adds	r3, r7, #6
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff f9bb 	bl	800071c <HAL_GPIO_EXTI_Callback>
  }
}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b002      	add	sp, #8
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40010400 	.word	0x40010400

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f000 fbaf 	bl	8001b26 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c8:	4bcf      	ldr	r3, [pc, #828]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	220c      	movs	r2, #12
 80013ce:	4013      	ands	r3, r2
 80013d0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d2:	4bcd      	ldr	r3, [pc, #820]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	025b      	lsls	r3, r3, #9
 80013da:	4013      	ands	r3, r2
 80013dc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2201      	movs	r2, #1
 80013e4:	4013      	ands	r3, r2
 80013e6:	d100      	bne.n	80013ea <HAL_RCC_OscConfig+0x36>
 80013e8:	e07e      	b.n	80014e8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d007      	beq.n	8001400 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	d112      	bne.n	800141c <HAL_RCC_OscConfig+0x68>
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	025b      	lsls	r3, r3, #9
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d10d      	bne.n	800141c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	4bc1      	ldr	r3, [pc, #772]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	029b      	lsls	r3, r3, #10
 8001408:	4013      	ands	r3, r2
 800140a:	d100      	bne.n	800140e <HAL_RCC_OscConfig+0x5a>
 800140c:	e06b      	b.n	80014e6 <HAL_RCC_OscConfig+0x132>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d167      	bne.n	80014e6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	f000 fb85 	bl	8001b26 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	025b      	lsls	r3, r3, #9
 8001424:	429a      	cmp	r2, r3
 8001426:	d107      	bne.n	8001438 <HAL_RCC_OscConfig+0x84>
 8001428:	4bb7      	ldr	r3, [pc, #732]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4bb6      	ldr	r3, [pc, #728]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0249      	lsls	r1, r1, #9
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e027      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	23a0      	movs	r3, #160	; 0xa0
 800143e:	02db      	lsls	r3, r3, #11
 8001440:	429a      	cmp	r2, r3
 8001442:	d10e      	bne.n	8001462 <HAL_RCC_OscConfig+0xae>
 8001444:	4bb0      	ldr	r3, [pc, #704]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4baf      	ldr	r3, [pc, #700]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	02c9      	lsls	r1, r1, #11
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	4bad      	ldr	r3, [pc, #692]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4bac      	ldr	r3, [pc, #688]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0249      	lsls	r1, r1, #9
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	e012      	b.n	8001488 <HAL_RCC_OscConfig+0xd4>
 8001462:	4ba9      	ldr	r3, [pc, #676]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4ba8      	ldr	r3, [pc, #672]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001468:	49a8      	ldr	r1, [pc, #672]	; (800170c <HAL_RCC_OscConfig+0x358>)
 800146a:	400a      	ands	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	4ba6      	ldr	r3, [pc, #664]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	025b      	lsls	r3, r3, #9
 8001476:	4013      	ands	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4ba2      	ldr	r3, [pc, #648]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4ba1      	ldr	r3, [pc, #644]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001482:	49a3      	ldr	r1, [pc, #652]	; (8001710 <HAL_RCC_OscConfig+0x35c>)
 8001484:	400a      	ands	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d015      	beq.n	80014bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fcf0 	bl	8000e74 <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001498:	e009      	b.n	80014ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149a:	f7ff fceb 	bl	8000e74 <HAL_GetTick>
 800149e:	0002      	movs	r2, r0
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b64      	cmp	r3, #100	; 0x64
 80014a6:	d902      	bls.n	80014ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	f000 fb3c 	bl	8001b26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ae:	4b96      	ldr	r3, [pc, #600]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	029b      	lsls	r3, r3, #10
 80014b6:	4013      	ands	r3, r2
 80014b8:	d0ef      	beq.n	800149a <HAL_RCC_OscConfig+0xe6>
 80014ba:	e015      	b.n	80014e8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fcda 	bl	8000e74 <HAL_GetTick>
 80014c0:	0003      	movs	r3, r0
 80014c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c6:	f7ff fcd5 	bl	8000e74 <HAL_GetTick>
 80014ca:	0002      	movs	r2, r0
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b64      	cmp	r3, #100	; 0x64
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e326      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014d8:	4b8b      	ldr	r3, [pc, #556]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	029b      	lsls	r3, r3, #10
 80014e0:	4013      	ands	r3, r2
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x112>
 80014e4:	e000      	b.n	80014e8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2202      	movs	r2, #2
 80014ee:	4013      	ands	r3, r2
 80014f0:	d100      	bne.n	80014f4 <HAL_RCC_OscConfig+0x140>
 80014f2:	e08b      	b.n	800160c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d005      	beq.n	800150c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d13e      	bne.n	8001584 <HAL_RCC_OscConfig+0x1d0>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d13b      	bne.n	8001584 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800150c:	4b7e      	ldr	r3, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2204      	movs	r2, #4
 8001512:	4013      	ands	r3, r2
 8001514:	d004      	beq.n	8001520 <HAL_RCC_OscConfig+0x16c>
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e302      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b79      	ldr	r3, [pc, #484]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a7b      	ldr	r2, [pc, #492]	; (8001714 <HAL_RCC_OscConfig+0x360>)
 8001526:	4013      	ands	r3, r2
 8001528:	0019      	movs	r1, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	021a      	lsls	r2, r3, #8
 8001530:	4b75      	ldr	r3, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001532:	430a      	orrs	r2, r1
 8001534:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001536:	4b74      	ldr	r3, [pc, #464]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2209      	movs	r2, #9
 800153c:	4393      	bics	r3, r2
 800153e:	0019      	movs	r1, r3
 8001540:	4b71      	ldr	r3, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001548:	f000 fc40 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 800154c:	0001      	movs	r1, r0
 800154e:	4b6e      	ldr	r3, [pc, #440]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	220f      	movs	r2, #15
 8001556:	4013      	ands	r3, r2
 8001558:	4a6f      	ldr	r2, [pc, #444]	; (8001718 <HAL_RCC_OscConfig+0x364>)
 800155a:	5cd3      	ldrb	r3, [r2, r3]
 800155c:	000a      	movs	r2, r1
 800155e:	40da      	lsrs	r2, r3
 8001560:	4b6e      	ldr	r3, [pc, #440]	; (800171c <HAL_RCC_OscConfig+0x368>)
 8001562:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001564:	4b6e      	ldr	r3, [pc, #440]	; (8001720 <HAL_RCC_OscConfig+0x36c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2513      	movs	r5, #19
 800156a:	197c      	adds	r4, r7, r5
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff fb9d 	bl	8000cac <HAL_InitTick>
 8001572:	0003      	movs	r3, r0
 8001574:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001576:	197b      	adds	r3, r7, r5
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d046      	beq.n	800160c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800157e:	197b      	adds	r3, r7, r5
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	e2d0      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d027      	beq.n	80015da <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2209      	movs	r2, #9
 8001590:	4393      	bics	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	4b5c      	ldr	r3, [pc, #368]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fc6a 	bl	8000e74 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fc65 	bl	8000e74 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e2b6      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015b8:	4b53      	ldr	r3, [pc, #332]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2204      	movs	r2, #4
 80015be:	4013      	ands	r3, r2
 80015c0:	d0f1      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4a53      	ldr	r2, [pc, #332]	; (8001714 <HAL_RCC_OscConfig+0x360>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	021a      	lsls	r2, r3, #8
 80015d2:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	e018      	b.n	800160c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015da:	4b4b      	ldr	r3, [pc, #300]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80015e0:	2101      	movs	r1, #1
 80015e2:	438a      	bics	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fc45 	bl	8000e74 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f0:	f7ff fc40 	bl	8000e74 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e291      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001602:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2204      	movs	r2, #4
 8001608:	4013      	ands	r3, r2
 800160a:	d1f1      	bne.n	80015f0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2210      	movs	r2, #16
 8001612:	4013      	ands	r3, r2
 8001614:	d100      	bne.n	8001618 <HAL_RCC_OscConfig+0x264>
 8001616:	e0a1      	b.n	800175c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d140      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d005      	beq.n	8001636 <HAL_RCC_OscConfig+0x282>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e277      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a3a      	ldr	r2, [pc, #232]	; (8001724 <HAL_RCC_OscConfig+0x370>)
 800163c:	4013      	ands	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001646:	430a      	orrs	r2, r1
 8001648:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	0a19      	lsrs	r1, r3, #8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	061a      	lsls	r2, r3, #24
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	0b5b      	lsrs	r3, r3, #13
 8001664:	3301      	adds	r3, #1
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	0212      	lsls	r2, r2, #8
 800166a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	210f      	movs	r1, #15
 8001674:	400b      	ands	r3, r1
 8001676:	4928      	ldr	r1, [pc, #160]	; (8001718 <HAL_RCC_OscConfig+0x364>)
 8001678:	5ccb      	ldrb	r3, [r1, r3]
 800167a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_RCC_OscConfig+0x368>)
 800167e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_RCC_OscConfig+0x36c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2513      	movs	r5, #19
 8001686:	197c      	adds	r4, r7, r5
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff fb0f 	bl	8000cac <HAL_InitTick>
 800168e:	0003      	movs	r3, r0
 8001690:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001692:	197b      	adds	r3, r7, r5
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d060      	beq.n	800175c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800169a:	197b      	adds	r3, r7, r5
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	e242      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d03f      	beq.n	8001728 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	0049      	lsls	r1, r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fbdd 	bl	8000e74 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c0:	f7ff fbd8 	bl	8000e74 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e229      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_RCC_OscConfig+0x370>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	0a19      	lsrs	r1, r3, #8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	061a      	lsls	r2, r3, #24
 8001700:	4b01      	ldr	r3, [pc, #4]	; (8001708 <HAL_RCC_OscConfig+0x354>)
 8001702:	430a      	orrs	r2, r1
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	e029      	b.n	800175c <HAL_RCC_OscConfig+0x3a8>
 8001708:	40021000 	.word	0x40021000
 800170c:	fffeffff 	.word	0xfffeffff
 8001710:	fffbffff 	.word	0xfffbffff
 8001714:	ffffe0ff 	.word	0xffffe0ff
 8001718:	080033fc 	.word	0x080033fc
 800171c:	20000008 	.word	0x20000008
 8001720:	2000000c 	.word	0x2000000c
 8001724:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001728:	4bbd      	ldr	r3, [pc, #756]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4bbc      	ldr	r3, [pc, #752]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 800172e:	49bd      	ldr	r1, [pc, #756]	; (8001a24 <HAL_RCC_OscConfig+0x670>)
 8001730:	400a      	ands	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fb9e 	bl	8000e74 <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800173e:	f7ff fb99 	bl	8000e74 <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e1ea      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001750:	4bb3      	ldr	r3, [pc, #716]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4013      	ands	r3, r2
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2208      	movs	r2, #8
 8001762:	4013      	ands	r3, r2
 8001764:	d036      	beq.n	80017d4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d019      	beq.n	80017a2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176e:	4bac      	ldr	r3, [pc, #688]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001772:	4bab      	ldr	r3, [pc, #684]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001774:	2101      	movs	r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff fb7b 	bl	8000e74 <HAL_GetTick>
 800177e:	0003      	movs	r3, r0
 8001780:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fb76 	bl	8000e74 <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e1c7      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001796:	4ba2      	ldr	r3, [pc, #648]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800179a:	2202      	movs	r2, #2
 800179c:	4013      	ands	r3, r2
 800179e:	d0f1      	beq.n	8001784 <HAL_RCC_OscConfig+0x3d0>
 80017a0:	e018      	b.n	80017d4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a2:	4b9f      	ldr	r3, [pc, #636]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80017a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017a6:	4b9e      	ldr	r3, [pc, #632]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	438a      	bics	r2, r1
 80017ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fb61 	bl	8000e74 <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fb5c 	bl	8000e74 <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1ad      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ca:	4b95      	ldr	r3, [pc, #596]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80017cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ce:	2202      	movs	r2, #2
 80017d0:	4013      	ands	r3, r2
 80017d2:	d1f1      	bne.n	80017b8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2204      	movs	r2, #4
 80017da:	4013      	ands	r3, r2
 80017dc:	d100      	bne.n	80017e0 <HAL_RCC_OscConfig+0x42c>
 80017de:	e0ae      	b.n	800193e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e0:	2027      	movs	r0, #39	; 0x27
 80017e2:	183b      	adds	r3, r7, r0
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e8:	4b8d      	ldr	r3, [pc, #564]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80017ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	055b      	lsls	r3, r3, #21
 80017f0:	4013      	ands	r3, r2
 80017f2:	d109      	bne.n	8001808 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	4b8a      	ldr	r3, [pc, #552]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80017f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017f8:	4b89      	ldr	r3, [pc, #548]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	0549      	lsls	r1, r1, #21
 80017fe:	430a      	orrs	r2, r1
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001802:	183b      	adds	r3, r7, r0
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	4b87      	ldr	r3, [pc, #540]	; (8001a28 <HAL_RCC_OscConfig+0x674>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4013      	ands	r3, r2
 8001812:	d11a      	bne.n	800184a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001814:	4b84      	ldr	r3, [pc, #528]	; (8001a28 <HAL_RCC_OscConfig+0x674>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b83      	ldr	r3, [pc, #524]	; (8001a28 <HAL_RCC_OscConfig+0x674>)
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	0049      	lsls	r1, r1, #1
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001822:	f7ff fb27 	bl	8000e74 <HAL_GetTick>
 8001826:	0003      	movs	r3, r0
 8001828:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182c:	f7ff fb22 	bl	8000e74 <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e173      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183e:	4b7a      	ldr	r3, [pc, #488]	; (8001a28 <HAL_RCC_OscConfig+0x674>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4013      	ands	r3, r2
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	429a      	cmp	r2, r3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_OscConfig+0x4b2>
 8001856:	4b72      	ldr	r3, [pc, #456]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185a:	4b71      	ldr	r3, [pc, #452]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	0049      	lsls	r1, r1, #1
 8001860:	430a      	orrs	r2, r1
 8001862:	651a      	str	r2, [r3, #80]	; 0x50
 8001864:	e031      	b.n	80018ca <HAL_RCC_OscConfig+0x516>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x4d4>
 800186e:	4b6c      	ldr	r3, [pc, #432]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001870:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001872:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001874:	496b      	ldr	r1, [pc, #428]	; (8001a24 <HAL_RCC_OscConfig+0x670>)
 8001876:	400a      	ands	r2, r1
 8001878:	651a      	str	r2, [r3, #80]	; 0x50
 800187a:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 800187c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800187e:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001880:	496a      	ldr	r1, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x678>)
 8001882:	400a      	ands	r2, r1
 8001884:	651a      	str	r2, [r3, #80]	; 0x50
 8001886:	e020      	b.n	80018ca <HAL_RCC_OscConfig+0x516>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	23a0      	movs	r3, #160	; 0xa0
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	429a      	cmp	r2, r3
 8001892:	d10e      	bne.n	80018b2 <HAL_RCC_OscConfig+0x4fe>
 8001894:	4b62      	ldr	r3, [pc, #392]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001898:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 800189a:	2180      	movs	r1, #128	; 0x80
 800189c:	00c9      	lsls	r1, r1, #3
 800189e:	430a      	orrs	r2, r1
 80018a0:	651a      	str	r2, [r3, #80]	; 0x50
 80018a2:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80018a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018a6:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0049      	lsls	r1, r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	651a      	str	r2, [r3, #80]	; 0x50
 80018b0:	e00b      	b.n	80018ca <HAL_RCC_OscConfig+0x516>
 80018b2:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80018b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018b6:	4b5a      	ldr	r3, [pc, #360]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80018b8:	495a      	ldr	r1, [pc, #360]	; (8001a24 <HAL_RCC_OscConfig+0x670>)
 80018ba:	400a      	ands	r2, r1
 80018bc:	651a      	str	r2, [r3, #80]	; 0x50
 80018be:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80018c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018c2:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80018c4:	4959      	ldr	r1, [pc, #356]	; (8001a2c <HAL_RCC_OscConfig+0x678>)
 80018c6:	400a      	ands	r2, r1
 80018c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d015      	beq.n	80018fe <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d2:	f7ff facf 	bl	8000e74 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018da:	e009      	b.n	80018f0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff faca 	bl	8000e74 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	4a52      	ldr	r2, [pc, #328]	; (8001a30 <HAL_RCC_OscConfig+0x67c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e11a      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018f0:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80018f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4013      	ands	r3, r2
 80018fa:	d0ef      	beq.n	80018dc <HAL_RCC_OscConfig+0x528>
 80018fc:	e014      	b.n	8001928 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fab9 	bl	8000e74 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001906:	e009      	b.n	800191c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff fab4 	bl	8000e74 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <HAL_RCC_OscConfig+0x67c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e104      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800191c:	4b40      	ldr	r3, [pc, #256]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 800191e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d1ef      	bne.n	8001908 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001928:	2327      	movs	r3, #39	; 0x27
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d105      	bne.n	800193e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001938:	493e      	ldr	r1, [pc, #248]	; (8001a34 <HAL_RCC_OscConfig+0x680>)
 800193a:	400a      	ands	r2, r1
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2220      	movs	r2, #32
 8001944:	4013      	ands	r3, r2
 8001946:	d049      	beq.n	80019dc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d026      	beq.n	800199e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001956:	2101      	movs	r1, #1
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 800195e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001960:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001962:	2101      	movs	r1, #1
 8001964:	430a      	orrs	r2, r1
 8001966:	635a      	str	r2, [r3, #52]	; 0x34
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_RCC_OscConfig+0x684>)
 800196a:	6a1a      	ldr	r2, [r3, #32]
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_RCC_OscConfig+0x684>)
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	0189      	lsls	r1, r1, #6
 8001972:	430a      	orrs	r2, r1
 8001974:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fa7d 	bl	8000e74 <HAL_GetTick>
 800197a:	0003      	movs	r3, r0
 800197c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001980:	f7ff fa78 	bl	8000e74 <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0c9      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d0f1      	beq.n	8001980 <HAL_RCC_OscConfig+0x5cc>
 800199c:	e01e      	b.n	80019dc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	438a      	bics	r2, r1
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_RCC_OscConfig+0x684>)
 80019ac:	6a1a      	ldr	r2, [r3, #32]
 80019ae:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <HAL_RCC_OscConfig+0x684>)
 80019b0:	4922      	ldr	r1, [pc, #136]	; (8001a3c <HAL_RCC_OscConfig+0x688>)
 80019b2:	400a      	ands	r2, r1
 80019b4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff fa5d 	bl	8000e74 <HAL_GetTick>
 80019ba:	0003      	movs	r3, r0
 80019bc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c0:	f7ff fa58 	bl	8000e74 <HAL_GetTick>
 80019c4:	0002      	movs	r2, r0
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e0a9      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	d1f1      	bne.n	80019c0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d100      	bne.n	80019e6 <HAL_RCC_OscConfig+0x632>
 80019e4:	e09e      	b.n	8001b24 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	2b0c      	cmp	r3, #12
 80019ea:	d100      	bne.n	80019ee <HAL_RCC_OscConfig+0x63a>
 80019ec:	e077      	b.n	8001ade <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d158      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_OscConfig+0x66c>)
 80019fc:	4910      	ldr	r1, [pc, #64]	; (8001a40 <HAL_RCC_OscConfig+0x68c>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff fa37 	bl	8000e74 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a0a:	e01b      	b.n	8001a44 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff fa32 	bl	8000e74 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d914      	bls.n	8001a44 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e083      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	40021000 	.word	0x40021000
 8001a24:	fffffeff 	.word	0xfffffeff
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	fffffbff 	.word	0xfffffbff
 8001a30:	00001388 	.word	0x00001388
 8001a34:	efffffff 	.word	0xefffffff
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	ffffdfff 	.word	0xffffdfff
 8001a40:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a44:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	049b      	lsls	r3, r3, #18
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d1dd      	bne.n	8001a0c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a50:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a37      	ldr	r2, [pc, #220]	; (8001b34 <HAL_RCC_OscConfig+0x780>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a70:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001a76:	2180      	movs	r1, #128	; 0x80
 8001a78:	0449      	lsls	r1, r1, #17
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f9f9 	bl	8000e74 <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff f9f4 	bl	8000e74 <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e045      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	049b      	lsls	r3, r3, #18
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x6d4>
 8001aa6:	e03d      	b.n	8001b24 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001aae:	4922      	ldr	r1, [pc, #136]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f9de 	bl	8000e74 <HAL_GetTick>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff f9d9 	bl	8000e74 <HAL_GetTick>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e02a      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	049b      	lsls	r3, r3, #18
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x70a>
 8001adc:	e022      	b.n	8001b24 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e01d      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_RCC_OscConfig+0x77c>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	025b      	lsls	r3, r3, #9
 8001af6:	401a      	ands	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d10f      	bne.n	8001b20 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	23f0      	movs	r3, #240	; 0xf0
 8001b04:	039b      	lsls	r3, r3, #14
 8001b06:	401a      	ands	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	23c0      	movs	r3, #192	; 0xc0
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	401a      	ands	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b00a      	add	sp, #40	; 0x28
 8001b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40021000 	.word	0x40021000
 8001b34:	ff02ffff 	.word	0xff02ffff
 8001b38:	feffffff 	.word	0xfeffffff

08001b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b5b0      	push	{r4, r5, r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e128      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b96      	ldr	r3, [pc, #600]	; (8001dac <HAL_RCC_ClockConfig+0x270>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d91e      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b93      	ldr	r3, [pc, #588]	; (8001dac <HAL_RCC_ClockConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4393      	bics	r3, r2
 8001b66:	0019      	movs	r1, r3
 8001b68:	4b90      	ldr	r3, [pc, #576]	; (8001dac <HAL_RCC_ClockConfig+0x270>)
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b70:	f7ff f980 	bl	8000e74 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b78:	e009      	b.n	8001b8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7a:	f7ff f97b 	bl	8000e74 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	4a8a      	ldr	r2, [pc, #552]	; (8001db0 <HAL_RCC_ClockConfig+0x274>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e109      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b87      	ldr	r3, [pc, #540]	; (8001dac <HAL_RCC_ClockConfig+0x270>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1ee      	bne.n	8001b7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d009      	beq.n	8001bba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba6:	4b83      	ldr	r3, [pc, #524]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	22f0      	movs	r2, #240	; 0xf0
 8001bac:	4393      	bics	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	4b7f      	ldr	r3, [pc, #508]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x8a>
 8001bc4:	e089      	b.n	8001cda <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bce:	4b79      	ldr	r3, [pc, #484]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	029b      	lsls	r3, r3, #10
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d120      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0e1      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001be6:	4b73      	ldr	r3, [pc, #460]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	049b      	lsls	r3, r3, #18
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d114      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0d5      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d106      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bfe:	4b6d      	ldr	r3, [pc, #436]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2204      	movs	r2, #4
 8001c04:	4013      	ands	r3, r2
 8001c06:	d109      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0ca      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c0c:	4b69      	ldr	r3, [pc, #420]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4013      	ands	r3, r2
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0c2      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1c:	4b65      	ldr	r3, [pc, #404]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2203      	movs	r2, #3
 8001c22:	4393      	bics	r3, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4b62      	ldr	r3, [pc, #392]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c30:	f7ff f920 	bl	8000e74 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d111      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c40:	e009      	b.n	8001c56 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c42:	f7ff f917 	bl	8000e74 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x274>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0a5      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c56:	4b57      	ldr	r3, [pc, #348]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d1ef      	bne.n	8001c42 <HAL_RCC_ClockConfig+0x106>
 8001c62:	e03a      	b.n	8001cda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d111      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6c:	e009      	b.n	8001c82 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7ff f901 	bl	8000e74 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	4a4d      	ldr	r2, [pc, #308]	; (8001db0 <HAL_RCC_ClockConfig+0x274>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e08f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c82:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	220c      	movs	r2, #12
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d1ef      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x132>
 8001c8e:	e024      	b.n	8001cda <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d11b      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c98:	e009      	b.n	8001cae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9a:	f7ff f8eb 	bl	8000e74 <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	4a42      	ldr	r2, [pc, #264]	; (8001db0 <HAL_RCC_ClockConfig+0x274>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e079      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cae:	4b41      	ldr	r3, [pc, #260]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d1ef      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x15e>
 8001cba:	e00e      	b.n	8001cda <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbc:	f7ff f8da 	bl	8000e74 <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	4a3a      	ldr	r2, [pc, #232]	; (8001db0 <HAL_RCC_ClockConfig+0x274>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e068      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cd0:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_RCC_ClockConfig+0x270>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d21e      	bcs.n	8001d26 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_RCC_ClockConfig+0x270>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4393      	bics	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_RCC_ClockConfig+0x270>)
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cfa:	f7ff f8bb 	bl	8000e74 <HAL_GetTick>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	e009      	b.n	8001d18 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7ff f8b6 	bl	8000e74 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <HAL_RCC_ClockConfig+0x274>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e044      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_RCC_ClockConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d1ee      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a20      	ldr	r2, [pc, #128]	; (8001db8 <HAL_RCC_ClockConfig+0x27c>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001d40:	430a      	orrs	r2, r1
 8001d42:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2208      	movs	r2, #8
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d00a      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <HAL_RCC_ClockConfig+0x280>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	00da      	lsls	r2, r3, #3
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d64:	f000 f832 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001d68:	0001      	movs	r1, r0
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_RCC_ClockConfig+0x278>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	220f      	movs	r2, #15
 8001d72:	4013      	ands	r3, r2
 8001d74:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <HAL_RCC_ClockConfig+0x284>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	000a      	movs	r2, r1
 8001d7a:	40da      	lsrs	r2, r3
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_RCC_ClockConfig+0x288>)
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_ClockConfig+0x28c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	250b      	movs	r5, #11
 8001d86:	197c      	adds	r4, r7, r5
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7fe ff8f 	bl	8000cac <HAL_InitTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d92:	197b      	adds	r3, r7, r5
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d9a:	197b      	adds	r3, r7, r5
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	0018      	movs	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b004      	add	sp, #16
 8001da8:	bdb0      	pop	{r4, r5, r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	40022000 	.word	0x40022000
 8001db0:	00001388 	.word	0x00001388
 8001db4:	40021000 	.word	0x40021000
 8001db8:	fffff8ff 	.word	0xfffff8ff
 8001dbc:	ffffc7ff 	.word	0xffffc7ff
 8001dc0:	080033fc 	.word	0x080033fc
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	2000000c 	.word	0x2000000c

08001dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dcc:	b5b0      	push	{r4, r5, r7, lr}
 8001dce:	b08e      	sub	sp, #56	; 0x38
 8001dd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dda:	230c      	movs	r3, #12
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d014      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x40>
 8001de2:	d900      	bls.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001de4:	e07b      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x112>
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d002      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x24>
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d00b      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dee:	e076      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x138>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2210      	movs	r2, #16
 8001df6:	4013      	ands	r3, r2
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001dfa:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001dfe:	e07c      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001e00:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x140>)
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e04:	e079      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e06:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e0a:	e076      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0e:	0c9a      	lsrs	r2, r3, #18
 8001e10:	230f      	movs	r3, #15
 8001e12:	401a      	ands	r2, r3
 8001e14:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x148>)
 8001e16:	5c9b      	ldrb	r3, [r3, r2]
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	0d9a      	lsrs	r2, r3, #22
 8001e1e:	2303      	movs	r3, #3
 8001e20:	4013      	ands	r3, r2
 8001e22:	3301      	adds	r3, #1
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e26:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	025b      	lsls	r3, r3, #9
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d01a      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	4a35      	ldr	r2, [pc, #212]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	69b8      	ldr	r0, [r7, #24]
 8001e40:	69f9      	ldr	r1, [r7, #28]
 8001e42:	f7fe faf7 	bl	8000434 <__aeabi_lmul>
 8001e46:	0002      	movs	r2, r0
 8001e48:	000b      	movs	r3, r1
 8001e4a:	0010      	movs	r0, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f7fe facb 	bl	80003f4 <__aeabi_uldivmod>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	000b      	movs	r3, r1
 8001e62:	0013      	movs	r3, r2
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
 8001e66:	e037      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e68:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d01a      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4a23      	ldr	r2, [pc, #140]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	68b8      	ldr	r0, [r7, #8]
 8001e80:	68f9      	ldr	r1, [r7, #12]
 8001e82:	f7fe fad7 	bl	8000434 <__aeabi_lmul>
 8001e86:	0002      	movs	r2, r0
 8001e88:	000b      	movs	r3, r1
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f7fe faab 	bl	80003f4 <__aeabi_uldivmod>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	000b      	movs	r3, r1
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea6:	e017      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	0018      	movs	r0, r3
 8001eac:	2300      	movs	r3, #0
 8001eae:	0019      	movs	r1, r3
 8001eb0:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x140>)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f7fe fabe 	bl	8000434 <__aeabi_lmul>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	000b      	movs	r3, r1
 8001ebc:	0010      	movs	r0, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	001d      	movs	r5, r3
 8001ec8:	0022      	movs	r2, r4
 8001eca:	002b      	movs	r3, r5
 8001ecc:	f7fe fa92 	bl	80003f4 <__aeabi_uldivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	000b      	movs	r3, r1
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001edc:	e00d      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	0b5b      	lsrs	r3, r3, #13
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	3301      	adds	r3, #1
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0212      	lsls	r2, r2, #8
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ef8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b00e      	add	sp, #56	; 0x38
 8001f02:	bdb0      	pop	{r4, r5, r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	003d0900 	.word	0x003d0900
 8001f0c:	00f42400 	.word	0x00f42400
 8001f10:	007a1200 	.word	0x007a1200
 8001f14:	08003414 	.word	0x08003414

08001f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f1c:	4b02      	ldr	r3, [pc, #8]	; (8001f28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	20000008 	.word	0x20000008

08001f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f30:	f7ff fff2 	bl	8001f18 <HAL_RCC_GetHCLKFreq>
 8001f34:	0001      	movs	r1, r0
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	4013      	ands	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
 8001f44:	40d9      	lsrs	r1, r3
 8001f46:	000b      	movs	r3, r1
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	40021000 	.word	0x40021000
 8001f54:	0800340c 	.word	0x0800340c

08001f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f5c:	f7ff ffdc 	bl	8001f18 <HAL_RCC_GetHCLKFreq>
 8001f60:	0001      	movs	r1, r0
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	0adb      	lsrs	r3, r3, #11
 8001f68:	2207      	movs	r2, #7
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	40d9      	lsrs	r1, r3
 8001f72:	000b      	movs	r3, r1
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	0800340c 	.word	0x0800340c

08001f84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	220f      	movs	r2, #15
 8001f92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2203      	movs	r2, #3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	22f0      	movs	r2, #240	; 0xf0
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	23e0      	movs	r3, #224	; 0xe0
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_GetClockConfig+0x5c>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	23e0      	movs	r3, #224	; 0xe0
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_RCC_GetClockConfig+0x60>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	601a      	str	r2, [r3, #0]
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40022000 	.word	0x40022000

08001fe8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ff0:	2317      	movs	r3, #23
 8001ff2:	18fb      	adds	r3, r7, r3
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	4013      	ands	r3, r2
 8002000:	d106      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	4013      	ands	r3, r2
 800200c:	d100      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800200e:	e0d9      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002010:	4b9c      	ldr	r3, [pc, #624]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	055b      	lsls	r3, r3, #21
 8002018:	4013      	ands	r3, r2
 800201a:	d10a      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201c:	4b99      	ldr	r3, [pc, #612]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800201e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002020:	4b98      	ldr	r3, [pc, #608]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0549      	lsls	r1, r1, #21
 8002026:	430a      	orrs	r2, r1
 8002028:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800202a:	2317      	movs	r3, #23
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b95      	ldr	r3, [pc, #596]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d11a      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b92      	ldr	r3, [pc, #584]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b91      	ldr	r3, [pc, #580]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	0049      	lsls	r1, r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204c:	f7fe ff12 	bl	8000e74 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	e008      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7fe ff0d 	bl	8000e74 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	; 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e108      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	4b87      	ldr	r3, [pc, #540]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4013      	ands	r3, r2
 8002072:	d0f0      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002074:	4b83      	ldr	r3, [pc, #524]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	23c0      	movs	r3, #192	; 0xc0
 800207a:	039b      	lsls	r3, r3, #14
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	23c0      	movs	r3, #192	; 0xc0
 8002086:	039b      	lsls	r3, r3, #14
 8002088:	4013      	ands	r3, r2
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d107      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	23c0      	movs	r3, #192	; 0xc0
 8002096:	039b      	lsls	r3, r3, #14
 8002098:	4013      	ands	r3, r2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d013      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	23c0      	movs	r3, #192	; 0xc0
 80020a6:	029b      	lsls	r3, r3, #10
 80020a8:	401a      	ands	r2, r3
 80020aa:	23c0      	movs	r3, #192	; 0xc0
 80020ac:	029b      	lsls	r3, r3, #10
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d10a      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020b2:	4b74      	ldr	r3, [pc, #464]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	401a      	ands	r2, r3
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	029b      	lsls	r3, r3, #10
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d101      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0d8      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020c8:	4b6e      	ldr	r3, [pc, #440]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020cc:	23c0      	movs	r3, #192	; 0xc0
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d049      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	23c0      	movs	r3, #192	; 0xc0
 80020e0:	029b      	lsls	r3, r3, #10
 80020e2:	4013      	ands	r3, r2
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d004      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2220      	movs	r2, #32
 80020f0:	4013      	ands	r3, r2
 80020f2:	d10d      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	23c0      	movs	r3, #192	; 0xc0
 80020fa:	029b      	lsls	r3, r3, #10
 80020fc:	4013      	ands	r3, r2
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d034      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	4013      	ands	r3, r2
 800210e:	d02e      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002110:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002114:	4a5d      	ldr	r2, [pc, #372]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002116:	4013      	ands	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800211a:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800211c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800211e:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	0309      	lsls	r1, r1, #12
 8002124:	430a      	orrs	r2, r1
 8002126:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002128:	4b56      	ldr	r3, [pc, #344]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800212a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800212c:	4b55      	ldr	r3, [pc, #340]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800212e:	4958      	ldr	r1, [pc, #352]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002130:	400a      	ands	r2, r1
 8002132:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002134:	4b53      	ldr	r3, [pc, #332]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4013      	ands	r3, r2
 8002142:	d014      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe fe96 	bl	8000e74 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800214c:	e009      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe fe91 	bl	8000e74 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e08b      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002162:	4b48      	ldr	r3, [pc, #288]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4013      	ands	r3, r2
 800216c:	d0ef      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	23c0      	movs	r3, #192	; 0xc0
 8002174:	029b      	lsls	r3, r3, #10
 8002176:	401a      	ands	r2, r3
 8002178:	23c0      	movs	r3, #192	; 0xc0
 800217a:	029b      	lsls	r3, r3, #10
 800217c:	429a      	cmp	r2, r3
 800217e:	d10c      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002180:	4b40      	ldr	r3, [pc, #256]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a44      	ldr	r2, [pc, #272]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002186:	4013      	ands	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	23c0      	movs	r3, #192	; 0xc0
 8002190:	039b      	lsls	r3, r3, #14
 8002192:	401a      	ands	r2, r3
 8002194:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002196:	430a      	orrs	r2, r1
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800219c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	23c0      	movs	r3, #192	; 0xc0
 80021a4:	029b      	lsls	r3, r3, #10
 80021a6:	401a      	ands	r2, r3
 80021a8:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ae:	2317      	movs	r3, #23
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b8:	4b32      	ldr	r3, [pc, #200]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021bc:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021be:	4937      	ldr	r1, [pc, #220]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	d009      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	2203      	movs	r2, #3
 80021d4:	4393      	bics	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	4b29      	ldr	r3, [pc, #164]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2202      	movs	r2, #2
 80021e8:	4013      	ands	r3, r2
 80021ea:	d009      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f0:	220c      	movs	r2, #12
 80021f2:	4393      	bics	r3, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021fc:	430a      	orrs	r2, r1
 80021fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2204      	movs	r2, #4
 8002206:	4013      	ands	r3, r2
 8002208:	d009      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002210:	4013      	ands	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800221a:	430a      	orrs	r2, r1
 800221c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2208      	movs	r2, #8
 8002224:	4013      	ands	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800222e:	4013      	ands	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002238:	430a      	orrs	r2, r1
 800223a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2240      	movs	r2, #64	; 0x40
 8002242:	4013      	ands	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800224c:	4013      	ands	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002256:	430a      	orrs	r2, r1
 8002258:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	4013      	ands	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800226a:	4013      	ands	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002274:	430a      	orrs	r2, r1
 8002276:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b006      	add	sp, #24
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	40021000 	.word	0x40021000
 8002288:	40007000 	.word	0x40007000
 800228c:	fffcffff 	.word	0xfffcffff
 8002290:	fff7ffff 	.word	0xfff7ffff
 8002294:	00001388 	.word	0x00001388
 8002298:	ffcfffff 	.word	0xffcfffff
 800229c:	efffffff 	.word	0xefffffff
 80022a0:	fffff3ff 	.word	0xfffff3ff
 80022a4:	ffffcfff 	.word	0xffffcfff
 80022a8:	fbffffff 	.word	0xfbffffff
 80022ac:	fff3ffff 	.word	0xfff3ffff

080022b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e032      	b.n	8002328 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2239      	movs	r2, #57	; 0x39
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2238      	movs	r2, #56	; 0x38
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 f829 	bl	8002330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2239      	movs	r2, #57	; 0x39
 80022e2:	2102      	movs	r1, #2
 80022e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	0019      	movs	r1, r3
 80022f0:	0010      	movs	r0, r2
 80022f2:	f000 f979 	bl	80025e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	223e      	movs	r2, #62	; 0x3e
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	223a      	movs	r2, #58	; 0x3a
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223b      	movs	r2, #59	; 0x3b
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	223c      	movs	r2, #60	; 0x3c
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	223d      	movs	r2, #61	; 0x3d
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2239      	movs	r2, #57	; 0x39
 8002322:	2101      	movs	r1, #1
 8002324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2239      	movs	r2, #57	; 0x39
 800234c:	5c9b      	ldrb	r3, [r3, r2]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d001      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e036      	b.n	80023c6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2239      	movs	r2, #57	; 0x39
 800235c:	2102      	movs	r1, #2
 800235e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2101      	movs	r1, #1
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	05db      	lsls	r3, r3, #23
 8002378:	429a      	cmp	r2, r3
 800237a:	d009      	beq.n	8002390 <HAL_TIM_Base_Start_IT+0x50>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <HAL_TIM_Base_Start_IT+0x90>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d004      	beq.n	8002390 <HAL_TIM_Base_Start_IT+0x50>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <HAL_TIM_Base_Start_IT+0x94>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d111      	bne.n	80023b4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2207      	movs	r2, #7
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d010      	beq.n	80023c4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2101      	movs	r1, #1
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b2:	e007      	b.n	80023c4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2101      	movs	r1, #1
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b004      	add	sp, #16
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	40010800 	.word	0x40010800
 80023d4:	40011400 	.word	0x40011400

080023d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2202      	movs	r2, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d124      	bne.n	8002438 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2202      	movs	r2, #2
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d11d      	bne.n	8002438 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2203      	movs	r2, #3
 8002402:	4252      	negs	r2, r2
 8002404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2203      	movs	r2, #3
 8002414:	4013      	ands	r3, r2
 8002416:	d004      	beq.n	8002422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	0018      	movs	r0, r3
 800241c:	f000 f8cc 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 8002420:	e007      	b.n	8002432 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 f8bf 	bl	80025a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	0018      	movs	r0, r3
 800242e:	f000 f8cb 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2204      	movs	r2, #4
 8002440:	4013      	ands	r3, r2
 8002442:	2b04      	cmp	r3, #4
 8002444:	d125      	bne.n	8002492 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2204      	movs	r2, #4
 800244e:	4013      	ands	r3, r2
 8002450:	2b04      	cmp	r3, #4
 8002452:	d11e      	bne.n	8002492 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2205      	movs	r2, #5
 800245a:	4252      	negs	r2, r2
 800245c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	23c0      	movs	r3, #192	; 0xc0
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 f89f 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 800247a:	e007      	b.n	800248c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f892 	bl	80025a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0018      	movs	r0, r3
 8002488:	f000 f89e 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2208      	movs	r2, #8
 800249a:	4013      	ands	r3, r2
 800249c:	2b08      	cmp	r3, #8
 800249e:	d124      	bne.n	80024ea <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2208      	movs	r2, #8
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11d      	bne.n	80024ea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2209      	movs	r2, #9
 80024b4:	4252      	negs	r2, r2
 80024b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2204      	movs	r2, #4
 80024bc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2203      	movs	r2, #3
 80024c6:	4013      	ands	r3, r2
 80024c8:	d004      	beq.n	80024d4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 f873 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 80024d2:	e007      	b.n	80024e4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 f866 	bl	80025a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 f872 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2210      	movs	r2, #16
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d125      	bne.n	8002544 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2210      	movs	r2, #16
 8002500:	4013      	ands	r3, r2
 8002502:	2b10      	cmp	r3, #16
 8002504:	d11e      	bne.n	8002544 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2211      	movs	r2, #17
 800250c:	4252      	negs	r2, r2
 800250e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2208      	movs	r2, #8
 8002514:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	23c0      	movs	r3, #192	; 0xc0
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d004      	beq.n	800252e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	0018      	movs	r0, r3
 8002528:	f000 f846 	bl	80025b8 <HAL_TIM_IC_CaptureCallback>
 800252c:	e007      	b.n	800253e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f839 	bl	80025a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 f845 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2201      	movs	r2, #1
 800254c:	4013      	ands	r3, r2
 800254e:	2b01      	cmp	r3, #1
 8002550:	d10f      	bne.n	8002572 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	4013      	ands	r3, r2
 800255c:	2b01      	cmp	r3, #1
 800255e:	d108      	bne.n	8002572 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2202      	movs	r2, #2
 8002566:	4252      	negs	r2, r2
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f7fe fb2d 	bl	8000bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	4013      	ands	r3, r2
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d10f      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2240      	movs	r2, #64	; 0x40
 8002588:	4013      	ands	r3, r2
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d108      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2241      	movs	r2, #65	; 0x41
 8002594:	4252      	negs	r2, r2
 8002596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f000 f81c 	bl	80025d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025d0:	46c0      	nop			; (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	05db      	lsls	r3, r3, #23
 80025fe:	429a      	cmp	r2, r3
 8002600:	d007      	beq.n	8002612 <TIM_Base_SetConfig+0x2a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a1f      	ldr	r2, [pc, #124]	; (8002684 <TIM_Base_SetConfig+0x9c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d003      	beq.n	8002612 <TIM_Base_SetConfig+0x2a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <TIM_Base_SetConfig+0xa0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d108      	bne.n	8002624 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2270      	movs	r2, #112	; 0x70
 8002616:	4393      	bics	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	05db      	lsls	r3, r3, #23
 800262a:	429a      	cmp	r2, r3
 800262c:	d007      	beq.n	800263e <TIM_Base_SetConfig+0x56>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <TIM_Base_SetConfig+0x9c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <TIM_Base_SetConfig+0x56>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a13      	ldr	r2, [pc, #76]	; (8002688 <TIM_Base_SetConfig+0xa0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d108      	bne.n	8002650 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a12      	ldr	r2, [pc, #72]	; (800268c <TIM_Base_SetConfig+0xa4>)
 8002642:	4013      	ands	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	4393      	bics	r3, r2
 8002656:	001a      	movs	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	615a      	str	r2, [r3, #20]
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b004      	add	sp, #16
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40010800 	.word	0x40010800
 8002688:	40011400 	.word	0x40011400
 800268c:	fffffcff 	.word	0xfffffcff

08002690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e044      	b.n	800272c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2274      	movs	r2, #116	; 0x74
 80026ae:	2100      	movs	r1, #0
 80026b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f7fe fab5 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2224      	movs	r2, #36	; 0x24
 80026be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2101      	movs	r1, #1
 80026cc:	438a      	bics	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f830 	bl	8002738 <UART_SetConfig>
 80026d8:	0003      	movs	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e024      	b.n	800272c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 fac3 	bl	8002c78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	490d      	ldr	r1, [pc, #52]	; (8002734 <HAL_UART_Init+0xa4>)
 80026fe:	400a      	ands	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	212a      	movs	r1, #42	; 0x2a
 800270e:	438a      	bics	r2, r1
 8002710:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 fb5b 	bl	8002de0 <UART_CheckIdleState>
 800272a:	0003      	movs	r3, r0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}
 8002734:	ffffb7ff 	.word	0xffffb7ff

08002738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b08e      	sub	sp, #56	; 0x38
 800273c:	af00      	add	r7, sp, #0
 800273e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002740:	231a      	movs	r3, #26
 8002742:	2218      	movs	r2, #24
 8002744:	4694      	mov	ip, r2
 8002746:	44bc      	add	ip, r7
 8002748:	4463      	add	r3, ip
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	431a      	orrs	r2, r3
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	431a      	orrs	r2, r3
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4313      	orrs	r3, r2
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4ac1      	ldr	r2, [pc, #772]	; (8002a74 <UART_SetConfig+0x33c>)
 800276e:	4013      	ands	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4abd      	ldr	r2, [pc, #756]	; (8002a78 <UART_SetConfig+0x340>)
 8002784:	4013      	ands	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4ab7      	ldr	r2, [pc, #732]	; (8002a7c <UART_SetConfig+0x344>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027aa:	4313      	orrs	r3, r2
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4ab2      	ldr	r2, [pc, #712]	; (8002a80 <UART_SetConfig+0x348>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027c0:	430a      	orrs	r2, r1
 80027c2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4aae      	ldr	r2, [pc, #696]	; (8002a84 <UART_SetConfig+0x34c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d136      	bne.n	800283c <UART_SetConfig+0x104>
 80027ce:	4bae      	ldr	r3, [pc, #696]	; (8002a88 <UART_SetConfig+0x350>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	2203      	movs	r2, #3
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d020      	beq.n	800281c <UART_SetConfig+0xe4>
 80027da:	d827      	bhi.n	800282c <UART_SetConfig+0xf4>
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d00d      	beq.n	80027fc <UART_SetConfig+0xc4>
 80027e0:	d824      	bhi.n	800282c <UART_SetConfig+0xf4>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <UART_SetConfig+0xb4>
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d010      	beq.n	800280c <UART_SetConfig+0xd4>
 80027ea:	e01f      	b.n	800282c <UART_SetConfig+0xf4>
 80027ec:	231b      	movs	r3, #27
 80027ee:	2218      	movs	r2, #24
 80027f0:	4694      	mov	ip, r2
 80027f2:	44bc      	add	ip, r7
 80027f4:	4463      	add	r3, ip
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e0ab      	b.n	8002954 <UART_SetConfig+0x21c>
 80027fc:	231b      	movs	r3, #27
 80027fe:	2218      	movs	r2, #24
 8002800:	4694      	mov	ip, r2
 8002802:	44bc      	add	ip, r7
 8002804:	4463      	add	r3, ip
 8002806:	2202      	movs	r2, #2
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	e0a3      	b.n	8002954 <UART_SetConfig+0x21c>
 800280c:	231b      	movs	r3, #27
 800280e:	2218      	movs	r2, #24
 8002810:	4694      	mov	ip, r2
 8002812:	44bc      	add	ip, r7
 8002814:	4463      	add	r3, ip
 8002816:	2204      	movs	r2, #4
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e09b      	b.n	8002954 <UART_SetConfig+0x21c>
 800281c:	231b      	movs	r3, #27
 800281e:	2218      	movs	r2, #24
 8002820:	4694      	mov	ip, r2
 8002822:	44bc      	add	ip, r7
 8002824:	4463      	add	r3, ip
 8002826:	2208      	movs	r2, #8
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e093      	b.n	8002954 <UART_SetConfig+0x21c>
 800282c:	231b      	movs	r3, #27
 800282e:	2218      	movs	r2, #24
 8002830:	4694      	mov	ip, r2
 8002832:	44bc      	add	ip, r7
 8002834:	4463      	add	r3, ip
 8002836:	2210      	movs	r2, #16
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e08b      	b.n	8002954 <UART_SetConfig+0x21c>
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a92      	ldr	r2, [pc, #584]	; (8002a8c <UART_SetConfig+0x354>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d136      	bne.n	80028b4 <UART_SetConfig+0x17c>
 8002846:	4b90      	ldr	r3, [pc, #576]	; (8002a88 <UART_SetConfig+0x350>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	220c      	movs	r2, #12
 800284c:	4013      	ands	r3, r2
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d020      	beq.n	8002894 <UART_SetConfig+0x15c>
 8002852:	d827      	bhi.n	80028a4 <UART_SetConfig+0x16c>
 8002854:	2b08      	cmp	r3, #8
 8002856:	d00d      	beq.n	8002874 <UART_SetConfig+0x13c>
 8002858:	d824      	bhi.n	80028a4 <UART_SetConfig+0x16c>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <UART_SetConfig+0x12c>
 800285e:	2b04      	cmp	r3, #4
 8002860:	d010      	beq.n	8002884 <UART_SetConfig+0x14c>
 8002862:	e01f      	b.n	80028a4 <UART_SetConfig+0x16c>
 8002864:	231b      	movs	r3, #27
 8002866:	2218      	movs	r2, #24
 8002868:	4694      	mov	ip, r2
 800286a:	44bc      	add	ip, r7
 800286c:	4463      	add	r3, ip
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e06f      	b.n	8002954 <UART_SetConfig+0x21c>
 8002874:	231b      	movs	r3, #27
 8002876:	2218      	movs	r2, #24
 8002878:	4694      	mov	ip, r2
 800287a:	44bc      	add	ip, r7
 800287c:	4463      	add	r3, ip
 800287e:	2202      	movs	r2, #2
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e067      	b.n	8002954 <UART_SetConfig+0x21c>
 8002884:	231b      	movs	r3, #27
 8002886:	2218      	movs	r2, #24
 8002888:	4694      	mov	ip, r2
 800288a:	44bc      	add	ip, r7
 800288c:	4463      	add	r3, ip
 800288e:	2204      	movs	r2, #4
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e05f      	b.n	8002954 <UART_SetConfig+0x21c>
 8002894:	231b      	movs	r3, #27
 8002896:	2218      	movs	r2, #24
 8002898:	4694      	mov	ip, r2
 800289a:	44bc      	add	ip, r7
 800289c:	4463      	add	r3, ip
 800289e:	2208      	movs	r2, #8
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e057      	b.n	8002954 <UART_SetConfig+0x21c>
 80028a4:	231b      	movs	r3, #27
 80028a6:	2218      	movs	r2, #24
 80028a8:	4694      	mov	ip, r2
 80028aa:	44bc      	add	ip, r7
 80028ac:	4463      	add	r3, ip
 80028ae:	2210      	movs	r2, #16
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	e04f      	b.n	8002954 <UART_SetConfig+0x21c>
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a70      	ldr	r2, [pc, #448]	; (8002a7c <UART_SetConfig+0x344>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d143      	bne.n	8002946 <UART_SetConfig+0x20e>
 80028be:	4b72      	ldr	r3, [pc, #456]	; (8002a88 <UART_SetConfig+0x350>)
 80028c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028c2:	23c0      	movs	r3, #192	; 0xc0
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4013      	ands	r3, r2
 80028c8:	22c0      	movs	r2, #192	; 0xc0
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d02a      	beq.n	8002926 <UART_SetConfig+0x1ee>
 80028d0:	22c0      	movs	r2, #192	; 0xc0
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d82e      	bhi.n	8002936 <UART_SetConfig+0x1fe>
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	4293      	cmp	r3, r2
 80028de:	d012      	beq.n	8002906 <UART_SetConfig+0x1ce>
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d826      	bhi.n	8002936 <UART_SetConfig+0x1fe>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <UART_SetConfig+0x1be>
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	00d2      	lsls	r2, r2, #3
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d010      	beq.n	8002916 <UART_SetConfig+0x1de>
 80028f4:	e01f      	b.n	8002936 <UART_SetConfig+0x1fe>
 80028f6:	231b      	movs	r3, #27
 80028f8:	2218      	movs	r2, #24
 80028fa:	4694      	mov	ip, r2
 80028fc:	44bc      	add	ip, r7
 80028fe:	4463      	add	r3, ip
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	e026      	b.n	8002954 <UART_SetConfig+0x21c>
 8002906:	231b      	movs	r3, #27
 8002908:	2218      	movs	r2, #24
 800290a:	4694      	mov	ip, r2
 800290c:	44bc      	add	ip, r7
 800290e:	4463      	add	r3, ip
 8002910:	2202      	movs	r2, #2
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e01e      	b.n	8002954 <UART_SetConfig+0x21c>
 8002916:	231b      	movs	r3, #27
 8002918:	2218      	movs	r2, #24
 800291a:	4694      	mov	ip, r2
 800291c:	44bc      	add	ip, r7
 800291e:	4463      	add	r3, ip
 8002920:	2204      	movs	r2, #4
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	e016      	b.n	8002954 <UART_SetConfig+0x21c>
 8002926:	231b      	movs	r3, #27
 8002928:	2218      	movs	r2, #24
 800292a:	4694      	mov	ip, r2
 800292c:	44bc      	add	ip, r7
 800292e:	4463      	add	r3, ip
 8002930:	2208      	movs	r2, #8
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e00e      	b.n	8002954 <UART_SetConfig+0x21c>
 8002936:	231b      	movs	r3, #27
 8002938:	2218      	movs	r2, #24
 800293a:	4694      	mov	ip, r2
 800293c:	44bc      	add	ip, r7
 800293e:	4463      	add	r3, ip
 8002940:	2210      	movs	r2, #16
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e006      	b.n	8002954 <UART_SetConfig+0x21c>
 8002946:	231b      	movs	r3, #27
 8002948:	2218      	movs	r2, #24
 800294a:	4694      	mov	ip, r2
 800294c:	44bc      	add	ip, r7
 800294e:	4463      	add	r3, ip
 8002950:	2210      	movs	r2, #16
 8002952:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a48      	ldr	r2, [pc, #288]	; (8002a7c <UART_SetConfig+0x344>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d000      	beq.n	8002960 <UART_SetConfig+0x228>
 800295e:	e09b      	b.n	8002a98 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002960:	231b      	movs	r3, #27
 8002962:	2218      	movs	r2, #24
 8002964:	4694      	mov	ip, r2
 8002966:	44bc      	add	ip, r7
 8002968:	4463      	add	r3, ip
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b08      	cmp	r3, #8
 800296e:	d01d      	beq.n	80029ac <UART_SetConfig+0x274>
 8002970:	dc20      	bgt.n	80029b4 <UART_SetConfig+0x27c>
 8002972:	2b04      	cmp	r3, #4
 8002974:	d015      	beq.n	80029a2 <UART_SetConfig+0x26a>
 8002976:	dc1d      	bgt.n	80029b4 <UART_SetConfig+0x27c>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <UART_SetConfig+0x24a>
 800297c:	2b02      	cmp	r3, #2
 800297e:	d005      	beq.n	800298c <UART_SetConfig+0x254>
 8002980:	e018      	b.n	80029b4 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002982:	f7ff fad3 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8002986:	0003      	movs	r3, r0
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800298a:	e01d      	b.n	80029c8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800298c:	4b3e      	ldr	r3, [pc, #248]	; (8002a88 <UART_SetConfig+0x350>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2210      	movs	r2, #16
 8002992:	4013      	ands	r3, r2
 8002994:	d002      	beq.n	800299c <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <UART_SetConfig+0x358>)
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800299a:	e015      	b.n	80029c8 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 800299c:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <UART_SetConfig+0x35c>)
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029a0:	e012      	b.n	80029c8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029a2:	f7ff fa13 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 80029a6:	0003      	movs	r3, r0
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029aa:	e00d      	b.n	80029c8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b2:	e009      	b.n	80029c8 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029b8:	231a      	movs	r3, #26
 80029ba:	2218      	movs	r2, #24
 80029bc:	4694      	mov	ip, r2
 80029be:	44bc      	add	ip, r7
 80029c0:	4463      	add	r3, ip
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
        break;
 80029c6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d100      	bne.n	80029d0 <UART_SetConfig+0x298>
 80029ce:	e139      	b.n	8002c44 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	0013      	movs	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	189b      	adds	r3, r3, r2
 80029da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029dc:	429a      	cmp	r2, r3
 80029de:	d305      	bcc.n	80029ec <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d907      	bls.n	80029fc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80029ec:	231a      	movs	r3, #26
 80029ee:	2218      	movs	r2, #24
 80029f0:	4694      	mov	ip, r2
 80029f2:	44bc      	add	ip, r7
 80029f4:	4463      	add	r3, ip
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e123      	b.n	8002c44 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	6939      	ldr	r1, [r7, #16]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	000b      	movs	r3, r1
 8002a0a:	0e1b      	lsrs	r3, r3, #24
 8002a0c:	0010      	movs	r0, r2
 8002a0e:	0205      	lsls	r5, r0, #8
 8002a10:	431d      	orrs	r5, r3
 8002a12:	000b      	movs	r3, r1
 8002a14:	021c      	lsls	r4, r3, #8
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68b8      	ldr	r0, [r7, #8]
 8002a24:	68f9      	ldr	r1, [r7, #12]
 8002a26:	1900      	adds	r0, r0, r4
 8002a28:	4169      	adcs	r1, r5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	2300      	movs	r3, #0
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f7fd fcdc 	bl	80003f4 <__aeabi_uldivmod>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	000b      	movs	r3, r1
 8002a40:	0013      	movs	r3, r2
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a46:	23c0      	movs	r3, #192	; 0xc0
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d309      	bcc.n	8002a62 <UART_SetConfig+0x32a>
 8002a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	035b      	lsls	r3, r3, #13
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d204      	bcs.n	8002a62 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a5e:	60da      	str	r2, [r3, #12]
 8002a60:	e0f0      	b.n	8002c44 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002a62:	231a      	movs	r3, #26
 8002a64:	2218      	movs	r2, #24
 8002a66:	4694      	mov	ip, r2
 8002a68:	44bc      	add	ip, r7
 8002a6a:	4463      	add	r3, ip
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e0e8      	b.n	8002c44 <UART_SetConfig+0x50c>
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	efff69f3 	.word	0xefff69f3
 8002a78:	ffffcfff 	.word	0xffffcfff
 8002a7c:	40004800 	.word	0x40004800
 8002a80:	fffff4ff 	.word	0xfffff4ff
 8002a84:	40013800 	.word	0x40013800
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40004400 	.word	0x40004400
 8002a90:	003d0900 	.word	0x003d0900
 8002a94:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d000      	beq.n	8002aa6 <UART_SetConfig+0x36e>
 8002aa4:	e074      	b.n	8002b90 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002aa6:	231b      	movs	r3, #27
 8002aa8:	2218      	movs	r2, #24
 8002aaa:	4694      	mov	ip, r2
 8002aac:	44bc      	add	ip, r7
 8002aae:	4463      	add	r3, ip
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d822      	bhi.n	8002afc <UART_SetConfig+0x3c4>
 8002ab6:	009a      	lsls	r2, r3, #2
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <UART_SetConfig+0x52c>)
 8002aba:	18d3      	adds	r3, r2, r3
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f7ff fa34 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ac8:	e022      	b.n	8002b10 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002aca:	f7ff fa45 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ad2:	e01d      	b.n	8002b10 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ad4:	4b64      	ldr	r3, [pc, #400]	; (8002c68 <UART_SetConfig+0x530>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2210      	movs	r2, #16
 8002ada:	4013      	ands	r3, r2
 8002adc:	d002      	beq.n	8002ae4 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <UART_SetConfig+0x534>)
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ae2:	e015      	b.n	8002b10 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8002ae4:	4b62      	ldr	r3, [pc, #392]	; (8002c70 <UART_SetConfig+0x538>)
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ae8:	e012      	b.n	8002b10 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aea:	f7ff f96f 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8002aee:	0003      	movs	r3, r0
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002af2:	e00d      	b.n	8002b10 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002afa:	e009      	b.n	8002b10 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b00:	231a      	movs	r3, #26
 8002b02:	2218      	movs	r2, #24
 8002b04:	4694      	mov	ip, r2
 8002b06:	44bc      	add	ip, r7
 8002b08:	4463      	add	r3, ip
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
        break;
 8002b0e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d100      	bne.n	8002b18 <UART_SetConfig+0x3e0>
 8002b16:	e095      	b.n	8002c44 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	005a      	lsls	r2, r3, #1
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	18d2      	adds	r2, r2, r3
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0019      	movs	r1, r3
 8002b2a:	0010      	movs	r0, r2
 8002b2c:	f7fd faec 	bl	8000108 <__udivsi3>
 8002b30:	0003      	movs	r3, r0
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d921      	bls.n	8002b80 <UART_SetConfig+0x448>
 8002b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3e:	2380      	movs	r3, #128	; 0x80
 8002b40:	025b      	lsls	r3, r3, #9
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d21c      	bcs.n	8002b80 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	200e      	movs	r0, #14
 8002b4c:	2418      	movs	r4, #24
 8002b4e:	193b      	adds	r3, r7, r4
 8002b50:	181b      	adds	r3, r3, r0
 8002b52:	210f      	movs	r1, #15
 8002b54:	438a      	bics	r2, r1
 8002b56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2207      	movs	r2, #7
 8002b60:	4013      	ands	r3, r2
 8002b62:	b299      	uxth	r1, r3
 8002b64:	193b      	adds	r3, r7, r4
 8002b66:	181b      	adds	r3, r3, r0
 8002b68:	193a      	adds	r2, r7, r4
 8002b6a:	1812      	adds	r2, r2, r0
 8002b6c:	8812      	ldrh	r2, [r2, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	193a      	adds	r2, r7, r4
 8002b78:	1812      	adds	r2, r2, r0
 8002b7a:	8812      	ldrh	r2, [r2, #0]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	e061      	b.n	8002c44 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b80:	231a      	movs	r3, #26
 8002b82:	2218      	movs	r2, #24
 8002b84:	4694      	mov	ip, r2
 8002b86:	44bc      	add	ip, r7
 8002b88:	4463      	add	r3, ip
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e059      	b.n	8002c44 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b90:	231b      	movs	r3, #27
 8002b92:	2218      	movs	r2, #24
 8002b94:	4694      	mov	ip, r2
 8002b96:	44bc      	add	ip, r7
 8002b98:	4463      	add	r3, ip
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d822      	bhi.n	8002be6 <UART_SetConfig+0x4ae>
 8002ba0:	009a      	lsls	r2, r3, #2
 8002ba2:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <UART_SetConfig+0x53c>)
 8002ba4:	18d3      	adds	r3, r2, r3
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002baa:	f7ff f9bf 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bb2:	e022      	b.n	8002bfa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bb4:	f7ff f9d0 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bbc:	e01d      	b.n	8002bfa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <UART_SetConfig+0x530>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d002      	beq.n	8002bce <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bc8:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <UART_SetConfig+0x534>)
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bcc:	e015      	b.n	8002bfa <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002bce:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <UART_SetConfig+0x538>)
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bd2:	e012      	b.n	8002bfa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bd4:	f7ff f8fa 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bdc:	e00d      	b.n	8002bfa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002be4:	e009      	b.n	8002bfa <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002bea:	231a      	movs	r3, #26
 8002bec:	2218      	movs	r2, #24
 8002bee:	4694      	mov	ip, r2
 8002bf0:	44bc      	add	ip, r7
 8002bf2:	4463      	add	r3, ip
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
        break;
 8002bf8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d021      	beq.n	8002c44 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	085a      	lsrs	r2, r3, #1
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	18d2      	adds	r2, r2, r3
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	0019      	movs	r1, r3
 8002c10:	0010      	movs	r0, r2
 8002c12:	f7fd fa79 	bl	8000108 <__udivsi3>
 8002c16:	0003      	movs	r3, r0
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	2b0f      	cmp	r3, #15
 8002c20:	d909      	bls.n	8002c36 <UART_SetConfig+0x4fe>
 8002c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	025b      	lsls	r3, r3, #9
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d204      	bcs.n	8002c36 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c32:	60da      	str	r2, [r3, #12]
 8002c34:	e006      	b.n	8002c44 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c36:	231a      	movs	r3, #26
 8002c38:	2218      	movs	r2, #24
 8002c3a:	4694      	mov	ip, r2
 8002c3c:	44bc      	add	ip, r7
 8002c3e:	4463      	add	r3, ip
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2200      	movs	r2, #0
 8002c48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c50:	231a      	movs	r3, #26
 8002c52:	2218      	movs	r2, #24
 8002c54:	4694      	mov	ip, r2
 8002c56:	44bc      	add	ip, r7
 8002c58:	4463      	add	r3, ip
 8002c5a:	781b      	ldrb	r3, [r3, #0]
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b00e      	add	sp, #56	; 0x38
 8002c62:	bdb0      	pop	{r4, r5, r7, pc}
 8002c64:	08003420 	.word	0x08003420
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	003d0900 	.word	0x003d0900
 8002c70:	00f42400 	.word	0x00f42400
 8002c74:	08003444 	.word	0x08003444

08002c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	d00b      	beq.n	8002ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4a4a      	ldr	r2, [pc, #296]	; (8002dbc <UART_AdvFeatureConfig+0x144>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	0019      	movs	r1, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d00b      	beq.n	8002cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a43      	ldr	r2, [pc, #268]	; (8002dc0 <UART_AdvFeatureConfig+0x148>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2204      	movs	r2, #4
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d00b      	beq.n	8002ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <UART_AdvFeatureConfig+0x14c>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2208      	movs	r2, #8
 8002cec:	4013      	ands	r3, r2
 8002cee:	d00b      	beq.n	8002d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4a34      	ldr	r2, [pc, #208]	; (8002dc8 <UART_AdvFeatureConfig+0x150>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a2c      	ldr	r2, [pc, #176]	; (8002dcc <UART_AdvFeatureConfig+0x154>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	2220      	movs	r2, #32
 8002d30:	4013      	ands	r3, r2
 8002d32:	d00b      	beq.n	8002d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <UART_AdvFeatureConfig+0x158>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2240      	movs	r2, #64	; 0x40
 8002d52:	4013      	ands	r3, r2
 8002d54:	d01d      	beq.n	8002d92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <UART_AdvFeatureConfig+0x15c>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	035b      	lsls	r3, r3, #13
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d10b      	bne.n	8002d92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a15      	ldr	r2, [pc, #84]	; (8002dd8 <UART_AdvFeatureConfig+0x160>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d00b      	beq.n	8002db4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <UART_AdvFeatureConfig+0x164>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
  }
}
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	fffdffff 	.word	0xfffdffff
 8002dc0:	fffeffff 	.word	0xfffeffff
 8002dc4:	fffbffff 	.word	0xfffbffff
 8002dc8:	ffff7fff 	.word	0xffff7fff
 8002dcc:	ffffefff 	.word	0xffffefff
 8002dd0:	ffffdfff 	.word	0xffffdfff
 8002dd4:	ffefffff 	.word	0xffefffff
 8002dd8:	ff9fffff 	.word	0xff9fffff
 8002ddc:	fff7ffff 	.word	0xfff7ffff

08002de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	2100      	movs	r1, #0
 8002dee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002df0:	f7fe f840 	bl	8000e74 <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2208      	movs	r2, #8
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d10c      	bne.n	8002e20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	0391      	lsls	r1, r2, #14
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <UART_CheckIdleState+0x8c>)
 8002e10:	9200      	str	r2, [sp, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f000 f82c 	bl	8002e70 <UART_WaitOnFlagUntilTimeout>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d001      	beq.n	8002e20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e021      	b.n	8002e64 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2204      	movs	r2, #4
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d10c      	bne.n	8002e48 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2280      	movs	r2, #128	; 0x80
 8002e32:	03d1      	lsls	r1, r2, #15
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <UART_CheckIdleState+0x8c>)
 8002e38:	9200      	str	r2, [sp, #0]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f000 f818 	bl	8002e70 <UART_WaitOnFlagUntilTimeout>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d001      	beq.n	8002e48 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e00d      	b.n	8002e64 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2274      	movs	r2, #116	; 0x74
 8002e5e:	2100      	movs	r1, #0
 8002e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b004      	add	sp, #16
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	01ffffff 	.word	0x01ffffff

08002e70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	1dfb      	adds	r3, r7, #7
 8002e7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e80:	e05e      	b.n	8002f40 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	3301      	adds	r3, #1
 8002e86:	d05b      	beq.n	8002f40 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e88:	f7fd fff4 	bl	8000e74 <HAL_GetTick>
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d302      	bcc.n	8002e9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11b      	bne.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	492f      	ldr	r1, [pc, #188]	; (8002f68 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	438a      	bics	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2274      	movs	r2, #116	; 0x74
 8002ece:	2100      	movs	r1, #0
 8002ed0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e044      	b.n	8002f60 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2204      	movs	r2, #4
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d02e      	beq.n	8002f40 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	401a      	ands	r2, r3
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d124      	bne.n	8002f40 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	0112      	lsls	r2, r2, #4
 8002efe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4917      	ldr	r1, [pc, #92]	; (8002f68 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	438a      	bics	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	2120      	movs	r1, #32
 8002f32:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2274      	movs	r2, #116	; 0x74
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e00f      	b.n	8002f60 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	425a      	negs	r2, r3
 8002f50:	4153      	adcs	r3, r2
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	001a      	movs	r2, r3
 8002f56:	1dfb      	adds	r3, r7, #7
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d091      	beq.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b004      	add	sp, #16
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	fffffe5f 	.word	0xfffffe5f

08002f6c <TM1638_SetMultipleDisplayRegister>:
 ==================================================================================
 */

static void
TM1638_SetMultipleDisplayRegister(const uint8_t *DigitData, uint8_t StartAddr, uint8_t Count)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	0008      	movs	r0, r1
 8002f76:	0011      	movs	r1, r2
 8002f78:	1cfb      	adds	r3, r7, #3
 8002f7a:	1c02      	adds	r2, r0, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	1cbb      	adds	r3, r7, #2
 8002f80:	1c0a      	adds	r2, r1, #0
 8002f82:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DataInstructionSet | WriteDataToRegister |
 8002f84:	240f      	movs	r4, #15
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	701a      	strb	r2, [r3, #0]
                 AutoAddressAdd | NormalMode;

  TM1638_Platform_Start();
 8002f8c:	f000 f962 	bl	8003254 <TM1638_Platform_Start>
  TM1638_Platform_WriteBytes(&Data, 1);
 8002f90:	193b      	adds	r3, r7, r4
 8002f92:	2101      	movs	r1, #1
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 f96d 	bl	8003274 <TM1638_Platform_WriteBytes>
  TM1638_Platform_Stop();
 8002f9a:	f000 f94b 	bl	8003234 <TM1638_Platform_Stop>

  Data = AddressInstructionSet | StartAddr;
 8002f9e:	1cfb      	adds	r3, r7, #3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2240      	movs	r2, #64	; 0x40
 8002fa4:	4252      	negs	r2, r2
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	193b      	adds	r3, r7, r4
 8002fac:	701a      	strb	r2, [r3, #0]

  TM1638_Platform_Start();
 8002fae:	f000 f951 	bl	8003254 <TM1638_Platform_Start>
  TM1638_Platform_WriteBytes(&Data, 1);
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 f95c 	bl	8003274 <TM1638_Platform_WriteBytes>
  TM1638_Platform_WriteBytes(DigitData, Count);
 8002fbc:	1cbb      	adds	r3, r7, #2
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 f955 	bl	8003274 <TM1638_Platform_WriteBytes>
  TM1638_Platform_Stop();
 8002fca:	f000 f933 	bl	8003234 <TM1638_Platform_Stop>
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b005      	add	sp, #20
 8002fd4:	bd90      	pop	{r4, r7, pc}

08002fd6 <TM1638_Init>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Init(void)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	af00      	add	r7, sp, #0
  return TM1638_Platform_Init();
 8002fda:	f000 f8d5 	bl	8003188 <TM1638_Platform_Init>
 8002fde:	0003      	movs	r3, r0
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <TM1638_ConfigDisplay>:
 *         - TM1638_OK: Operation was successful
 *         - TM1638_FAIL: Operation failed
 */
TM1638_Result_t
TM1638_ConfigDisplay(uint8_t Brightness, uint8_t DisplayState)
{
 8002fe6:	b590      	push	{r4, r7, lr}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	0002      	movs	r2, r0
 8002fee:	1dfb      	adds	r3, r7, #7
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	1dbb      	adds	r3, r7, #6
 8002ff4:	1c0a      	adds	r2, r1, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DisplayControlInstructionSet;
 8002ff8:	210f      	movs	r1, #15
 8002ffa:	187b      	adds	r3, r7, r1
 8002ffc:	2280      	movs	r2, #128	; 0x80
 8002ffe:	701a      	strb	r2, [r3, #0]
  Data |= Brightness & 0x07;
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b25b      	sxtb	r3, r3
 8003006:	2207      	movs	r2, #7
 8003008:	4013      	ands	r3, r2
 800300a:	b25a      	sxtb	r2, r3
 800300c:	187b      	adds	r3, r7, r1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b25b      	sxtb	r3, r3
 8003012:	4313      	orrs	r3, r2
 8003014:	b25b      	sxtb	r3, r3
 8003016:	b2da      	uxtb	r2, r3
 8003018:	187b      	adds	r3, r7, r1
 800301a:	701a      	strb	r2, [r3, #0]
  Data |= (DisplayState) ? (ShowTurnOn) : (ShowTurnOff);
 800301c:	1dbb      	adds	r3, r7, #6
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <TM1638_ConfigDisplay+0x42>
 8003024:	2308      	movs	r3, #8
 8003026:	e000      	b.n	800302a <TM1638_ConfigDisplay+0x44>
 8003028:	2300      	movs	r3, #0
 800302a:	210f      	movs	r1, #15
 800302c:	187a      	adds	r2, r7, r1
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	b252      	sxtb	r2, r2
 8003032:	4313      	orrs	r3, r2
 8003034:	b25b      	sxtb	r3, r3
 8003036:	b2da      	uxtb	r2, r3
 8003038:	000c      	movs	r4, r1
 800303a:	187b      	adds	r3, r7, r1
 800303c:	701a      	strb	r2, [r3, #0]

  TM1638_Platform_Start();
 800303e:	f000 f909 	bl	8003254 <TM1638_Platform_Start>
  TM1638_Platform_WriteBytes(&Data, 1);
 8003042:	193b      	adds	r3, r7, r4
 8003044:	2101      	movs	r1, #1
 8003046:	0018      	movs	r0, r3
 8003048:	f000 f914 	bl	8003274 <TM1638_Platform_WriteBytes>
  TM1638_Platform_Stop();
 800304c:	f000 f8f2 	bl	8003234 <TM1638_Platform_Stop>

  return TM1638_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	0018      	movs	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	b005      	add	sp, #20
 8003058:	bd90      	pop	{r4, r7, pc}

0800305a <TM1638_SetSingleDigit>:
 *         - TM1638_OK: Operation was successful
 *         - TM1638_FAIL: Operation failed
 */
TM1638_Result_t
TM1638_SetSingleDigit(uint8_t DigitData, uint8_t DigitPos)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	0002      	movs	r2, r0
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	1dbb      	adds	r3, r7, #6
 8003068:	1c0a      	adds	r2, r1, #0
 800306a:	701a      	strb	r2, [r3, #0]
#if (TM1638SegType)
  TM1638_SetMultipleDigit(&DigitData, DigitPos, 1);
#else
  TM1638_SetMultipleDisplayRegister(DigitPos, 1, &DigitData);
 800306c:	1dbb      	adds	r3, r7, #6
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	0018      	movs	r0, r3
 8003072:	1dfb      	adds	r3, r7, #7
 8003074:	b2db      	uxtb	r3, r3
 8003076:	001a      	movs	r2, r3
 8003078:	2101      	movs	r1, #1
 800307a:	f7ff ff77 	bl	8002f6c <TM1638_SetMultipleDisplayRegister>
#endif

  return TM1638_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}

08003088 <TM1638_SetSingleDigit_HEX>:
 *         - TM1638_OK: Operation was successful
 *         - TM1638_FAIL: Operation failed
 */
TM1638_Result_t
TM1638_SetSingleDigit_HEX(uint8_t DigitData, uint8_t DigitPos)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	0002      	movs	r2, r0
 8003090:	1dfb      	adds	r3, r7, #7
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	1dbb      	adds	r3, r7, #6
 8003096:	1c0a      	adds	r2, r1, #0
 8003098:	701a      	strb	r2, [r3, #0]
  uint8_t DigitDataHEX = 0;
 800309a:	200f      	movs	r0, #15
 800309c:	183b      	adds	r3, r7, r0
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
  uint8_t DecimalPoint = DigitData & 0x80;
 80030a2:	240e      	movs	r4, #14
 80030a4:	193b      	adds	r3, r7, r4
 80030a6:	1dfa      	adds	r2, r7, #7
 80030a8:	7812      	ldrb	r2, [r2, #0]
 80030aa:	217f      	movs	r1, #127	; 0x7f
 80030ac:	438a      	bics	r2, r1
 80030ae:	701a      	strb	r2, [r3, #0]

  DigitData &= 0x7F;
 80030b0:	1dfb      	adds	r3, r7, #7
 80030b2:	1dfa      	adds	r2, r7, #7
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	217f      	movs	r1, #127	; 0x7f
 80030b8:	400a      	ands	r2, r1
 80030ba:	701a      	strb	r2, [r3, #0]

  if (DigitData >= 0 && DigitData <= 15)
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b0f      	cmp	r3, #15
 80030c2:	d809      	bhi.n	80030d8 <TM1638_SetSingleDigit_HEX+0x50>
  {
    DigitDataHEX = HexTo7Seg[DigitData] | DecimalPoint;
 80030c4:	1dfb      	adds	r3, r7, #7
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4a2d      	ldr	r2, [pc, #180]	; (8003180 <TM1638_SetSingleDigit_HEX+0xf8>)
 80030ca:	5cd1      	ldrb	r1, [r2, r3]
 80030cc:	183b      	adds	r3, r7, r0
 80030ce:	193a      	adds	r2, r7, r4
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e044      	b.n	8003162 <TM1638_SetSingleDigit_HEX+0xda>
  }
  else
  {
    switch (DigitData)
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	3b41      	subs	r3, #65	; 0x41
 80030de:	2b25      	cmp	r3, #37	; 0x25
 80030e0:	d83a      	bhi.n	8003158 <TM1638_SetSingleDigit_HEX+0xd0>
 80030e2:	009a      	lsls	r2, r3, #2
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <TM1638_SetSingleDigit_HEX+0xfc>)
 80030e6:	18d3      	adds	r3, r2, r3
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	469f      	mov	pc, r3
    {
    case 'A':
    case 'a':
      DigitDataHEX = HexTo7Seg[0x0A] | DecimalPoint;
 80030ec:	2177      	movs	r1, #119	; 0x77
 80030ee:	230f      	movs	r3, #15
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	220e      	movs	r2, #14
 80030f4:	18ba      	adds	r2, r7, r2
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	701a      	strb	r2, [r3, #0]
      break;
 80030fc:	e031      	b.n	8003162 <TM1638_SetSingleDigit_HEX+0xda>

    case 'B':
    case 'b':
      DigitDataHEX = HexTo7Seg[0x0B] | DecimalPoint;
 80030fe:	217c      	movs	r1, #124	; 0x7c
 8003100:	230f      	movs	r3, #15
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	220e      	movs	r2, #14
 8003106:	18ba      	adds	r2, r7, r2
 8003108:	7812      	ldrb	r2, [r2, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	701a      	strb	r2, [r3, #0]
      break;
 800310e:	e028      	b.n	8003162 <TM1638_SetSingleDigit_HEX+0xda>

    case 'C':
    case 'c':
      DigitDataHEX = HexTo7Seg[0x0C] | DecimalPoint;
 8003110:	2139      	movs	r1, #57	; 0x39
 8003112:	230f      	movs	r3, #15
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	220e      	movs	r2, #14
 8003118:	18ba      	adds	r2, r7, r2
 800311a:	7812      	ldrb	r2, [r2, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	701a      	strb	r2, [r3, #0]
      break;
 8003120:	e01f      	b.n	8003162 <TM1638_SetSingleDigit_HEX+0xda>

    case 'D':
    case 'd':
      DigitDataHEX = HexTo7Seg[0x0D] | DecimalPoint;
 8003122:	215e      	movs	r1, #94	; 0x5e
 8003124:	230f      	movs	r3, #15
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	220e      	movs	r2, #14
 800312a:	18ba      	adds	r2, r7, r2
 800312c:	7812      	ldrb	r2, [r2, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	701a      	strb	r2, [r3, #0]
      break;
 8003132:	e016      	b.n	8003162 <TM1638_SetSingleDigit_HEX+0xda>

    case 'E':
    case 'e':
      DigitDataHEX = HexTo7Seg[0x0E] | DecimalPoint;
 8003134:	2179      	movs	r1, #121	; 0x79
 8003136:	230f      	movs	r3, #15
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	220e      	movs	r2, #14
 800313c:	18ba      	adds	r2, r7, r2
 800313e:	7812      	ldrb	r2, [r2, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	701a      	strb	r2, [r3, #0]
      break;
 8003144:	e00d      	b.n	8003162 <TM1638_SetSingleDigit_HEX+0xda>

    case 'F':
    case 'f':
      DigitDataHEX = HexTo7Seg[0x0F] | DecimalPoint;
 8003146:	2171      	movs	r1, #113	; 0x71
 8003148:	230f      	movs	r3, #15
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	220e      	movs	r2, #14
 800314e:	18ba      	adds	r2, r7, r2
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	701a      	strb	r2, [r3, #0]
      break;
 8003156:	e004      	b.n	8003162 <TM1638_SetSingleDigit_HEX+0xda>

    default:
      DigitDataHEX = 0;
 8003158:	230f      	movs	r3, #15
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
      break;
 8003160:	46c0      	nop			; (mov r8, r8)
    }
  }

  return TM1638_SetSingleDigit(DigitDataHEX, DigitPos);
 8003162:	1dbb      	adds	r3, r7, #6
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	230f      	movs	r3, #15
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	0011      	movs	r1, r2
 800316e:	0018      	movs	r0, r3
 8003170:	f7ff ff73 	bl	800305a <TM1638_SetSingleDigit>
 8003174:	0003      	movs	r3, r0
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b005      	add	sp, #20
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	08003468 	.word	0x08003468
 8003184:	08003478 	.word	0x08003478

08003188 <TM1638_Platform_Init>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  TM1638_CLK_OUTPUT();
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <TM1638_Platform_Init+0xa4>)
 800318e:	2280      	movs	r2, #128	; 0x80
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <TM1638_Platform_Init+0xa4>)
 8003194:	2201      	movs	r2, #1
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	4b24      	ldr	r3, [pc, #144]	; (800322c <TM1638_Platform_Init+0xa4>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031a6:	4a22      	ldr	r2, [pc, #136]	; (8003230 <TM1638_Platform_Init+0xa8>)
 80031a8:	0019      	movs	r1, r3
 80031aa:	0010      	movs	r0, r2
 80031ac:	f7fd ff1a 	bl	8000fe4 <HAL_GPIO_Init>
  TM1638_STB_OUTPUT();
 80031b0:	4b1e      	ldr	r3, [pc, #120]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	0052      	lsls	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	4b1c      	ldr	r3, [pc, #112]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031cc:	4a18      	ldr	r2, [pc, #96]	; (8003230 <TM1638_Platform_Init+0xa8>)
 80031ce:	0019      	movs	r1, r3
 80031d0:	0010      	movs	r0, r2
 80031d2:	f7fd ff07 	bl	8000fe4 <HAL_GPIO_Init>
  TM1638_DIO_OUTPUT();
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	0092      	lsls	r2, r2, #2
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <TM1638_Platform_Init+0xa4>)
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <TM1638_Platform_Init+0xa8>)
 80031f4:	0019      	movs	r1, r3
 80031f6:	0010      	movs	r0, r2
 80031f8:	f7fd fef4 	bl	8000fe4 <HAL_GPIO_Init>

  TM1638_CLK_HIGH();
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <TM1638_Platform_Init+0xa8>)
 80031fe:	2201      	movs	r2, #1
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	0018      	movs	r0, r3
 8003204:	f7fe f881 	bl	800130a <HAL_GPIO_WritePin>
  TM1638_STB_HIGH();
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4808      	ldr	r0, [pc, #32]	; (8003230 <TM1638_Platform_Init+0xa8>)
 800320e:	2201      	movs	r2, #1
 8003210:	0019      	movs	r1, r3
 8003212:	f7fe f87a 	bl	800130a <HAL_GPIO_WritePin>
  TM1638_DIO_HIGH();
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4805      	ldr	r0, [pc, #20]	; (8003230 <TM1638_Platform_Init+0xa8>)
 800321c:	2201      	movs	r2, #1
 800321e:	0019      	movs	r1, r3
 8003220:	f7fe f873 	bl	800130a <HAL_GPIO_WritePin>

  return TM1638_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000040 	.word	0x20000040
 8003230:	50000400 	.word	0x50000400

08003234 <TM1638_Platform_Stop>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_Stop(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  TM1638_STB_HIGH();
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4804      	ldr	r0, [pc, #16]	; (8003250 <TM1638_Platform_Stop+0x1c>)
 800323e:	2201      	movs	r2, #1
 8003240:	0019      	movs	r1, r3
 8003242:	f7fe f862 	bl	800130a <HAL_GPIO_WritePin>

  // TM1638_DelayUs(TM1638TM1638_DelayUs);

  return TM1638_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	50000400 	.word	0x50000400

08003254 <TM1638_Platform_Start>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_Start(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  TM1638_STB_LOW();
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4804      	ldr	r0, [pc, #16]	; (8003270 <TM1638_Platform_Start+0x1c>)
 800325e:	2200      	movs	r2, #0
 8003260:	0019      	movs	r1, r3
 8003262:	f7fe f852 	bl	800130a <HAL_GPIO_WritePin>

  return TM1638_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	50000400 	.word	0x50000400

08003274 <TM1638_Platform_WriteBytes>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_WriteBytes(const uint8_t *Data, uint8_t NumOfBytes)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	000a      	movs	r2, r1
 800327e:	1cfb      	adds	r3, r7, #3
 8003280:	701a      	strb	r2, [r3, #0]
  uint8_t i, j, Buff;

  TM1638_DIO_OUTPUT();
 8003282:	4b40      	ldr	r3, [pc, #256]	; (8003384 <TM1638_Platform_WriteBytes+0x110>)
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	0092      	lsls	r2, r2, #2
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	4b3e      	ldr	r3, [pc, #248]	; (8003384 <TM1638_Platform_WriteBytes+0x110>)
 800328c:	2201      	movs	r2, #1
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	4b3c      	ldr	r3, [pc, #240]	; (8003384 <TM1638_Platform_WriteBytes+0x110>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <TM1638_Platform_WriteBytes+0x110>)
 8003298:	2200      	movs	r2, #0
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <TM1638_Platform_WriteBytes+0x110>)
 800329e:	4a3a      	ldr	r2, [pc, #232]	; (8003388 <TM1638_Platform_WriteBytes+0x114>)
 80032a0:	0019      	movs	r1, r3
 80032a2:	0010      	movs	r0, r2
 80032a4:	f7fd fe9e 	bl	8000fe4 <HAL_GPIO_Init>

  for (j = 0; j < NumOfBytes; j++)
 80032a8:	2316      	movs	r3, #22
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	e05b      	b.n	800336a <TM1638_Platform_WriteBytes+0xf6>
  {
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 80032b2:	2317      	movs	r3, #23
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	2316      	movs	r3, #22
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	18d2      	adds	r2, r2, r3
 80032c4:	2315      	movs	r3, #21
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e042      	b.n	8003354 <TM1638_Platform_WriteBytes+0xe0>
    {
      TM1638_CLK_LOW();
 80032ce:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <TM1638_Platform_WriteBytes+0x114>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	2180      	movs	r1, #128	; 0x80
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7fe f818 	bl	800130a <HAL_GPIO_WritePin>
      TM1638_DelayUs(TM1638TM1638_DelayUs);
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	e002      	b.n	80032e6 <TM1638_Platform_WriteBytes+0x72>
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	3301      	adds	r3, #1
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	23fa      	movs	r3, #250	; 0xfa
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d3f7      	bcc.n	80032e0 <TM1638_Platform_WriteBytes+0x6c>

      if (Buff & 0x01)
 80032f0:	2315      	movs	r3, #21
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	4013      	ands	r3, r2
 80032fa:	d007      	beq.n	800330c <TM1638_Platform_WriteBytes+0x98>
        TM1638_DIO_HIGH();
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4821      	ldr	r0, [pc, #132]	; (8003388 <TM1638_Platform_WriteBytes+0x114>)
 8003302:	2201      	movs	r2, #1
 8003304:	0019      	movs	r1, r3
 8003306:	f7fe f800 	bl	800130a <HAL_GPIO_WritePin>
 800330a:	e006      	b.n	800331a <TM1638_Platform_WriteBytes+0xa6>
      else
        TM1638_DIO_LOW();
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	481d      	ldr	r0, [pc, #116]	; (8003388 <TM1638_Platform_WriteBytes+0x114>)
 8003312:	2200      	movs	r2, #0
 8003314:	0019      	movs	r1, r3
 8003316:	f7fd fff8 	bl	800130a <HAL_GPIO_WritePin>

      TM1638_CLK_HIGH();
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <TM1638_Platform_WriteBytes+0x114>)
 800331c:	2201      	movs	r2, #1
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	0018      	movs	r0, r3
 8003322:	f7fd fff2 	bl	800130a <HAL_GPIO_WritePin>
      TM1638_DelayUs(TM1638TM1638_DelayUs);
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e002      	b.n	8003332 <TM1638_Platform_WriteBytes+0xbe>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3301      	adds	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	23fa      	movs	r3, #250	; 0xfa
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d3f7      	bcc.n	800332c <TM1638_Platform_WriteBytes+0xb8>
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 800333c:	2217      	movs	r2, #23
 800333e:	18bb      	adds	r3, r7, r2
 8003340:	18ba      	adds	r2, r7, r2
 8003342:	7812      	ldrb	r2, [r2, #0]
 8003344:	3201      	adds	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	2215      	movs	r2, #21
 800334a:	18bb      	adds	r3, r7, r2
 800334c:	18ba      	adds	r2, r7, r2
 800334e:	7812      	ldrb	r2, [r2, #0]
 8003350:	0852      	lsrs	r2, r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
 8003354:	2317      	movs	r3, #23
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b07      	cmp	r3, #7
 800335c:	d9b7      	bls.n	80032ce <TM1638_Platform_WriteBytes+0x5a>
  for (j = 0; j < NumOfBytes; j++)
 800335e:	2116      	movs	r1, #22
 8003360:	187b      	adds	r3, r7, r1
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	187b      	adds	r3, r7, r1
 8003366:	3201      	adds	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	2316      	movs	r3, #22
 800336c:	18fa      	adds	r2, r7, r3
 800336e:	1cfb      	adds	r3, r7, #3
 8003370:	7812      	ldrb	r2, [r2, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d39c      	bcc.n	80032b2 <TM1638_Platform_WriteBytes+0x3e>
    }
  }

  return TM1638_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b006      	add	sp, #24
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	20000040 	.word	0x20000040
 8003388:	50000400 	.word	0x50000400

0800338c <__libc_init_array>:
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	2600      	movs	r6, #0
 8003390:	4d0c      	ldr	r5, [pc, #48]	; (80033c4 <__libc_init_array+0x38>)
 8003392:	4c0d      	ldr	r4, [pc, #52]	; (80033c8 <__libc_init_array+0x3c>)
 8003394:	1b64      	subs	r4, r4, r5
 8003396:	10a4      	asrs	r4, r4, #2
 8003398:	42a6      	cmp	r6, r4
 800339a:	d109      	bne.n	80033b0 <__libc_init_array+0x24>
 800339c:	2600      	movs	r6, #0
 800339e:	f000 f821 	bl	80033e4 <_init>
 80033a2:	4d0a      	ldr	r5, [pc, #40]	; (80033cc <__libc_init_array+0x40>)
 80033a4:	4c0a      	ldr	r4, [pc, #40]	; (80033d0 <__libc_init_array+0x44>)
 80033a6:	1b64      	subs	r4, r4, r5
 80033a8:	10a4      	asrs	r4, r4, #2
 80033aa:	42a6      	cmp	r6, r4
 80033ac:	d105      	bne.n	80033ba <__libc_init_array+0x2e>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	00b3      	lsls	r3, r6, #2
 80033b2:	58eb      	ldr	r3, [r5, r3]
 80033b4:	4798      	blx	r3
 80033b6:	3601      	adds	r6, #1
 80033b8:	e7ee      	b.n	8003398 <__libc_init_array+0xc>
 80033ba:	00b3      	lsls	r3, r6, #2
 80033bc:	58eb      	ldr	r3, [r5, r3]
 80033be:	4798      	blx	r3
 80033c0:	3601      	adds	r6, #1
 80033c2:	e7f2      	b.n	80033aa <__libc_init_array+0x1e>
 80033c4:	08003518 	.word	0x08003518
 80033c8:	08003518 	.word	0x08003518
 80033cc:	08003518 	.word	0x08003518
 80033d0:	0800351c 	.word	0x0800351c

080033d4 <memset>:
 80033d4:	0003      	movs	r3, r0
 80033d6:	1882      	adds	r2, r0, r2
 80033d8:	4293      	cmp	r3, r2
 80033da:	d100      	bne.n	80033de <memset+0xa>
 80033dc:	4770      	bx	lr
 80033de:	7019      	strb	r1, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	e7f9      	b.n	80033d8 <memset+0x4>

080033e4 <_init>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr

080033f0 <_fini>:
 80033f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f6:	bc08      	pop	{r3}
 80033f8:	469e      	mov	lr, r3
 80033fa:	4770      	bx	lr
