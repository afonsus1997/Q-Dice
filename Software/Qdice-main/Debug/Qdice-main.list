
Qdice-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004278  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b4  080044b4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044bc  080044bc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044bc  080044bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044c0  080044c0  000144c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080044c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000078  0800453c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  0800453c  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a142  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6a  00000000  00000000  0002a1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0002bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001517b  00000000  00000000  0002cf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f16  00000000  00000000  00042113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079446  00000000  00000000  0004c029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c546f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002540  00000000  00000000  000c54c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004320 	.word	0x08004320

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004320 	.word	0x08004320

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f82e 	bl	8000498 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	000f      	movs	r7, r1
 8000450:	0001      	movs	r1, r0
 8000452:	002e      	movs	r6, r5
 8000454:	46c6      	mov	lr, r8
 8000456:	4684      	mov	ip, r0
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	0c14      	lsrs	r4, r2, #16
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	4346      	muls	r6, r0
 8000462:	434d      	muls	r5, r1
 8000464:	4360      	muls	r0, r4
 8000466:	4361      	muls	r1, r4
 8000468:	1940      	adds	r0, r0, r5
 800046a:	0c34      	lsrs	r4, r6, #16
 800046c:	1824      	adds	r4, r4, r0
 800046e:	b500      	push	{lr}
 8000470:	42a5      	cmp	r5, r4
 8000472:	d903      	bls.n	800047c <__aeabi_lmul+0x34>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	0240      	lsls	r0, r0, #9
 8000478:	4680      	mov	r8, r0
 800047a:	4441      	add	r1, r8
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	186d      	adds	r5, r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4359      	muls	r1, r3
 8000484:	437a      	muls	r2, r7
 8000486:	0430      	lsls	r0, r6, #16
 8000488:	1949      	adds	r1, r1, r5
 800048a:	0424      	lsls	r4, r4, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	1820      	adds	r0, r4, r0
 8000490:	1889      	adds	r1, r1, r2
 8000492:	bc80      	pop	{r7}
 8000494:	46b8      	mov	r8, r7
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__udivmoddi4>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	0004      	movs	r4, r0
 80004a6:	000d      	movs	r5, r1
 80004a8:	4692      	mov	sl, r2
 80004aa:	4699      	mov	r9, r3
 80004ac:	b083      	sub	sp, #12
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d830      	bhi.n	8000514 <__udivmoddi4+0x7c>
 80004b2:	d02d      	beq.n	8000510 <__udivmoddi4+0x78>
 80004b4:	4649      	mov	r1, r9
 80004b6:	4650      	mov	r0, sl
 80004b8:	f000 f8ba 	bl	8000630 <__clzdi2>
 80004bc:	0029      	movs	r1, r5
 80004be:	0006      	movs	r6, r0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f000 f8b5 	bl	8000630 <__clzdi2>
 80004c6:	1a33      	subs	r3, r6, r0
 80004c8:	4698      	mov	r8, r3
 80004ca:	3b20      	subs	r3, #32
 80004cc:	469b      	mov	fp, r3
 80004ce:	d433      	bmi.n	8000538 <__udivmoddi4+0xa0>
 80004d0:	465a      	mov	r2, fp
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	001f      	movs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001e      	movs	r6, r3
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d83a      	bhi.n	800055a <__udivmoddi4+0xc2>
 80004e4:	42af      	cmp	r7, r5
 80004e6:	d100      	bne.n	80004ea <__udivmoddi4+0x52>
 80004e8:	e078      	b.n	80005dc <__udivmoddi4+0x144>
 80004ea:	465b      	mov	r3, fp
 80004ec:	1ba4      	subs	r4, r4, r6
 80004ee:	41bd      	sbcs	r5, r7
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da00      	bge.n	80004f6 <__udivmoddi4+0x5e>
 80004f4:	e075      	b.n	80005e2 <__udivmoddi4+0x14a>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	465a      	mov	r2, fp
 8000502:	4093      	lsls	r3, r2
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	4642      	mov	r2, r8
 800050a:	4093      	lsls	r3, r2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	e028      	b.n	8000562 <__udivmoddi4+0xca>
 8000510:	4282      	cmp	r2, r0
 8000512:	d9cf      	bls.n	80004b4 <__udivmoddi4+0x1c>
 8000514:	2200      	movs	r2, #0
 8000516:	2300      	movs	r3, #0
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <__udivmoddi4+0x8e>
 8000522:	601c      	str	r4, [r3, #0]
 8000524:	605d      	str	r5, [r3, #4]
 8000526:	9800      	ldr	r0, [sp, #0]
 8000528:	9901      	ldr	r1, [sp, #4]
 800052a:	b003      	add	sp, #12
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	4642      	mov	r2, r8
 800053a:	2320      	movs	r3, #32
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	4652      	mov	r2, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	4641      	mov	r1, r8
 8000544:	0013      	movs	r3, r2
 8000546:	464a      	mov	r2, r9
 8000548:	408a      	lsls	r2, r1
 800054a:	0017      	movs	r7, r2
 800054c:	4642      	mov	r2, r8
 800054e:	431f      	orrs	r7, r3
 8000550:	4653      	mov	r3, sl
 8000552:	4093      	lsls	r3, r2
 8000554:	001e      	movs	r6, r3
 8000556:	42af      	cmp	r7, r5
 8000558:	d9c4      	bls.n	80004e4 <__udivmoddi4+0x4c>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0d9      	beq.n	800051c <__udivmoddi4+0x84>
 8000568:	07fb      	lsls	r3, r7, #31
 800056a:	0872      	lsrs	r2, r6, #1
 800056c:	431a      	orrs	r2, r3
 800056e:	4646      	mov	r6, r8
 8000570:	087b      	lsrs	r3, r7, #1
 8000572:	e00e      	b.n	8000592 <__udivmoddi4+0xfa>
 8000574:	42ab      	cmp	r3, r5
 8000576:	d101      	bne.n	800057c <__udivmoddi4+0xe4>
 8000578:	42a2      	cmp	r2, r4
 800057a:	d80c      	bhi.n	8000596 <__udivmoddi4+0xfe>
 800057c:	1aa4      	subs	r4, r4, r2
 800057e:	419d      	sbcs	r5, r3
 8000580:	2001      	movs	r0, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2100      	movs	r1, #0
 8000588:	3e01      	subs	r6, #1
 800058a:	1824      	adds	r4, r4, r0
 800058c:	414d      	adcs	r5, r1
 800058e:	2e00      	cmp	r6, #0
 8000590:	d006      	beq.n	80005a0 <__udivmoddi4+0x108>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d9ee      	bls.n	8000574 <__udivmoddi4+0xdc>
 8000596:	3e01      	subs	r6, #1
 8000598:	1924      	adds	r4, r4, r4
 800059a:	416d      	adcs	r5, r5
 800059c:	2e00      	cmp	r6, #0
 800059e:	d1f8      	bne.n	8000592 <__udivmoddi4+0xfa>
 80005a0:	9800      	ldr	r0, [sp, #0]
 80005a2:	9901      	ldr	r1, [sp, #4]
 80005a4:	465b      	mov	r3, fp
 80005a6:	1900      	adds	r0, r0, r4
 80005a8:	4169      	adcs	r1, r5
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db24      	blt.n	80005f8 <__udivmoddi4+0x160>
 80005ae:	002b      	movs	r3, r5
 80005b0:	465a      	mov	r2, fp
 80005b2:	4644      	mov	r4, r8
 80005b4:	40d3      	lsrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db2a      	blt.n	800061a <__udivmoddi4+0x182>
 80005c4:	0026      	movs	r6, r4
 80005c6:	409e      	lsls	r6, r3
 80005c8:	0033      	movs	r3, r6
 80005ca:	0026      	movs	r6, r4
 80005cc:	4647      	mov	r7, r8
 80005ce:	40be      	lsls	r6, r7
 80005d0:	0032      	movs	r2, r6
 80005d2:	1a80      	subs	r0, r0, r2
 80005d4:	4199      	sbcs	r1, r3
 80005d6:	9000      	str	r0, [sp, #0]
 80005d8:	9101      	str	r1, [sp, #4]
 80005da:	e79f      	b.n	800051c <__udivmoddi4+0x84>
 80005dc:	42a3      	cmp	r3, r4
 80005de:	d8bc      	bhi.n	800055a <__udivmoddi4+0xc2>
 80005e0:	e783      	b.n	80004ea <__udivmoddi4+0x52>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	9100      	str	r1, [sp, #0]
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	40da      	lsrs	r2, r3
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	e786      	b.n	8000506 <__udivmoddi4+0x6e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	4646      	mov	r6, r8
 8000602:	409a      	lsls	r2, r3
 8000604:	0023      	movs	r3, r4
 8000606:	40f3      	lsrs	r3, r6
 8000608:	4644      	mov	r4, r8
 800060a:	4313      	orrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	40e2      	lsrs	r2, r4
 8000610:	001c      	movs	r4, r3
 8000612:	465b      	mov	r3, fp
 8000614:	0015      	movs	r5, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dad4      	bge.n	80005c4 <__udivmoddi4+0x12c>
 800061a:	4642      	mov	r2, r8
 800061c:	002f      	movs	r7, r5
 800061e:	2320      	movs	r3, #32
 8000620:	0026      	movs	r6, r4
 8000622:	4097      	lsls	r7, r2
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	40de      	lsrs	r6, r3
 8000628:	003b      	movs	r3, r7
 800062a:	4333      	orrs	r3, r6
 800062c:	e7cd      	b.n	80005ca <__udivmoddi4+0x132>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__clzdi2>:
 8000630:	b510      	push	{r4, lr}
 8000632:	2900      	cmp	r1, #0
 8000634:	d103      	bne.n	800063e <__clzdi2+0xe>
 8000636:	f000 f807 	bl	8000648 <__clzsi2>
 800063a:	3020      	adds	r0, #32
 800063c:	e002      	b.n	8000644 <__clzdi2+0x14>
 800063e:	1c08      	adds	r0, r1, #0
 8000640:	f000 f802 	bl	8000648 <__clzsi2>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	46c0      	nop			; (mov r8, r8)

08000648 <__clzsi2>:
 8000648:	211c      	movs	r1, #28
 800064a:	2301      	movs	r3, #1
 800064c:	041b      	lsls	r3, r3, #16
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0xe>
 8000652:	0c00      	lsrs	r0, r0, #16
 8000654:	3910      	subs	r1, #16
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	4298      	cmp	r0, r3
 800065a:	d301      	bcc.n	8000660 <__clzsi2+0x18>
 800065c:	0a00      	lsrs	r0, r0, #8
 800065e:	3908      	subs	r1, #8
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	4298      	cmp	r0, r3
 8000664:	d301      	bcc.n	800066a <__clzsi2+0x22>
 8000666:	0900      	lsrs	r0, r0, #4
 8000668:	3904      	subs	r1, #4
 800066a:	a202      	add	r2, pc, #8	; (adr r2, 8000674 <__clzsi2+0x2c>)
 800066c:	5c10      	ldrb	r0, [r2, r0]
 800066e:	1840      	adds	r0, r0, r1
 8000670:	4770      	bx	lr
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	02020304 	.word	0x02020304
 8000678:	01010101 	.word	0x01010101
	...

08000684 <readSW>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void readSW(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	currentSwStates[Roll] = HAL_GPIO_ReadPin(SW_ROLL_GPIO_Port, SW_ROLL_Pin);
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	015b      	lsls	r3, r3, #5
 800068c:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <readSW+0x64>)
 800068e:	0019      	movs	r1, r3
 8000690:	0010      	movs	r0, r2
 8000692:	f000 ff45 	bl	8001520 <HAL_GPIO_ReadPin>
 8000696:	0003      	movs	r3, r0
 8000698:	001a      	movs	r2, r3
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <readSW+0x68>)
 800069c:	701a      	strb	r2, [r3, #0]
	currentSwStates[Dice] = HAL_GPIO_ReadPin(SW_DICE_GPIO_Port, SW_DICE_Pin);
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <readSW+0x64>)
 80006a4:	0019      	movs	r1, r3
 80006a6:	0010      	movs	r0, r2
 80006a8:	f000 ff3a 	bl	8001520 <HAL_GPIO_ReadPin>
 80006ac:	0003      	movs	r3, r0
 80006ae:	001a      	movs	r2, r3
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <readSW+0x68>)
 80006b2:	705a      	strb	r2, [r3, #1]
	currentSwStates[Speed] = HAL_GPIO_ReadPin(SW_SPEED_GPIO_Port, SW_SPEED_Pin);
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	01db      	lsls	r3, r3, #7
 80006b8:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <readSW+0x64>)
 80006ba:	0019      	movs	r1, r3
 80006bc:	0010      	movs	r0, r2
 80006be:	f000 ff2f 	bl	8001520 <HAL_GPIO_ReadPin>
 80006c2:	0003      	movs	r3, r0
 80006c4:	001a      	movs	r2, r3
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <readSW+0x68>)
 80006c8:	709a      	strb	r2, [r3, #2]
	currentSwStates[Mode] = HAL_GPIO_ReadPin(SW_MODE_GPIO_Port, SW_MODE_Pin);
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	019b      	lsls	r3, r3, #6
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <readSW+0x64>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f000 ff24 	bl	8001520 <HAL_GPIO_ReadPin>
 80006d8:	0003      	movs	r3, r0
 80006da:	001a      	movs	r2, r3
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <readSW+0x68>)
 80006de:	70da      	strb	r2, [r3, #3]

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	50000400 	.word	0x50000400
 80006ec:	200000a0 	.word	0x200000a0

080006f0 <debounceCheck>:

uint8_t debounceCheck(uint8_t readState, uint8_t diceCode){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	0002      	movs	r2, r0
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	1dbb      	adds	r3, r7, #6
 80006fe:	1c0a      	adds	r2, r1, #0
 8000700:	701a      	strb	r2, [r3, #0]
	if(lastSwStates[diceCode] == readState)
 8000702:	1dbb      	adds	r3, r7, #6
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <debounceCheck+0x3c>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	1dfa      	adds	r2, r7, #7
 800070c:	7812      	ldrb	r2, [r2, #0]
 800070e:	429a      	cmp	r2, r3
 8000710:	d101      	bne.n	8000716 <debounceCheck+0x26>
		return 0;
 8000712:	2300      	movs	r3, #0
 8000714:	e006      	b.n	8000724 <debounceCheck+0x34>
	else{
		lastSwStates[diceCode] = readState;
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <debounceCheck+0x3c>)
 800071c:	1df9      	adds	r1, r7, #7
 800071e:	7809      	ldrb	r1, [r1, #0]
 8000720:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000722:	2301      	movs	r3, #1
	}
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000009c 	.word	0x2000009c

08000730 <HAL_GPIO_EXTI_Callback>:
        x = x/10;
    }
    return sum;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	0002      	movs	r2, r0
 8000738:	1dbb      	adds	r3, r7, #6
 800073a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == INT_PULSE_Pin){
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	881a      	ldrh	r2, [r3, #0]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	429a      	cmp	r2, r3
 8000746:	d13c      	bne.n	80007c2 <HAL_GPIO_EXTI_Callback+0x92>
#ifdef DEBUG_2
		printf("1,\r\n", rollNumber);
#endif
		currentDetectTick = HAL_GetTick();
 8000748:	f000 fc8c 	bl	8001064 <HAL_GetTick>
 800074c:	0002      	movs	r2, r0
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000750:	601a      	str	r2, [r3, #0]
#ifndef DEBUG_3
		if(rolling){
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d033      	beq.n	80007c2 <HAL_GPIO_EXTI_Callback+0x92>
#endif
			rolling = false;
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
//			if(currentDetectTick == lastDetectTick)
//				return;
			lastDetectTick = currentDetectTick;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000766:	601a      	str	r2, [r3, #0]
			currentDetectTick = (HAL_GetTick() * currentDetectTick) % 100;
 8000768:	f000 fc7c 	bl	8001064 <HAL_GetTick>
 800076c:	0002      	movs	r2, r0
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4353      	muls	r3, r2
 8000774:	2164      	movs	r1, #100	; 0x64
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff fd56 	bl	8000228 <__aeabi_uidivmod>
 800077c:	000b      	movs	r3, r1
 800077e:	001a      	movs	r2, r3
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000782:	601a      	str	r2, [r3, #0]
//			currentDetectTick =  * lastDetectTick;
//			lastDetectTick = currentDetectTick;
//			currentDetectTick = (currentDetectTick * lastDetectTick) % 100;
			rollNumber = (currentDetectTick % dices[currentDice]) + 1;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	0019      	movs	r1, r3
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <HAL_GPIO_EXTI_Callback+0xac>)
 8000790:	5c5b      	ldrb	r3, [r3, r1]
 8000792:	0019      	movs	r1, r3
 8000794:	0010      	movs	r0, r2
 8000796:	f7ff fd47 	bl	8000228 <__aeabi_uidivmod>
 800079a:	000b      	movs	r3, r1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	3301      	adds	r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_GPIO_EXTI_Callback+0xb0>)
 80007a4:	701a      	strb	r2, [r3, #0]

//			rollNumber = (r % dices[currentDice]) + 1;
			sprintf(dispHigh, "%03d", rollNumber);
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_GPIO_EXTI_Callback+0xb0>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	001a      	movs	r2, r3
 80007ac:	490d      	ldr	r1, [pc, #52]	; (80007e4 <HAL_GPIO_EXTI_Callback+0xb4>)
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <HAL_GPIO_EXTI_Callback+0xb8>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fee1 	bl	8003578 <siprintf>
			setDisplayToString(dispHigh, 0, 3, FONT_DEFAULT);
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_GPIO_EXTI_Callback+0xbc>)
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HAL_GPIO_EXTI_Callback+0xb8>)
 80007ba:	2203      	movs	r2, #3
 80007bc:	2100      	movs	r1, #0
 80007be:	f002 fce3 	bl	8003188 <setDisplayToString>
//			HAL_GPIO_WritePin(SW_HV_GPIO_Port, SW_HV_Pin, RESET);
#ifndef DEBUG_3
		}
#endif
	}
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	20000164 	.word	0x20000164
 80007d0:	20000095 	.word	0x20000095
 80007d4:	200000b0 	.word	0x200000b0
 80007d8:	20000094 	.word	0x20000094
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000096 	.word	0x20000096
 80007e4:	08004338 	.word	0x08004338
 80007e8:	200000b8 	.word	0x200000b8
 80007ec:	08004350 	.word	0x08004350

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f000 fbd0 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f8c6 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f000 f966 	bl	8000acc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000800:	f000 f934 	bl	8000a6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8000804:	4b51      	ldr	r3, [pc, #324]	; (800094c <main+0x15c>)
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fa54 	bl	8000cb4 <RetargetInit>
  TM1638_DeInit();
 800080c:	f002 fc72 	bl	80030f4 <TM1638_DeInit>
//  setDisplayToString("d20", 0, 0, FONT_DEFAULT);
//  setDisplayToString("12", 0, 3, FONT_DEFAULT);
  sprintf(dispLow, "d%d", 12);
 8000810:	494f      	ldr	r1, [pc, #316]	; (8000950 <main+0x160>)
 8000812:	4b50      	ldr	r3, [pc, #320]	; (8000954 <main+0x164>)
 8000814:	220c      	movs	r2, #12
 8000816:	0018      	movs	r0, r3
 8000818:	f002 feae 	bl	8003578 <siprintf>
  setDisplayToString(dispLow, 0, 0, FONT_DEFAULT);
 800081c:	4b4e      	ldr	r3, [pc, #312]	; (8000958 <main+0x168>)
 800081e:	484d      	ldr	r0, [pc, #308]	; (8000954 <main+0x164>)
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	f002 fcb0 	bl	8003188 <setDisplayToString>
//  TM1638_SetSingleDigit(2, 2);
//  TM1638_SetSingleDigit(3, 3);
//  TM1638_SetSingleDigit(4, 4);
//  TM1638_SetSingleDigit(5, 5);
//  TM1638_SetSingleDigit(6, 6);
  lastDetectTick = HAL_GetTick();
 8000828:	f000 fc1c 	bl	8001064 <HAL_GetTick>
 800082c:	0002      	movs	r2, r0
 800082e:	4b4b      	ldr	r3, [pc, #300]	; (800095c <main+0x16c>)
 8000830:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  printf("test\n");
	currentTick = HAL_GetTick();
 8000832:	f000 fc17 	bl	8001064 <HAL_GetTick>
 8000836:	0002      	movs	r2, r0
 8000838:	4b49      	ldr	r3, [pc, #292]	; (8000960 <main+0x170>)
 800083a:	601a      	str	r2, [r3, #0]


	if((currentTick-lastPress)>DEBOUNCE_TIME_MS){
 800083c:	4b48      	ldr	r3, [pc, #288]	; (8000960 <main+0x170>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b48      	ldr	r3, [pc, #288]	; (8000964 <main+0x174>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	2bc8      	cmp	r3, #200	; 0xc8
 8000848:	d9f3      	bls.n	8000832 <main+0x42>
		readSW();
 800084a:	f7ff ff1b 	bl	8000684 <readSW>
		if(debounceCheck(currentSwStates[Roll], Roll)){
 800084e:	4b46      	ldr	r3, [pc, #280]	; (8000968 <main+0x178>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2100      	movs	r1, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff ff4b 	bl	80006f0 <debounceCheck>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d01e      	beq.n	800089c <main+0xac>
			if(!currentSwStates[Roll]){
 800085e:	4b42      	ldr	r3, [pc, #264]	; (8000968 <main+0x178>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d11a      	bne.n	800089c <main+0xac>
			  	//ADD FUNCTIONAL CODE HERE
				if(rolling == false){
 8000866:	4b41      	ldr	r3, [pc, #260]	; (800096c <main+0x17c>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2201      	movs	r2, #1
 800086c:	4053      	eors	r3, r2
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d00e      	beq.n	8000892 <main+0xa2>
					sprintf(dispHigh, "---");
 8000874:	4a3e      	ldr	r2, [pc, #248]	; (8000970 <main+0x180>)
 8000876:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <main+0x184>)
 8000878:	0011      	movs	r1, r2
 800087a:	0018      	movs	r0, r3
 800087c:	f002 fe7c 	bl	8003578 <siprintf>
					setDisplayToString(dispHigh, 0, 3, FONT_DEFAULT);
 8000880:	4b35      	ldr	r3, [pc, #212]	; (8000958 <main+0x168>)
 8000882:	483c      	ldr	r0, [pc, #240]	; (8000974 <main+0x184>)
 8000884:	2203      	movs	r2, #3
 8000886:	2100      	movs	r1, #0
 8000888:	f002 fc7e 	bl	8003188 <setDisplayToString>
#ifdef DEBUG_1
					printf("Rolling...\r\n");
#endif
					rolling = true;
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <main+0x17c>)
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
				}
				lastPress = HAL_GetTick();
 8000892:	f000 fbe7 	bl	8001064 <HAL_GetTick>
 8000896:	0002      	movs	r2, r0
 8000898:	4b32      	ldr	r3, [pc, #200]	; (8000964 <main+0x174>)
 800089a:	601a      	str	r2, [r3, #0]
			  }
		}

		if(debounceCheck(currentSwStates[Dice], Dice)){
 800089c:	4b32      	ldr	r3, [pc, #200]	; (8000968 <main+0x178>)
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	2101      	movs	r1, #1
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff ff24 	bl	80006f0 <debounceCheck>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d024      	beq.n	80008f6 <main+0x106>
			if(!currentSwStates[Dice]){
 80008ac:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <main+0x178>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d120      	bne.n	80008f6 <main+0x106>
			  	//ADD FUNCTIONAL CODE HERE
				currentDice = (currentDice + 1) % NDICES;
 80008b4:	4b30      	ldr	r3, [pc, #192]	; (8000978 <main+0x188>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	2107      	movs	r1, #7
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fd9d 	bl	80003fc <__aeabi_idivmod>
 80008c2:	000b      	movs	r3, r1
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <main+0x188>)
 80008c8:	701a      	strb	r2, [r3, #0]
				sprintf(dispLow, "d%02d", dices[currentDice]);
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <main+0x188>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	001a      	movs	r2, r3
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <main+0x18c>)
 80008d2:	5c9b      	ldrb	r3, [r3, r2]
 80008d4:	001a      	movs	r2, r3
 80008d6:	492a      	ldr	r1, [pc, #168]	; (8000980 <main+0x190>)
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <main+0x164>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 fe4c 	bl	8003578 <siprintf>
				setDisplayToString(dispLow, 0, 0, FONT_DEFAULT);
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <main+0x168>)
 80008e2:	481c      	ldr	r0, [pc, #112]	; (8000954 <main+0x164>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	f002 fc4e 	bl	8003188 <setDisplayToString>
#if defined(DEBUG_1) || defined(DEBUG_3)
				printf("Current dice: D%d\r\n", dices[currentDice]);
#endif
				lastPress = HAL_GetTick();
 80008ec:	f000 fbba 	bl	8001064 <HAL_GetTick>
 80008f0:	0002      	movs	r2, r0
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <main+0x174>)
 80008f4:	601a      	str	r2, [r3, #0]
			}
		}

		if(debounceCheck(currentSwStates[Speed], Speed)){
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <main+0x178>)
 80008f8:	789b      	ldrb	r3, [r3, #2]
 80008fa:	2102      	movs	r1, #2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fef7 	bl	80006f0 <debounceCheck>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d008      	beq.n	8000918 <main+0x128>
			if(!currentSwStates[Speed]){
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <main+0x178>)
 8000908:	789b      	ldrb	r3, [r3, #2]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d104      	bne.n	8000918 <main+0x128>
				//ADD FUNCTIONAL CODE HERE
#ifdef DEBUG_1
				printf("uart test\r\n");
#endif
				lastPress = HAL_GetTick();
 800090e:	f000 fba9 	bl	8001064 <HAL_GetTick>
 8000912:	0002      	movs	r2, r0
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <main+0x174>)
 8000916:	601a      	str	r2, [r3, #0]
			  }
		}

		if(debounceCheck(currentSwStates[Mode], Mode)){
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <main+0x178>)
 800091a:	78db      	ldrb	r3, [r3, #3]
 800091c:	2103      	movs	r1, #3
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fee6 	bl	80006f0 <debounceCheck>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d084      	beq.n	8000832 <main+0x42>
			if(!currentSwStates[Mode]){
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <main+0x178>)
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d000      	beq.n	8000932 <main+0x142>
 8000930:	e77f      	b.n	8000832 <main+0x42>
	//			  currentDice = (currentDice + 1) % NDICES;
				HAL_GPIO_TogglePin(SW_HV_GPIO_Port, SW_HV_Pin);
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	019b      	lsls	r3, r3, #6
 8000936:	4a13      	ldr	r2, [pc, #76]	; (8000984 <main+0x194>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f000 fe2a 	bl	8001594 <HAL_GPIO_TogglePin>
				lastPress = HAL_GetTick();
 8000940:	f000 fb90 	bl	8001064 <HAL_GetTick>
 8000944:	0002      	movs	r2, r0
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <main+0x174>)
 8000948:	601a      	str	r2, [r3, #0]
	currentTick = HAL_GetTick();
 800094a:	e772      	b.n	8000832 <main+0x42>
 800094c:	200000e0 	.word	0x200000e0
 8000950:	08004340 	.word	0x08004340
 8000954:	200000b4 	.word	0x200000b4
 8000958:	08004350 	.word	0x08004350
 800095c:	200000b0 	.word	0x200000b0
 8000960:	20000168 	.word	0x20000168
 8000964:	20000098 	.word	0x20000098
 8000968:	200000a0 	.word	0x200000a0
 800096c:	20000095 	.word	0x20000095
 8000970:	08004344 	.word	0x08004344
 8000974:	200000b8 	.word	0x200000b8
 8000978:	20000094 	.word	0x20000094
 800097c:	20000000 	.word	0x20000000
 8000980:	08004348 	.word	0x08004348
 8000984:	50000800 	.word	0x50000800

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b09d      	sub	sp, #116	; 0x74
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	2438      	movs	r4, #56	; 0x38
 8000990:	193b      	adds	r3, r7, r4
 8000992:	0018      	movs	r0, r3
 8000994:	2338      	movs	r3, #56	; 0x38
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	f002 fd1d 	bl	80033d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099e:	2324      	movs	r3, #36	; 0x24
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	0018      	movs	r0, r3
 80009a4:	2314      	movs	r3, #20
 80009a6:	001a      	movs	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	f002 fd15 	bl	80033d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ae:	003b      	movs	r3, r7
 80009b0:	0018      	movs	r0, r3
 80009b2:	2324      	movs	r3, #36	; 0x24
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f002 fd0e 	bl	80033d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009bc:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <SystemClock_Config+0xdc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <SystemClock_Config+0xe0>)
 80009c2:	401a      	ands	r2, r3
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <SystemClock_Config+0xdc>)
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	0109      	lsls	r1, r1, #4
 80009ca:	430a      	orrs	r2, r1
 80009cc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ce:	0021      	movs	r1, r4
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2202      	movs	r2, #2
 80009d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2201      	movs	r2, #1
 80009da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2210      	movs	r2, #16
 80009e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2202      	movs	r2, #2
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	02d2      	lsls	r2, r2, #11
 80009f4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	03d2      	lsls	r2, r2, #15
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fdff 	bl	8001604 <HAL_RCC_OscConfig>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000a0a:	f000 f94d 	bl	8000ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	2124      	movs	r1, #36	; 0x24
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	220f      	movs	r2, #15
 8000a14:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2101      	movs	r1, #1
 8000a32:	0018      	movs	r0, r3
 8000a34:	f001 f9aa 	bl	8001d8c <HAL_RCC_ClockConfig>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a3c:	f000 f934 	bl	8000ca8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a40:	003b      	movs	r3, r7
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a46:	003b      	movs	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f001 fbc0 	bl	80021d4 <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a58:	f000 f926 	bl	8000ca8 <Error_Handler>
  }
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b01d      	add	sp, #116	; 0x74
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40007000 	.word	0x40007000
 8000a68:	ffffe7ff 	.word	0xffffe7ff

08000a6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <MX_USART1_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a78:	22e1      	movs	r2, #225	; 0xe1
 8000a7a:	0252      	lsls	r2, r2, #9
 8000a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <MX_USART1_UART_Init+0x58>)
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 fcf3 	bl	800249c <HAL_UART_Init>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 f8f5 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000e0 	.word	0x200000e0
 8000ac8:	40013800 	.word	0x40013800

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08b      	sub	sp, #44	; 0x2c
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	2414      	movs	r4, #20
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	2314      	movs	r3, #20
 8000ada:	001a      	movs	r2, r3
 8000adc:	2100      	movs	r1, #0
 8000ade:	f002 fc7b 	bl	80033d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b6a      	ldr	r3, [pc, #424]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ae6:	4b69      	ldr	r3, [pc, #420]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000ae8:	2104      	movs	r1, #4
 8000aea:	430a      	orrs	r2, r1
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aee:	4b67      	ldr	r3, [pc, #412]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af2:	2204      	movs	r2, #4
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b64      	ldr	r3, [pc, #400]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000afe:	4b63      	ldr	r3, [pc, #396]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	430a      	orrs	r2, r1
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b06:	4b61      	ldr	r3, [pc, #388]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b5e      	ldr	r3, [pc, #376]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b16:	4b5d      	ldr	r3, [pc, #372]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b1e:	4b5b      	ldr	r3, [pc, #364]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b22:	2201      	movs	r2, #1
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b58      	ldr	r3, [pc, #352]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b2e:	4b57      	ldr	r3, [pc, #348]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000b30:	2102      	movs	r1, #2
 8000b32:	430a      	orrs	r2, r1
 8000b34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b36:	4b55      	ldr	r3, [pc, #340]	; (8000c8c <MX_GPIO_Init+0x1c0>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_HV_GPIO_Port, SW_HV_Pin, GPIO_PIN_RESET);
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	4852      	ldr	r0, [pc, #328]	; (8000c90 <MX_GPIO_Init+0x1c4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	f000 fd05 	bl	800155a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW_CLK_Pin|DISP_CS_Pin|DISP_DATA_Pin, GPIO_PIN_RESET);
 8000b50:	23e0      	movs	r3, #224	; 0xe0
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	484f      	ldr	r0, [pc, #316]	; (8000c94 <MX_GPIO_Init+0x1c8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	f000 fcfe 	bl	800155a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_HV_Pin */
  GPIO_InitStruct.Pin = SW_HV_Pin;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	0192      	lsls	r2, r2, #6
 8000b64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2201      	movs	r2, #1
 8000b6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_HV_GPIO_Port, &GPIO_InitStruct);
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	4a45      	ldr	r2, [pc, #276]	; (8000c90 <MX_GPIO_Init+0x1c4>)
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	0010      	movs	r0, r2
 8000b80:	f000 fb58 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b84:	0021      	movs	r1, r4
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	22c0      	movs	r2, #192	; 0xc0
 8000b8a:	0212      	lsls	r2, r2, #8
 8000b8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8e:	000c      	movs	r4, r1
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2203      	movs	r2, #3
 8000b94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	4a3c      	ldr	r2, [pc, #240]	; (8000c90 <MX_GPIO_Init+0x1c4>)
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0010      	movs	r0, r2
 8000ba4:	f000 fb46 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2203      	movs	r2, #3
 8000bac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	4a36      	ldr	r2, [pc, #216]	; (8000c98 <MX_GPIO_Init+0x1cc>)
 8000bbe:	0019      	movs	r1, r3
 8000bc0:	0010      	movs	r0, r2
 8000bc2:	f000 fb37 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	4a34      	ldr	r2, [pc, #208]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000bca:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	2203      	movs	r2, #3
 8000bd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	193a      	adds	r2, r7, r4
 8000bda:	23a0      	movs	r3, #160	; 0xa0
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 fb27 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	4a2d      	ldr	r2, [pc, #180]	; (8000ca0 <MX_GPIO_Init+0x1d4>)
 8000bea:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2203      	movs	r2, #3
 8000bf0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <MX_GPIO_Init+0x1c8>)
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	0010      	movs	r0, r2
 8000c00:	f000 fb18 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_ROLL_Pin SW_MODE_Pin SW_SPEED_Pin SW_DICE_Pin */
  GPIO_InitStruct.Pin = SW_ROLL_Pin|SW_MODE_Pin|SW_SPEED_Pin|SW_DICE_Pin;
 8000c04:	0021      	movs	r1, r4
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	22f0      	movs	r2, #240	; 0xf0
 8000c0a:	0212      	lsls	r2, r2, #8
 8000c0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	000c      	movs	r4, r1
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	4a1d      	ldr	r2, [pc, #116]	; (8000c94 <MX_GPIO_Init+0x1c8>)
 8000c20:	0019      	movs	r1, r3
 8000c22:	0010      	movs	r0, r2
 8000c24:	f000 fb06 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_PULSE_Pin */
  GPIO_InitStruct.Pin = INT_PULSE_Pin;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0052      	lsls	r2, r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <MX_GPIO_Init+0x1d8>)
 8000c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_PULSE_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	193a      	adds	r2, r7, r4
 8000c3e:	23a0      	movs	r3, #160	; 0xa0
 8000c40:	05db      	lsls	r3, r3, #23
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 faf5 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_CLK_Pin DISP_CS_Pin DISP_DATA_Pin */
  GPIO_InitStruct.Pin = SW_CLK_Pin|DISP_CS_Pin|DISP_DATA_Pin;
 8000c4a:	0021      	movs	r1, r4
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	22e0      	movs	r2, #224	; 0xe0
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2201      	movs	r2, #1
 8000c58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <MX_GPIO_Init+0x1c8>)
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	f000 fae1 	bl	8001234 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2007      	movs	r0, #7
 8000c78:	f000 faaa 	bl	80011d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c7c:	2007      	movs	r0, #7
 8000c7e:	f000 fabc 	bl	80011fa <HAL_NVIC_EnableIRQ>

}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b00b      	add	sp, #44	; 0x2c
 8000c88:	bd90      	pop	{r4, r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	50000800 	.word	0x50000800
 8000c94:	50000400 	.word	0x50000400
 8000c98:	50001c00 	.word	0x50001c00
 8000c9c:	000098ff 	.word	0x000098ff
 8000ca0:	00000c7f 	.word	0x00000c7f
 8000ca4:	10210000 	.word	0x10210000

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <RetargetInit+0x28>)
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <RetargetInit+0x2c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6898      	ldr	r0, [r3, #8]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	2202      	movs	r2, #2
 8000ccc:	2100      	movs	r1, #0
 8000cce:	f002 fb8b 	bl	80033e8 <setvbuf>
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000190 	.word	0x20000190
 8000ce0:	20000014 	.word	0x20000014

08000ce4 <_write>:
//
//  errno = EBADF;
//  return 0;
//}

int _write(int fd, char* ptr, int len) {
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d002      	beq.n	8000cfc <_write+0x18>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d114      	bne.n	8000d26 <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <_write+0x58>)
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	2517      	movs	r5, #23
 8000d06:	197c      	adds	r4, r7, r5
 8000d08:	2301      	movs	r3, #1
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	f001 fc19 	bl	8002544 <HAL_UART_Transmit>
 8000d12:	0003      	movs	r3, r0
 8000d14:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8000d16:	197b      	adds	r3, r7, r5
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <_write+0x3e>
      return len;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	e008      	b.n	8000d34 <_write+0x50>
    else
      return EIO;
 8000d22:	2305      	movs	r3, #5
 8000d24:	e006      	b.n	8000d34 <_write+0x50>
  }
  errno = EBADF;
 8000d26:	f002 fb2d 	bl	8003384 <__errno>
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	2209      	movs	r2, #9
 8000d2e:	601a      	str	r2, [r3, #0]
  return -1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	425b      	negs	r3, r3
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b006      	add	sp, #24
 8000d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d3c:	20000190 	.word	0x20000190

08000d40 <_read>:
//
//  errno = EBADF;
//  return -1;
//}

int _read(int fd, char* ptr, int len) {
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d113      	bne.n	8000d7a <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <_read+0x50>)
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	2517      	movs	r5, #23
 8000d58:	197c      	adds	r4, r7, r5
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	425b      	negs	r3, r3
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	2201      	movs	r2, #1
 8000d62:	f001 fc97 	bl	8002694 <HAL_UART_Receive>
 8000d66:	0003      	movs	r3, r0
 8000d68:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8000d6a:	197b      	adds	r3, r7, r5
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <_read+0x36>
      return 1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e008      	b.n	8000d88 <_read+0x48>
    else
      return EIO;
 8000d76:	2305      	movs	r3, #5
 8000d78:	e006      	b.n	8000d88 <_read+0x48>
  }
  errno = EBADF;
 8000d7a:	f002 fb03 	bl	8003384 <__errno>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	2209      	movs	r2, #9
 8000d82:	601a      	str	r2, [r3, #0]
  return -1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	425b      	negs	r3, r3
}
 8000d88:	0018      	movs	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b006      	add	sp, #24
 8000d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d90:	20000190 	.word	0x20000190

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <HAL_MspInit+0x24>)
 8000d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_MspInit+0x24>)
 8000d9e:	2101      	movs	r1, #1
 8000da0:	430a      	orrs	r2, r1
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <HAL_MspInit+0x24>)
 8000da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_MspInit+0x24>)
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	0549      	lsls	r1, r1, #21
 8000dae:	430a      	orrs	r2, r1
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	240c      	movs	r4, #12
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	0018      	movs	r0, r3
 8000dca:	2314      	movs	r3, #20
 8000dcc:	001a      	movs	r2, r3
 8000dce:	2100      	movs	r1, #0
 8000dd0:	f002 fb02 	bl	80033d8 <memset>
  if(huart->Instance==USART1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <HAL_UART_MspInit+0x80>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12a      	bne.n	8000e34 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_UART_MspInit+0x84>)
 8000de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0x84>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	01c9      	lsls	r1, r1, #7
 8000de8:	430a      	orrs	r2, r1
 8000dea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_UART_MspInit+0x84>)
 8000dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_UART_MspInit+0x84>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	430a      	orrs	r2, r1
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_UART_MspInit+0x84>)
 8000dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4013      	ands	r3, r2
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	22c0      	movs	r2, #192	; 0xc0
 8000e08:	00d2      	lsls	r2, r2, #3
 8000e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	0021      	movs	r1, r4
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2202      	movs	r2, #2
 8000e12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2204      	movs	r2, #4
 8000e24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	187a      	adds	r2, r7, r1
 8000e28:	23a0      	movs	r3, #160	; 0xa0
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 fa00 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b009      	add	sp, #36	; 0x24
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	40013800 	.word	0x40013800
 8000e40:	40021000 	.word	0x40021000

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f8ea 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f000 fba6 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	425b      	negs	r3, r3
}
 8000e92:	0018      	movs	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	0192      	lsls	r2, r2, #6
 8000eaa:	605a      	str	r2, [r3, #4]
	return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	0018      	movs	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b004      	add	sp, #16
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	18d3      	adds	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f002 fa42 	bl	8003384 <__errno>
 8000f00:	0003      	movs	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	425b      	negs	r3, r3
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	18d2      	adds	r2, r2, r3
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <_sbrk+0x64>)
 8000f1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	0018      	movs	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b006      	add	sp, #24
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20002000 	.word	0x20002000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	200000a4 	.word	0x200000a4
 8000f34:	200001a8 	.word	0x200001a8

08000f38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490e      	ldr	r1, [pc, #56]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0b      	ldr	r4, [pc, #44]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f6e:	f7ff ffe3 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f002 fa0d 	bl	8003390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fc3b 	bl	80007f0 <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   r0, =_estack
 8000f7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f88:	080044c4 	.word	0x080044c4
  ldr r2, =_sbss
 8000f8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f90:	200001a8 	.word	0x200001a8

08000f94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_COMP_IRQHandler>
	...

08000f98 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_Init+0x3c>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Init+0x3c>)
 8000faa:	2140      	movs	r1, #64	; 0x40
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f811 	bl	8000fd8 <HAL_InitTick>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
 8000fc0:	e001      	b.n	8000fc6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc2:	f7ff fee7 	bl	8000d94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
}
 8000fca:	0018      	movs	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_InitTick+0x5c>)
 8000fe2:	681c      	ldr	r4, [r3, #0]
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_InitTick+0x60>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	0019      	movs	r1, r3
 8000fea:	23fa      	movs	r3, #250	; 0xfa
 8000fec:	0098      	lsls	r0, r3, #2
 8000fee:	f7ff f895 	bl	800011c <__udivsi3>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	f7ff f890 	bl	800011c <__udivsi3>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 f90b 	bl	800121a <HAL_SYSTICK_Config>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e00f      	b.n	800102c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b03      	cmp	r3, #3
 8001010:	d80b      	bhi.n	800102a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	2301      	movs	r3, #1
 8001016:	425b      	negs	r3, r3
 8001018:	2200      	movs	r2, #0
 800101a:	0018      	movs	r0, r3
 800101c:	f000 f8d8 	bl	80011d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_InitTick+0x64>)
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	b003      	add	sp, #12
 8001032:	bd90      	pop	{r4, r7, pc}
 8001034:	20000008 	.word	0x20000008
 8001038:	20000010 	.word	0x20000010
 800103c:	2000000c 	.word	0x2000000c

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x1c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	001a      	movs	r2, r3
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x20>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	18d2      	adds	r2, r2, r3
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_IncTick+0x20>)
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	20000010 	.word	0x20000010
 8001060:	20000194 	.word	0x20000194

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_GetTick+0x10>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	20000194 	.word	0x20000194

08001078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	0002      	movs	r2, r0
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b7f      	cmp	r3, #127	; 0x7f
 800108a:	d809      	bhi.n	80010a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	001a      	movs	r2, r3
 8001092:	231f      	movs	r3, #31
 8001094:	401a      	ands	r2, r3
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_EnableIRQ+0x30>)
 8001098:	2101      	movs	r1, #1
 800109a:	4091      	lsls	r1, r2
 800109c:	000a      	movs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
  }
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b7f      	cmp	r3, #127	; 0x7f
 80010c0:	d828      	bhi.n	8001114 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <__NVIC_SetPriority+0xd4>)
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	33c0      	adds	r3, #192	; 0xc0
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	589b      	ldr	r3, [r3, r2]
 80010d2:	1dfa      	adds	r2, r7, #7
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	0011      	movs	r1, r2
 80010d8:	2203      	movs	r2, #3
 80010da:	400a      	ands	r2, r1
 80010dc:	00d2      	lsls	r2, r2, #3
 80010de:	21ff      	movs	r1, #255	; 0xff
 80010e0:	4091      	lsls	r1, r2
 80010e2:	000a      	movs	r2, r1
 80010e4:	43d2      	mvns	r2, r2
 80010e6:	401a      	ands	r2, r3
 80010e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	22ff      	movs	r2, #255	; 0xff
 80010f0:	401a      	ands	r2, r3
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0018      	movs	r0, r3
 80010f8:	2303      	movs	r3, #3
 80010fa:	4003      	ands	r3, r0
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001100:	481f      	ldr	r0, [pc, #124]	; (8001180 <__NVIC_SetPriority+0xd4>)
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b25b      	sxtb	r3, r3
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	430a      	orrs	r2, r1
 800110c:	33c0      	adds	r3, #192	; 0xc0
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001112:	e031      	b.n	8001178 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <__NVIC_SetPriority+0xd8>)
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	0019      	movs	r1, r3
 800111c:	230f      	movs	r3, #15
 800111e:	400b      	ands	r3, r1
 8001120:	3b08      	subs	r3, #8
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3306      	adds	r3, #6
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	18d3      	adds	r3, r2, r3
 800112a:	3304      	adds	r3, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1dfa      	adds	r2, r7, #7
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	0011      	movs	r1, r2
 8001134:	2203      	movs	r2, #3
 8001136:	400a      	ands	r2, r1
 8001138:	00d2      	lsls	r2, r2, #3
 800113a:	21ff      	movs	r1, #255	; 0xff
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	43d2      	mvns	r2, r2
 8001142:	401a      	ands	r2, r3
 8001144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	019b      	lsls	r3, r3, #6
 800114a:	22ff      	movs	r2, #255	; 0xff
 800114c:	401a      	ands	r2, r3
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	0018      	movs	r0, r3
 8001154:	2303      	movs	r3, #3
 8001156:	4003      	ands	r3, r0
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <__NVIC_SetPriority+0xd8>)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	001c      	movs	r4, r3
 8001164:	230f      	movs	r3, #15
 8001166:	4023      	ands	r3, r4
 8001168:	3b08      	subs	r3, #8
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	430a      	orrs	r2, r1
 800116e:	3306      	adds	r3, #6
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	18c3      	adds	r3, r0, r3
 8001174:	3304      	adds	r3, #4
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b003      	add	sp, #12
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	1e5a      	subs	r2, r3, #1
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	045b      	lsls	r3, r3, #17
 8001198:	429a      	cmp	r2, r3
 800119a:	d301      	bcc.n	80011a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119c:	2301      	movs	r3, #1
 800119e:	e010      	b.n	80011c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <SysTick_Config+0x44>)
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	3a01      	subs	r2, #1
 80011a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a8:	2301      	movs	r3, #1
 80011aa:	425b      	negs	r3, r3
 80011ac:	2103      	movs	r1, #3
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff ff7c 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x44>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x44>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	210f      	movs	r1, #15
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	1c02      	adds	r2, r0, #0
 80011e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	0011      	movs	r1, r2
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	0002      	movs	r2, r0
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b25b      	sxtb	r3, r3
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff ff33 	bl	8001078 <__NVIC_EnableIRQ>
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff ffaf 	bl	8001188 <SysTick_Config>
 800122a:	0003      	movs	r3, r0
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800124a:	e14f      	b.n	80014ec <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4091      	lsls	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <HAL_GPIO_Init+0x30>
 8001262:	e140      	b.n	80014e6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d00b      	beq.n	8001284 <HAL_GPIO_Init+0x50>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d007      	beq.n	8001284 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001278:	2b11      	cmp	r3, #17
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d130      	bne.n	80012e6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	409a      	lsls	r2, r3
 8001292:	0013      	movs	r3, r2
 8001294:	43da      	mvns	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ba:	2201      	movs	r2, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
 80012c0:	0013      	movs	r3, r2
 80012c2:	43da      	mvns	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	2201      	movs	r2, #1
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	409a      	lsls	r2, r3
 80012f4:	0013      	movs	r3, r2
 80012f6:	43da      	mvns	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0xf2>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b12      	cmp	r3, #18
 8001324:	d123      	bne.n	800136e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2207      	movs	r2, #7
 8001338:	4013      	ands	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2107      	movs	r1, #7
 8001352:	400b      	ands	r3, r1
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	401a      	ands	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	055b      	lsls	r3, r3, #21
 80013aa:	4013      	ands	r3, r2
 80013ac:	d100      	bne.n	80013b0 <HAL_GPIO_Init+0x17c>
 80013ae:	e09a      	b.n	80014e6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b0:	4b54      	ldr	r3, [pc, #336]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80013b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80013bc:	4a52      	ldr	r2, [pc, #328]	; (8001508 <HAL_GPIO_Init+0x2d4>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	589b      	ldr	r3, [r3, r2]
 80013c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2203      	movs	r2, #3
 80013ce:	4013      	ands	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	409a      	lsls	r2, r3
 80013d6:	0013      	movs	r3, r2
 80013d8:	43da      	mvns	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	23a0      	movs	r3, #160	; 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x1ea>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a47      	ldr	r2, [pc, #284]	; (800150c <HAL_GPIO_Init+0x2d8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x1e6>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a46      	ldr	r2, [pc, #280]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x1e2>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a45      	ldr	r2, [pc, #276]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x1de>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a44      	ldr	r2, [pc, #272]	; (8001518 <HAL_GPIO_Init+0x2e4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x1da>
 800140a:	2305      	movs	r3, #5
 800140c:	e008      	b.n	8001420 <HAL_GPIO_Init+0x1ec>
 800140e:	2306      	movs	r3, #6
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x1ec>
 8001412:	2303      	movs	r3, #3
 8001414:	e004      	b.n	8001420 <HAL_GPIO_Init+0x1ec>
 8001416:	2302      	movs	r3, #2
 8001418:	e002      	b.n	8001420 <HAL_GPIO_Init+0x1ec>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x1ec>
 800141e:	2300      	movs	r3, #0
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	2103      	movs	r1, #3
 8001424:	400a      	ands	r2, r1
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4093      	lsls	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001430:	4935      	ldr	r1, [pc, #212]	; (8001508 <HAL_GPIO_Init+0x2d4>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <HAL_GPIO_Init+0x2e8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	025b      	lsls	r3, r3, #9
 8001456:	4013      	ands	r3, r2
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_GPIO_Init+0x2e8>)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001468:	4b2c      	ldr	r3, [pc, #176]	; (800151c <HAL_GPIO_Init+0x2e8>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43da      	mvns	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	4013      	ands	r3, r2
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_GPIO_Init+0x2e8>)
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_GPIO_Init+0x2e8>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	035b      	lsls	r3, r3, #13
 80014aa:	4013      	ands	r3, r2
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_GPIO_Init+0x2e8>)
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_GPIO_Init+0x2e8>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43da      	mvns	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	039b      	lsls	r3, r3, #14
 80014d4:	4013      	ands	r3, r2
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_GPIO_Init+0x2e8>)
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	40da      	lsrs	r2, r3
 80014f4:	1e13      	subs	r3, r2, #0
 80014f6:	d000      	beq.n	80014fa <HAL_GPIO_Init+0x2c6>
 80014f8:	e6a8      	b.n	800124c <HAL_GPIO_Init+0x18>
  }
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b006      	add	sp, #24
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	50000400 	.word	0x50000400
 8001510:	50000800 	.word	0x50000800
 8001514:	50000c00 	.word	0x50000c00
 8001518:	50001c00 	.word	0x50001c00
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	000a      	movs	r2, r1
 800152a:	1cbb      	adds	r3, r7, #2
 800152c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	1cba      	adds	r2, r7, #2
 8001534:	8812      	ldrh	r2, [r2, #0]
 8001536:	4013      	ands	r3, r2
 8001538:	d004      	beq.n	8001544 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800153a:	230f      	movs	r3, #15
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	e003      	b.n	800154c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001544:	230f      	movs	r3, #15
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800154c:	230f      	movs	r3, #15
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	0008      	movs	r0, r1
 8001564:	0011      	movs	r1, r2
 8001566:	1cbb      	adds	r3, r7, #2
 8001568:	1c02      	adds	r2, r0, #0
 800156a:	801a      	strh	r2, [r3, #0]
 800156c:	1c7b      	adds	r3, r7, #1
 800156e:	1c0a      	adds	r2, r1, #0
 8001570:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001572:	1c7b      	adds	r3, r7, #1
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	1cbb      	adds	r3, r7, #2
 800157c:	881a      	ldrh	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001582:	e003      	b.n	800158c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001584:	1cbb      	adds	r3, r7, #2
 8001586:	881a      	ldrh	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b002      	add	sp, #8
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	000a      	movs	r2, r1
 800159e:	1cbb      	adds	r3, r7, #2
 80015a0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015a8:	1cbb      	adds	r3, r7, #2
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	1cb9      	adds	r1, r7, #2
 80015b8:	8809      	ldrh	r1, [r1, #0]
 80015ba:	400b      	ands	r3, r1
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	619a      	str	r2, [r3, #24]
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	0002      	movs	r2, r0
 80015d4:	1dbb      	adds	r3, r7, #6
 80015d6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	1dba      	adds	r2, r7, #6
 80015de:	8812      	ldrh	r2, [r2, #0]
 80015e0:	4013      	ands	r3, r2
 80015e2:	d008      	beq.n	80015f6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015e6:	1dba      	adds	r2, r7, #6
 80015e8:	8812      	ldrh	r2, [r2, #0]
 80015ea:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015ec:	1dbb      	adds	r3, r7, #6
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff f89d 	bl	8000730 <HAL_GPIO_EXTI_Callback>
  }
}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	40010400 	.word	0x40010400

08001604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001604:	b5b0      	push	{r4, r5, r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d102      	bne.n	8001618 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	f000 fbaf 	bl	8001d76 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001618:	4bcf      	ldr	r3, [pc, #828]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	220c      	movs	r2, #12
 800161e:	4013      	ands	r3, r2
 8001620:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001622:	4bcd      	ldr	r3, [pc, #820]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	2380      	movs	r3, #128	; 0x80
 8001628:	025b      	lsls	r3, r3, #9
 800162a:	4013      	ands	r3, r2
 800162c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2201      	movs	r2, #1
 8001634:	4013      	ands	r3, r2
 8001636:	d100      	bne.n	800163a <HAL_RCC_OscConfig+0x36>
 8001638:	e07e      	b.n	8001738 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b08      	cmp	r3, #8
 800163e:	d007      	beq.n	8001650 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d112      	bne.n	800166c <HAL_RCC_OscConfig+0x68>
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	025b      	lsls	r3, r3, #9
 800164c:	429a      	cmp	r2, r3
 800164e:	d10d      	bne.n	800166c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4bc1      	ldr	r3, [pc, #772]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	4013      	ands	r3, r2
 800165a:	d100      	bne.n	800165e <HAL_RCC_OscConfig+0x5a>
 800165c:	e06b      	b.n	8001736 <HAL_RCC_OscConfig+0x132>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d167      	bne.n	8001736 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	f000 fb85 	bl	8001d76 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	429a      	cmp	r2, r3
 8001676:	d107      	bne.n	8001688 <HAL_RCC_OscConfig+0x84>
 8001678:	4bb7      	ldr	r3, [pc, #732]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4bb6      	ldr	r3, [pc, #728]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	0249      	lsls	r1, r1, #9
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e027      	b.n	80016d8 <HAL_RCC_OscConfig+0xd4>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	23a0      	movs	r3, #160	; 0xa0
 800168e:	02db      	lsls	r3, r3, #11
 8001690:	429a      	cmp	r2, r3
 8001692:	d10e      	bne.n	80016b2 <HAL_RCC_OscConfig+0xae>
 8001694:	4bb0      	ldr	r3, [pc, #704]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4baf      	ldr	r3, [pc, #700]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 800169a:	2180      	movs	r1, #128	; 0x80
 800169c:	02c9      	lsls	r1, r1, #11
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	4bad      	ldr	r3, [pc, #692]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4bac      	ldr	r3, [pc, #688]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	0249      	lsls	r1, r1, #9
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e012      	b.n	80016d8 <HAL_RCC_OscConfig+0xd4>
 80016b2:	4ba9      	ldr	r3, [pc, #676]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4ba8      	ldr	r3, [pc, #672]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80016b8:	49a8      	ldr	r1, [pc, #672]	; (800195c <HAL_RCC_OscConfig+0x358>)
 80016ba:	400a      	ands	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	4ba6      	ldr	r3, [pc, #664]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4ba2      	ldr	r3, [pc, #648]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4ba1      	ldr	r3, [pc, #644]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80016d2:	49a3      	ldr	r1, [pc, #652]	; (8001960 <HAL_RCC_OscConfig+0x35c>)
 80016d4:	400a      	ands	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d015      	beq.n	800170c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fcc0 	bl	8001064 <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016e8:	e009      	b.n	80016fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ea:	f7ff fcbb 	bl	8001064 <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b64      	cmp	r3, #100	; 0x64
 80016f6:	d902      	bls.n	80016fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	f000 fb3c 	bl	8001d76 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016fe:	4b96      	ldr	r3, [pc, #600]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	029b      	lsls	r3, r3, #10
 8001706:	4013      	ands	r3, r2
 8001708:	d0ef      	beq.n	80016ea <HAL_RCC_OscConfig+0xe6>
 800170a:	e015      	b.n	8001738 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fcaa 	bl	8001064 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001716:	f7ff fca5 	bl	8001064 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	; 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e326      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001728:	4b8b      	ldr	r3, [pc, #556]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	4013      	ands	r3, r2
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x112>
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001736:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d100      	bne.n	8001744 <HAL_RCC_OscConfig+0x140>
 8001742:	e08b      	b.n	800185c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	2b04      	cmp	r3, #4
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d13e      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1d0>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d13b      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800175c:	4b7e      	ldr	r3, [pc, #504]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2204      	movs	r2, #4
 8001762:	4013      	ands	r3, r2
 8001764:	d004      	beq.n	8001770 <HAL_RCC_OscConfig+0x16c>
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e302      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b79      	ldr	r3, [pc, #484]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a7b      	ldr	r2, [pc, #492]	; (8001964 <HAL_RCC_OscConfig+0x360>)
 8001776:	4013      	ands	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	021a      	lsls	r2, r3, #8
 8001780:	4b75      	ldr	r3, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001782:	430a      	orrs	r2, r1
 8001784:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001786:	4b74      	ldr	r3, [pc, #464]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2209      	movs	r2, #9
 800178c:	4393      	bics	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	4b71      	ldr	r3, [pc, #452]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001798:	f000 fc40 	bl	800201c <HAL_RCC_GetSysClockFreq>
 800179c:	0001      	movs	r1, r0
 800179e:	4b6e      	ldr	r3, [pc, #440]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	220f      	movs	r2, #15
 80017a6:	4013      	ands	r3, r2
 80017a8:	4a6f      	ldr	r2, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x364>)
 80017aa:	5cd3      	ldrb	r3, [r2, r3]
 80017ac:	000a      	movs	r2, r1
 80017ae:	40da      	lsrs	r2, r3
 80017b0:	4b6e      	ldr	r3, [pc, #440]	; (800196c <HAL_RCC_OscConfig+0x368>)
 80017b2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017b4:	4b6e      	ldr	r3, [pc, #440]	; (8001970 <HAL_RCC_OscConfig+0x36c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2513      	movs	r5, #19
 80017ba:	197c      	adds	r4, r7, r5
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff fc0b 	bl	8000fd8 <HAL_InitTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80017c6:	197b      	adds	r3, r7, r5
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d046      	beq.n	800185c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80017ce:	197b      	adds	r3, r7, r5
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	e2d0      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d027      	beq.n	800182a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2209      	movs	r2, #9
 80017e0:	4393      	bics	r3, r2
 80017e2:	0019      	movs	r1, r3
 80017e4:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc3a 	bl	8001064 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f6:	f7ff fc35 	bl	8001064 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e2b6      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2204      	movs	r2, #4
 800180e:	4013      	ands	r3, r2
 8001810:	d0f1      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	4b51      	ldr	r3, [pc, #324]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a53      	ldr	r2, [pc, #332]	; (8001964 <HAL_RCC_OscConfig+0x360>)
 8001818:	4013      	ands	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	021a      	lsls	r2, r3, #8
 8001822:	4b4d      	ldr	r3, [pc, #308]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001824:	430a      	orrs	r2, r1
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	e018      	b.n	800185c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182a:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001830:	2101      	movs	r1, #1
 8001832:	438a      	bics	r2, r1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fc15 	bl	8001064 <HAL_GetTick>
 800183a:	0003      	movs	r3, r0
 800183c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fc10 	bl	8001064 <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e291      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001852:	4b41      	ldr	r3, [pc, #260]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2204      	movs	r2, #4
 8001858:	4013      	ands	r3, r2
 800185a:	d1f1      	bne.n	8001840 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2210      	movs	r2, #16
 8001862:	4013      	ands	r3, r2
 8001864:	d100      	bne.n	8001868 <HAL_RCC_OscConfig+0x264>
 8001866:	e0a1      	b.n	80019ac <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d140      	bne.n	80018f0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4013      	ands	r3, r2
 8001878:	d005      	beq.n	8001886 <HAL_RCC_OscConfig+0x282>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e277      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001886:	4b34      	ldr	r3, [pc, #208]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <HAL_RCC_OscConfig+0x370>)
 800188c:	4013      	ands	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189a:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	0a19      	lsrs	r1, r3, #8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	061a      	lsls	r2, r3, #24
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	0b5b      	lsrs	r3, r3, #13
 80018b4:	3301      	adds	r3, #1
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	0212      	lsls	r2, r2, #8
 80018ba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018bc:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	210f      	movs	r1, #15
 80018c4:	400b      	ands	r3, r1
 80018c6:	4928      	ldr	r1, [pc, #160]	; (8001968 <HAL_RCC_OscConfig+0x364>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_RCC_OscConfig+0x368>)
 80018ce:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_RCC_OscConfig+0x36c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2513      	movs	r5, #19
 80018d6:	197c      	adds	r4, r7, r5
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff fb7d 	bl	8000fd8 <HAL_InitTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018e2:	197b      	adds	r3, r7, r5
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d060      	beq.n	80019ac <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80018ea:	197b      	adds	r3, r7, r5
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	e242      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03f      	beq.n	8001978 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	0049      	lsls	r1, r1, #1
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fbad 	bl	8001064 <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001910:	f7ff fba8 	bl	8001064 <HAL_GetTick>
 8001914:	0002      	movs	r2, r0
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e229      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4013      	ands	r3, r2
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <HAL_RCC_OscConfig+0x370>)
 8001934:	4013      	ands	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 800193e:	430a      	orrs	r2, r1
 8001940:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	0a19      	lsrs	r1, r3, #8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	061a      	lsls	r2, r3, #24
 8001950:	4b01      	ldr	r3, [pc, #4]	; (8001958 <HAL_RCC_OscConfig+0x354>)
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	e029      	b.n	80019ac <HAL_RCC_OscConfig+0x3a8>
 8001958:	40021000 	.word	0x40021000
 800195c:	fffeffff 	.word	0xfffeffff
 8001960:	fffbffff 	.word	0xfffbffff
 8001964:	ffffe0ff 	.word	0xffffe0ff
 8001968:	080043b0 	.word	0x080043b0
 800196c:	20000008 	.word	0x20000008
 8001970:	2000000c 	.word	0x2000000c
 8001974:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001978:	4bbd      	ldr	r3, [pc, #756]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4bbc      	ldr	r3, [pc, #752]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 800197e:	49bd      	ldr	r1, [pc, #756]	; (8001c74 <HAL_RCC_OscConfig+0x670>)
 8001980:	400a      	ands	r2, r1
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fb6e 	bl	8001064 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198e:	f7ff fb69 	bl	8001064 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1ea      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019a0:	4bb3      	ldr	r3, [pc, #716]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2208      	movs	r2, #8
 80019b2:	4013      	ands	r3, r2
 80019b4:	d036      	beq.n	8001a24 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d019      	beq.n	80019f2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019be:	4bac      	ldr	r3, [pc, #688]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 80019c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c2:	4bab      	ldr	r3, [pc, #684]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 80019c4:	2101      	movs	r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fb4b 	bl	8001064 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff fb46 	bl	8001064 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1c7      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019e6:	4ba2      	ldr	r3, [pc, #648]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 80019e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	d0f1      	beq.n	80019d4 <HAL_RCC_OscConfig+0x3d0>
 80019f0:	e018      	b.n	8001a24 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f2:	4b9f      	ldr	r3, [pc, #636]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 80019f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f6:	4b9e      	ldr	r3, [pc, #632]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 80019f8:	2101      	movs	r1, #1
 80019fa:	438a      	bics	r2, r1
 80019fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fb31 	bl	8001064 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a08:	f7ff fb2c 	bl	8001064 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e1ad      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a1a:	4b95      	ldr	r3, [pc, #596]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d1f1      	bne.n	8001a08 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d100      	bne.n	8001a30 <HAL_RCC_OscConfig+0x42c>
 8001a2e:	e0ae      	b.n	8001b8e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a30:	2027      	movs	r0, #39	; 0x27
 8001a32:	183b      	adds	r3, r7, r0
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a38:	4b8d      	ldr	r3, [pc, #564]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	055b      	lsls	r3, r3, #21
 8001a40:	4013      	ands	r3, r2
 8001a42:	d109      	bne.n	8001a58 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	4b8a      	ldr	r3, [pc, #552]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a48:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	0549      	lsls	r1, r1, #21
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a52:	183b      	adds	r3, r7, r0
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a58:	4b87      	ldr	r3, [pc, #540]	; (8001c78 <HAL_RCC_OscConfig+0x674>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4013      	ands	r3, r2
 8001a62:	d11a      	bne.n	8001a9a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a64:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <HAL_RCC_OscConfig+0x674>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b83      	ldr	r3, [pc, #524]	; (8001c78 <HAL_RCC_OscConfig+0x674>)
 8001a6a:	2180      	movs	r1, #128	; 0x80
 8001a6c:	0049      	lsls	r1, r1, #1
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a72:	f7ff faf7 	bl	8001064 <HAL_GetTick>
 8001a76:	0003      	movs	r3, r0
 8001a78:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7c:	f7ff faf2 	bl	8001064 <HAL_GetTick>
 8001a80:	0002      	movs	r2, r0
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e173      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8e:	4b7a      	ldr	r3, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x674>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4013      	ands	r3, r2
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x4b2>
 8001aa6:	4b72      	ldr	r3, [pc, #456]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001aa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aaa:	4b71      	ldr	r3, [pc, #452]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0049      	lsls	r1, r1, #1
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ab4:	e031      	b.n	8001b1a <HAL_RCC_OscConfig+0x516>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4d4>
 8001abe:	4b6c      	ldr	r3, [pc, #432]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001ac0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac2:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001ac4:	496b      	ldr	r1, [pc, #428]	; (8001c74 <HAL_RCC_OscConfig+0x670>)
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	651a      	str	r2, [r3, #80]	; 0x50
 8001aca:	4b69      	ldr	r3, [pc, #420]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ace:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001ad0:	496a      	ldr	r1, [pc, #424]	; (8001c7c <HAL_RCC_OscConfig+0x678>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad6:	e020      	b.n	8001b1a <HAL_RCC_OscConfig+0x516>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	23a0      	movs	r3, #160	; 0xa0
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10e      	bne.n	8001b02 <HAL_RCC_OscConfig+0x4fe>
 8001ae4:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001ae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae8:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	00c9      	lsls	r1, r1, #3
 8001aee:	430a      	orrs	r2, r1
 8001af0:	651a      	str	r2, [r3, #80]	; 0x50
 8001af2:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001af4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af6:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	0049      	lsls	r1, r1, #1
 8001afc:	430a      	orrs	r2, r1
 8001afe:	651a      	str	r2, [r3, #80]	; 0x50
 8001b00:	e00b      	b.n	8001b1a <HAL_RCC_OscConfig+0x516>
 8001b02:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b06:	4b5a      	ldr	r3, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001b08:	495a      	ldr	r1, [pc, #360]	; (8001c74 <HAL_RCC_OscConfig+0x670>)
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b0e:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001b10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b12:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001b14:	4959      	ldr	r1, [pc, #356]	; (8001c7c <HAL_RCC_OscConfig+0x678>)
 8001b16:	400a      	ands	r2, r1
 8001b18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d015      	beq.n	8001b4e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7ff fa9f 	bl	8001064 <HAL_GetTick>
 8001b26:	0003      	movs	r3, r0
 8001b28:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b2a:	e009      	b.n	8001b40 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fa9a 	bl	8001064 <HAL_GetTick>
 8001b30:	0002      	movs	r2, r0
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <HAL_RCC_OscConfig+0x67c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e11a      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b40:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001b42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0ef      	beq.n	8001b2c <HAL_RCC_OscConfig+0x528>
 8001b4c:	e014      	b.n	8001b78 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fa89 	bl	8001064 <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b56:	e009      	b.n	8001b6c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff fa84 	bl	8001064 <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	4a47      	ldr	r2, [pc, #284]	; (8001c80 <HAL_RCC_OscConfig+0x67c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e104      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b6c:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001b6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d1ef      	bne.n	8001b58 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b78:	2327      	movs	r3, #39	; 0x27
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d105      	bne.n	8001b8e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b86:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001b88:	493e      	ldr	r1, [pc, #248]	; (8001c84 <HAL_RCC_OscConfig+0x680>)
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2220      	movs	r2, #32
 8001b94:	4013      	ands	r3, r2
 8001b96:	d049      	beq.n	8001c2c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d026      	beq.n	8001bee <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ba0:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <HAL_RCC_OscConfig+0x684>)
 8001bba:	6a1a      	ldr	r2, [r3, #32]
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_RCC_OscConfig+0x684>)
 8001bbe:	2180      	movs	r1, #128	; 0x80
 8001bc0:	0189      	lsls	r1, r1, #6
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fa4d 	bl	8001064 <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd0:	f7ff fa48 	bl	8001064 <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0c9      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d0f1      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x5cc>
 8001bec:	e01e      	b.n	8001c2c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_RCC_OscConfig+0x684>)
 8001bfc:	6a1a      	ldr	r2, [r3, #32]
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_RCC_OscConfig+0x684>)
 8001c00:	4922      	ldr	r1, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x688>)
 8001c02:	400a      	ands	r2, r1
 8001c04:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fa2d 	bl	8001064 <HAL_GetTick>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c10:	f7ff fa28 	bl	8001064 <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e0a9      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2202      	movs	r2, #2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d1f1      	bne.n	8001c10 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d100      	bne.n	8001c36 <HAL_RCC_OscConfig+0x632>
 8001c34:	e09e      	b.n	8001d74 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	d100      	bne.n	8001c3e <HAL_RCC_OscConfig+0x63a>
 8001c3c:	e077      	b.n	8001d2e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d158      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_OscConfig+0x66c>)
 8001c4c:	4910      	ldr	r1, [pc, #64]	; (8001c90 <HAL_RCC_OscConfig+0x68c>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fa07 	bl	8001064 <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c5a:	e01b      	b.n	8001c94 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff fa02 	bl	8001064 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d914      	bls.n	8001c94 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e083      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	40021000 	.word	0x40021000
 8001c74:	fffffeff 	.word	0xfffffeff
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	fffffbff 	.word	0xfffffbff
 8001c80:	00001388 	.word	0x00001388
 8001c84:	efffffff 	.word	0xefffffff
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	ffffdfff 	.word	0xffffdfff
 8001c90:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c94:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_RCC_OscConfig+0x77c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	049b      	lsls	r3, r3, #18
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d1dd      	bne.n	8001c5c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_RCC_OscConfig+0x77c>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4a37      	ldr	r2, [pc, #220]	; (8001d84 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCC_OscConfig+0x77c>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_RCC_OscConfig+0x77c>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_RCC_OscConfig+0x77c>)
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	0449      	lsls	r1, r1, #17
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff f9c9 	bl	8001064 <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff f9c4 	bl	8001064 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e045      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_RCC_OscConfig+0x77c>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	049b      	lsls	r3, r3, #18
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x6d4>
 8001cf6:	e03d      	b.n	8001d74 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_RCC_OscConfig+0x77c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_OscConfig+0x77c>)
 8001cfe:	4922      	ldr	r1, [pc, #136]	; (8001d88 <HAL_RCC_OscConfig+0x784>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff f9ae 	bl	8001064 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff f9a9 	bl	8001064 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e02a      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_RCC_OscConfig+0x77c>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	049b      	lsls	r3, r3, #18
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x70a>
 8001d2c:	e022      	b.n	8001d74 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e01d      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_RCC_OscConfig+0x77c>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	025b      	lsls	r3, r3, #9
 8001d46:	401a      	ands	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d10f      	bne.n	8001d70 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	23f0      	movs	r3, #240	; 0xf0
 8001d54:	039b      	lsls	r3, r3, #14
 8001d56:	401a      	ands	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	23c0      	movs	r3, #192	; 0xc0
 8001d64:	041b      	lsls	r3, r3, #16
 8001d66:	401a      	ands	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b00a      	add	sp, #40	; 0x28
 8001d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	40021000 	.word	0x40021000
 8001d84:	ff02ffff 	.word	0xff02ffff
 8001d88:	feffffff 	.word	0xfeffffff

08001d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e128      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b96      	ldr	r3, [pc, #600]	; (8001ffc <HAL_RCC_ClockConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d91e      	bls.n	8001dec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b93      	ldr	r3, [pc, #588]	; (8001ffc <HAL_RCC_ClockConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4393      	bics	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	4b90      	ldr	r3, [pc, #576]	; (8001ffc <HAL_RCC_ClockConfig+0x270>)
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f950 	bl	8001064 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc8:	e009      	b.n	8001dde <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dca:	f7ff f94b 	bl	8001064 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	4a8a      	ldr	r2, [pc, #552]	; (8002000 <HAL_RCC_ClockConfig+0x274>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e109      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b87      	ldr	r3, [pc, #540]	; (8001ffc <HAL_RCC_ClockConfig+0x270>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	4013      	ands	r3, r2
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1ee      	bne.n	8001dca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df6:	4b83      	ldr	r3, [pc, #524]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	22f0      	movs	r2, #240	; 0xf0
 8001dfc:	4393      	bics	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4013      	ands	r3, r2
 8001e12:	d100      	bne.n	8001e16 <HAL_RCC_ClockConfig+0x8a>
 8001e14:	e089      	b.n	8001f2a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e1e:	4b79      	ldr	r3, [pc, #484]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	029b      	lsls	r3, r3, #10
 8001e26:	4013      	ands	r3, r2
 8001e28:	d120      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0e1      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e36:	4b73      	ldr	r3, [pc, #460]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	049b      	lsls	r3, r3, #18
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d114      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0d5      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d106      	bne.n	8001e5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2204      	movs	r2, #4
 8001e54:	4013      	ands	r3, r2
 8001e56:	d109      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0ca      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e5c:	4b69      	ldr	r3, [pc, #420]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4013      	ands	r3, r2
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0c2      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6c:	4b65      	ldr	r3, [pc, #404]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2203      	movs	r2, #3
 8001e72:	4393      	bics	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4b62      	ldr	r3, [pc, #392]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e80:	f7ff f8f0 	bl	8001064 <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d111      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e90:	e009      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e92:	f7ff f8e7 	bl	8001064 <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	4a58      	ldr	r2, [pc, #352]	; (8002000 <HAL_RCC_ClockConfig+0x274>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0a5      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea6:	4b57      	ldr	r3, [pc, #348]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	220c      	movs	r2, #12
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d1ef      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x106>
 8001eb2:	e03a      	b.n	8001f2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d111      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebc:	e009      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebe:	f7ff f8d1 	bl	8001064 <HAL_GetTick>
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	4a4d      	ldr	r2, [pc, #308]	; (8002000 <HAL_RCC_ClockConfig+0x274>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e08f      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed2:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	d1ef      	bne.n	8001ebe <HAL_RCC_ClockConfig+0x132>
 8001ede:	e024      	b.n	8001f2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d11b      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee8:	e009      	b.n	8001efe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eea:	f7ff f8bb 	bl	8001064 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	4a42      	ldr	r2, [pc, #264]	; (8002000 <HAL_RCC_ClockConfig+0x274>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e079      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efe:	4b41      	ldr	r3, [pc, #260]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	220c      	movs	r2, #12
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d1ef      	bne.n	8001eea <HAL_RCC_ClockConfig+0x15e>
 8001f0a:	e00e      	b.n	8001f2a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7ff f8aa 	bl	8001064 <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	4a3a      	ldr	r2, [pc, #232]	; (8002000 <HAL_RCC_ClockConfig+0x274>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e068      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f20:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	220c      	movs	r2, #12
 8001f26:	4013      	ands	r3, r2
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_RCC_ClockConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4013      	ands	r3, r2
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d21e      	bcs.n	8001f76 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_RCC_ClockConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4393      	bics	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_RCC_ClockConfig+0x270>)
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f4a:	f7ff f88b 	bl	8001064 <HAL_GetTick>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	e009      	b.n	8001f68 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7ff f886 	bl	8001064 <HAL_GetTick>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	4a28      	ldr	r2, [pc, #160]	; (8002000 <HAL_RCC_ClockConfig+0x274>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e044      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_RCC_ClockConfig+0x270>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d1ee      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a20      	ldr	r2, [pc, #128]	; (8002008 <HAL_RCC_ClockConfig+0x27c>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2208      	movs	r2, #8
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f9e:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	4a1a      	ldr	r2, [pc, #104]	; (800200c <HAL_RCC_ClockConfig+0x280>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	00da      	lsls	r2, r3, #3
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb4:	f000 f832 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8001fb8:	0001      	movs	r1, r0
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_RCC_ClockConfig+0x278>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	4a12      	ldr	r2, [pc, #72]	; (8002010 <HAL_RCC_ClockConfig+0x284>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	000a      	movs	r2, r1
 8001fca:	40da      	lsrs	r2, r3
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_RCC_ClockConfig+0x288>)
 8001fce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_RCC_ClockConfig+0x28c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	250b      	movs	r5, #11
 8001fd6:	197c      	adds	r4, r7, r5
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7fe fffd 	bl	8000fd8 <HAL_InitTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001fea:	197b      	adds	r3, r7, r5
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b004      	add	sp, #16
 8001ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40022000 	.word	0x40022000
 8002000:	00001388 	.word	0x00001388
 8002004:	40021000 	.word	0x40021000
 8002008:	fffff8ff 	.word	0xfffff8ff
 800200c:	ffffc7ff 	.word	0xffffc7ff
 8002010:	080043b0 	.word	0x080043b0
 8002014:	20000008 	.word	0x20000008
 8002018:	2000000c 	.word	0x2000000c

0800201c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	b5b0      	push	{r4, r5, r7, lr}
 800201e:	b08e      	sub	sp, #56	; 0x38
 8002020:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002022:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <HAL_RCC_GetSysClockFreq+0x138>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800202a:	230c      	movs	r3, #12
 800202c:	4013      	ands	r3, r2
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d014      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x40>
 8002032:	d900      	bls.n	8002036 <HAL_RCC_GetSysClockFreq+0x1a>
 8002034:	e07b      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x112>
 8002036:	2b04      	cmp	r3, #4
 8002038:	d002      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x24>
 800203a:	2b08      	cmp	r3, #8
 800203c:	d00b      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x3a>
 800203e:	e076      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002040:	4b44      	ldr	r3, [pc, #272]	; (8002154 <HAL_RCC_GetSysClockFreq+0x138>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2210      	movs	r2, #16
 8002046:	4013      	ands	r3, r2
 8002048:	d002      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800204a:	4b43      	ldr	r3, [pc, #268]	; (8002158 <HAL_RCC_GetSysClockFreq+0x13c>)
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800204e:	e07c      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002050:	4b42      	ldr	r3, [pc, #264]	; (800215c <HAL_RCC_GetSysClockFreq+0x140>)
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002054:	e079      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002056:	4b42      	ldr	r3, [pc, #264]	; (8002160 <HAL_RCC_GetSysClockFreq+0x144>)
 8002058:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800205a:	e076      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	0c9a      	lsrs	r2, r3, #18
 8002060:	230f      	movs	r3, #15
 8002062:	401a      	ands	r2, r3
 8002064:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <HAL_RCC_GetSysClockFreq+0x148>)
 8002066:	5c9b      	ldrb	r3, [r3, r2]
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206c:	0d9a      	lsrs	r2, r3, #22
 800206e:	2303      	movs	r3, #3
 8002070:	4013      	ands	r3, r2
 8002072:	3301      	adds	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002076:	4b37      	ldr	r3, [pc, #220]	; (8002154 <HAL_RCC_GetSysClockFreq+0x138>)
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	4013      	ands	r3, r2
 8002080:	d01a      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	4a35      	ldr	r2, [pc, #212]	; (8002160 <HAL_RCC_GetSysClockFreq+0x144>)
 800208c:	2300      	movs	r3, #0
 800208e:	69b8      	ldr	r0, [r7, #24]
 8002090:	69f9      	ldr	r1, [r7, #28]
 8002092:	f7fe f9d9 	bl	8000448 <__aeabi_lmul>
 8002096:	0002      	movs	r2, r0
 8002098:	000b      	movs	r3, r1
 800209a:	0010      	movs	r0, r2
 800209c:	0019      	movs	r1, r3
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f7fe f9ad 	bl	8000408 <__aeabi_uldivmod>
 80020ae:	0002      	movs	r2, r0
 80020b0:	000b      	movs	r3, r1
 80020b2:	0013      	movs	r3, r2
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
 80020b6:	e037      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_GetSysClockFreq+0x138>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2210      	movs	r2, #16
 80020be:	4013      	ands	r3, r2
 80020c0:	d01a      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4a23      	ldr	r2, [pc, #140]	; (8002158 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020cc:	2300      	movs	r3, #0
 80020ce:	68b8      	ldr	r0, [r7, #8]
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	f7fe f9b9 	bl	8000448 <__aeabi_lmul>
 80020d6:	0002      	movs	r2, r0
 80020d8:	000b      	movs	r3, r1
 80020da:	0010      	movs	r0, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f7fe f98d 	bl	8000408 <__aeabi_uldivmod>
 80020ee:	0002      	movs	r2, r0
 80020f0:	000b      	movs	r3, r1
 80020f2:	0013      	movs	r3, r2
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
 80020f6:	e017      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	0018      	movs	r0, r3
 80020fc:	2300      	movs	r3, #0
 80020fe:	0019      	movs	r1, r3
 8002100:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_RCC_GetSysClockFreq+0x140>)
 8002102:	2300      	movs	r3, #0
 8002104:	f7fe f9a0 	bl	8000448 <__aeabi_lmul>
 8002108:	0002      	movs	r2, r0
 800210a:	000b      	movs	r3, r1
 800210c:	0010      	movs	r0, r2
 800210e:	0019      	movs	r1, r3
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	001c      	movs	r4, r3
 8002114:	2300      	movs	r3, #0
 8002116:	001d      	movs	r5, r3
 8002118:	0022      	movs	r2, r4
 800211a:	002b      	movs	r3, r5
 800211c:	f7fe f974 	bl	8000408 <__aeabi_uldivmod>
 8002120:	0002      	movs	r2, r0
 8002122:	000b      	movs	r3, r1
 8002124:	0013      	movs	r3, r2
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800212c:	e00d      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_GetSysClockFreq+0x138>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0b5b      	lsrs	r3, r3, #13
 8002134:	2207      	movs	r2, #7
 8002136:	4013      	ands	r3, r2
 8002138:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	3301      	adds	r3, #1
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	0212      	lsls	r2, r2, #8
 8002142:	409a      	lsls	r2, r3
 8002144:	0013      	movs	r3, r2
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002148:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b00e      	add	sp, #56	; 0x38
 8002152:	bdb0      	pop	{r4, r5, r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	003d0900 	.word	0x003d0900
 800215c:	00f42400 	.word	0x00f42400
 8002160:	007a1200 	.word	0x007a1200
 8002164:	080043c8 	.word	0x080043c8

08002168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800216c:	4b02      	ldr	r3, [pc, #8]	; (8002178 <HAL_RCC_GetHCLKFreq+0x10>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	20000008 	.word	0x20000008

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002180:	f7ff fff2 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 8002184:	0001      	movs	r1, r0
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	2207      	movs	r2, #7
 800218e:	4013      	ands	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	40d9      	lsrs	r1, r3
 8002196:	000b      	movs	r3, r1
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	40021000 	.word	0x40021000
 80021a4:	080043c0 	.word	0x080043c0

080021a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ac:	f7ff ffdc 	bl	8002168 <HAL_RCC_GetHCLKFreq>
 80021b0:	0001      	movs	r1, r0
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	0adb      	lsrs	r3, r3, #11
 80021b8:	2207      	movs	r2, #7
 80021ba:	4013      	ands	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	40d9      	lsrs	r1, r3
 80021c2:	000b      	movs	r3, r1
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	40021000 	.word	0x40021000
 80021d0:	080043c0 	.word	0x080043c0

080021d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80021dc:	2317      	movs	r3, #23
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2220      	movs	r2, #32
 80021ea:	4013      	ands	r3, r2
 80021ec:	d106      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4013      	ands	r3, r2
 80021f8:	d100      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80021fa:	e0d9      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fc:	4b9c      	ldr	r3, [pc, #624]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	055b      	lsls	r3, r3, #21
 8002204:	4013      	ands	r3, r2
 8002206:	d10a      	bne.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4b99      	ldr	r3, [pc, #612]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800220a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800220c:	4b98      	ldr	r3, [pc, #608]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	0549      	lsls	r1, r1, #21
 8002212:	430a      	orrs	r2, r1
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002216:	2317      	movs	r3, #23
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4b95      	ldr	r3, [pc, #596]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4013      	ands	r3, r2
 8002228:	d11a      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222a:	4b92      	ldr	r3, [pc, #584]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b91      	ldr	r3, [pc, #580]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	0049      	lsls	r1, r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002238:	f7fe ff14 	bl	8001064 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe ff0f 	bl	8001064 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e108      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b87      	ldr	r3, [pc, #540]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4013      	ands	r3, r2
 800225e:	d0f0      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002260:	4b83      	ldr	r3, [pc, #524]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	23c0      	movs	r3, #192	; 0xc0
 8002266:	039b      	lsls	r3, r3, #14
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	23c0      	movs	r3, #192	; 0xc0
 8002272:	039b      	lsls	r3, r3, #14
 8002274:	4013      	ands	r3, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d107      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	23c0      	movs	r3, #192	; 0xc0
 8002282:	039b      	lsls	r3, r3, #14
 8002284:	4013      	ands	r3, r2
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d013      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	23c0      	movs	r3, #192	; 0xc0
 8002292:	029b      	lsls	r3, r3, #10
 8002294:	401a      	ands	r2, r3
 8002296:	23c0      	movs	r3, #192	; 0xc0
 8002298:	029b      	lsls	r3, r3, #10
 800229a:	429a      	cmp	r2, r3
 800229c:	d10a      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800229e:	4b74      	ldr	r3, [pc, #464]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	029b      	lsls	r3, r3, #10
 80022a6:	401a      	ands	r2, r3
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	029b      	lsls	r3, r3, #10
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d101      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0d8      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80022b4:	4b6e      	ldr	r3, [pc, #440]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022b8:	23c0      	movs	r3, #192	; 0xc0
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	4013      	ands	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d049      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	23c0      	movs	r3, #192	; 0xc0
 80022cc:	029b      	lsls	r3, r3, #10
 80022ce:	4013      	ands	r3, r2
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d004      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	4013      	ands	r3, r2
 80022de:	d10d      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	23c0      	movs	r3, #192	; 0xc0
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	4013      	ands	r3, r2
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d034      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	4013      	ands	r3, r2
 80022fa:	d02e      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80022fc:	4b5c      	ldr	r3, [pc, #368]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	4a5d      	ldr	r2, [pc, #372]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002306:	4b5a      	ldr	r3, [pc, #360]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800230a:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	0309      	lsls	r1, r1, #12
 8002310:	430a      	orrs	r2, r1
 8002312:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002314:	4b56      	ldr	r3, [pc, #344]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002318:	4b55      	ldr	r3, [pc, #340]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800231a:	4958      	ldr	r1, [pc, #352]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800231c:	400a      	ands	r2, r1
 800231e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d014      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fe98 	bl	8001064 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002338:	e009      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fe93 	bl	8001064 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	4a4e      	ldr	r2, [pc, #312]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e08b      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800234e:	4b48      	ldr	r3, [pc, #288]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002350:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d0ef      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	23c0      	movs	r3, #192	; 0xc0
 8002360:	029b      	lsls	r3, r3, #10
 8002362:	401a      	ands	r2, r3
 8002364:	23c0      	movs	r3, #192	; 0xc0
 8002366:	029b      	lsls	r3, r3, #10
 8002368:	429a      	cmp	r2, r3
 800236a:	d10c      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a44      	ldr	r2, [pc, #272]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002372:	4013      	ands	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	23c0      	movs	r3, #192	; 0xc0
 800237c:	039b      	lsls	r3, r3, #14
 800237e:	401a      	ands	r2, r3
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002388:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	029b      	lsls	r3, r3, #10
 8002392:	401a      	ands	r2, r3
 8002394:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002396:	430a      	orrs	r2, r1
 8002398:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800239a:	2317      	movs	r3, #23
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023aa:	4937      	ldr	r1, [pc, #220]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2201      	movs	r2, #1
 80023b6:	4013      	ands	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ba:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023be:	2203      	movs	r2, #3
 80023c0:	4393      	bics	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d009      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023dc:	220c      	movs	r2, #12
 80023de:	4393      	bics	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023e8:	430a      	orrs	r2, r1
 80023ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2204      	movs	r2, #4
 80023f2:	4013      	ands	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023f6:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4a24      	ldr	r2, [pc, #144]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002406:	430a      	orrs	r2, r1
 8002408:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2208      	movs	r2, #8
 8002410:	4013      	ands	r3, r2
 8002412:	d009      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800241a:	4013      	ands	r3, r2
 800241c:	0019      	movs	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002424:	430a      	orrs	r2, r1
 8002426:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2240      	movs	r2, #64	; 0x40
 800242e:	4013      	ands	r3, r2
 8002430:	d009      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	4a17      	ldr	r2, [pc, #92]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002438:	4013      	ands	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1a      	ldr	r2, [r3, #32]
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002442:	430a      	orrs	r2, r1
 8002444:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	4013      	ands	r3, r2
 800244e:	d009      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002454:	4a10      	ldr	r2, [pc, #64]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002456:	4013      	ands	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002460:	430a      	orrs	r2, r1
 8002462:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b006      	add	sp, #24
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	40021000 	.word	0x40021000
 8002474:	40007000 	.word	0x40007000
 8002478:	fffcffff 	.word	0xfffcffff
 800247c:	fff7ffff 	.word	0xfff7ffff
 8002480:	00001388 	.word	0x00001388
 8002484:	ffcfffff 	.word	0xffcfffff
 8002488:	efffffff 	.word	0xefffffff
 800248c:	fffff3ff 	.word	0xfffff3ff
 8002490:	ffffcfff 	.word	0xffffcfff
 8002494:	fbffffff 	.word	0xfbffffff
 8002498:	fff3ffff 	.word	0xfff3ffff

0800249c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e044      	b.n	8002538 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2274      	movs	r2, #116	; 0x74
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7fe fc7b 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2224      	movs	r2, #36	; 0x24
 80024ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2101      	movs	r1, #1
 80024d8:	438a      	bics	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 f9c6 	bl	8002870 <UART_SetConfig>
 80024e4:	0003      	movs	r3, r0
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e024      	b.n	8002538 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 fc59 	bl	8002db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	490d      	ldr	r1, [pc, #52]	; (8002540 <HAL_UART_Init+0xa4>)
 800250a:	400a      	ands	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	212a      	movs	r1, #42	; 0x2a
 800251a:	438a      	bics	r2, r1
 800251c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 fcf1 	bl	8002f18 <UART_CheckIdleState>
 8002536:	0003      	movs	r3, r0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}
 8002540:	ffffb7ff 	.word	0xffffb7ff

08002544 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	1dbb      	adds	r3, r7, #6
 8002552:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002558:	2b20      	cmp	r3, #32
 800255a:	d000      	beq.n	800255e <HAL_UART_Transmit+0x1a>
 800255c:	e095      	b.n	800268a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_UART_Transmit+0x28>
 8002564:	1dbb      	adds	r3, r7, #6
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e08d      	b.n	800268c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	015b      	lsls	r3, r3, #5
 8002578:	429a      	cmp	r2, r3
 800257a:	d109      	bne.n	8002590 <HAL_UART_Transmit+0x4c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2201      	movs	r2, #1
 8002588:	4013      	ands	r3, r2
 800258a:	d001      	beq.n	8002590 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e07d      	b.n	800268c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2274      	movs	r2, #116	; 0x74
 8002594:	5c9b      	ldrb	r3, [r3, r2]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_UART_Transmit+0x5a>
 800259a:	2302      	movs	r3, #2
 800259c:	e076      	b.n	800268c <HAL_UART_Transmit+0x148>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2274      	movs	r2, #116	; 0x74
 80025a2:	2101      	movs	r1, #1
 80025a4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	2100      	movs	r1, #0
 80025ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2221      	movs	r2, #33	; 0x21
 80025b2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025b4:	f7fe fd56 	bl	8001064 <HAL_GetTick>
 80025b8:	0003      	movs	r3, r0
 80025ba:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1dba      	adds	r2, r7, #6
 80025c0:	2150      	movs	r1, #80	; 0x50
 80025c2:	8812      	ldrh	r2, [r2, #0]
 80025c4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1dba      	adds	r2, r7, #6
 80025ca:	2152      	movs	r1, #82	; 0x52
 80025cc:	8812      	ldrh	r2, [r2, #0]
 80025ce:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	429a      	cmp	r2, r3
 80025da:	d108      	bne.n	80025ee <HAL_UART_Transmit+0xaa>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	e003      	b.n	80025f6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2274      	movs	r2, #116	; 0x74
 80025fa:	2100      	movs	r1, #0
 80025fc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80025fe:	e02c      	b.n	800265a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	0013      	movs	r3, r2
 800260a:	2200      	movs	r2, #0
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	f000 fccb 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 8002612:	1e03      	subs	r3, r0, #0
 8002614:	d001      	beq.n	800261a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e038      	b.n	800268c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10b      	bne.n	8002638 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	001a      	movs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	05d2      	lsls	r2, r2, #23
 800262c:	0dd2      	lsrs	r2, r2, #23
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	3302      	adds	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	e007      	b.n	8002648 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2252      	movs	r2, #82	; 0x52
 800264c:	5a9b      	ldrh	r3, [r3, r2]
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b299      	uxth	r1, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2252      	movs	r2, #82	; 0x52
 8002658:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2252      	movs	r2, #82	; 0x52
 800265e:	5a9b      	ldrh	r3, [r3, r2]
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1cc      	bne.n	8002600 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	0013      	movs	r3, r2
 8002670:	2200      	movs	r2, #0
 8002672:	2140      	movs	r1, #64	; 0x40
 8002674:	f000 fc98 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 8002678:	1e03      	subs	r3, r0, #0
 800267a:	d001      	beq.n	8002680 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e005      	b.n	800268c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
  }
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b008      	add	sp, #32
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	1dbb      	adds	r3, r7, #6
 80026a2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d000      	beq.n	80026ae <HAL_UART_Receive+0x1a>
 80026ac:	e0d9      	b.n	8002862 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_UART_Receive+0x28>
 80026b4:	1dbb      	adds	r3, r7, #6
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0d1      	b.n	8002864 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	015b      	lsls	r3, r3, #5
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d109      	bne.n	80026e0 <HAL_UART_Receive+0x4c>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d105      	bne.n	80026e0 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d001      	beq.n	80026e0 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0c1      	b.n	8002864 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2274      	movs	r2, #116	; 0x74
 80026e4:	5c9b      	ldrb	r3, [r3, r2]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_UART_Receive+0x5a>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e0ba      	b.n	8002864 <HAL_UART_Receive+0x1d0>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2274      	movs	r2, #116	; 0x74
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	2100      	movs	r1, #0
 80026fc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2222      	movs	r2, #34	; 0x22
 8002702:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800270a:	f7fe fcab 	bl	8001064 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1dba      	adds	r2, r7, #6
 8002716:	2158      	movs	r1, #88	; 0x58
 8002718:	8812      	ldrh	r2, [r2, #0]
 800271a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1dba      	adds	r2, r7, #6
 8002720:	215a      	movs	r1, #90	; 0x5a
 8002722:	8812      	ldrh	r2, [r2, #0]
 8002724:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	015b      	lsls	r3, r3, #5
 800272e:	429a      	cmp	r2, r3
 8002730:	d10d      	bne.n	800274e <HAL_UART_Receive+0xba>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d104      	bne.n	8002744 <HAL_UART_Receive+0xb0>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	225c      	movs	r2, #92	; 0x5c
 800273e:	494b      	ldr	r1, [pc, #300]	; (800286c <HAL_UART_Receive+0x1d8>)
 8002740:	5299      	strh	r1, [r3, r2]
 8002742:	e02e      	b.n	80027a2 <HAL_UART_Receive+0x10e>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	225c      	movs	r2, #92	; 0x5c
 8002748:	21ff      	movs	r1, #255	; 0xff
 800274a:	5299      	strh	r1, [r3, r2]
 800274c:	e029      	b.n	80027a2 <HAL_UART_Receive+0x10e>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_UART_Receive+0xde>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d104      	bne.n	8002768 <HAL_UART_Receive+0xd4>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	225c      	movs	r2, #92	; 0x5c
 8002762:	21ff      	movs	r1, #255	; 0xff
 8002764:	5299      	strh	r1, [r3, r2]
 8002766:	e01c      	b.n	80027a2 <HAL_UART_Receive+0x10e>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	225c      	movs	r2, #92	; 0x5c
 800276c:	217f      	movs	r1, #127	; 0x7f
 800276e:	5299      	strh	r1, [r3, r2]
 8002770:	e017      	b.n	80027a2 <HAL_UART_Receive+0x10e>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	055b      	lsls	r3, r3, #21
 800277a:	429a      	cmp	r2, r3
 800277c:	d10d      	bne.n	800279a <HAL_UART_Receive+0x106>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <HAL_UART_Receive+0xfc>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	225c      	movs	r2, #92	; 0x5c
 800278a:	217f      	movs	r1, #127	; 0x7f
 800278c:	5299      	strh	r1, [r3, r2]
 800278e:	e008      	b.n	80027a2 <HAL_UART_Receive+0x10e>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	225c      	movs	r2, #92	; 0x5c
 8002794:	213f      	movs	r1, #63	; 0x3f
 8002796:	5299      	strh	r1, [r3, r2]
 8002798:	e003      	b.n	80027a2 <HAL_UART_Receive+0x10e>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	225c      	movs	r2, #92	; 0x5c
 800279e:	2100      	movs	r1, #0
 80027a0:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80027a2:	2312      	movs	r3, #18
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	215c      	movs	r1, #92	; 0x5c
 80027aa:	5a52      	ldrh	r2, [r2, r1]
 80027ac:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	015b      	lsls	r3, r3, #5
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d108      	bne.n	80027cc <HAL_UART_Receive+0x138>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	e003      	b.n	80027d4 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2274      	movs	r2, #116	; 0x74
 80027d8:	2100      	movs	r1, #0
 80027da:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80027dc:	e036      	b.n	800284c <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	0013      	movs	r3, r2
 80027e8:	2200      	movs	r2, #0
 80027ea:	2120      	movs	r1, #32
 80027ec:	f000 fbdc 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e035      	b.n	8002864 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10e      	bne.n	800281c <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	b29b      	uxth	r3, r3
 8002806:	2212      	movs	r2, #18
 8002808:	18ba      	adds	r2, r7, r2
 800280a:	8812      	ldrh	r2, [r2, #0]
 800280c:	4013      	ands	r3, r2
 800280e:	b29a      	uxth	r2, r3
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	3302      	adds	r3, #2
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	e00e      	b.n	800283a <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2212      	movs	r2, #18
 8002826:	18ba      	adds	r2, r7, r2
 8002828:	8812      	ldrh	r2, [r2, #0]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	4013      	ands	r3, r2
 800282e:	b2da      	uxtb	r2, r3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3301      	adds	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	225a      	movs	r2, #90	; 0x5a
 800283e:	5a9b      	ldrh	r3, [r3, r2]
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b299      	uxth	r1, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	225a      	movs	r2, #90	; 0x5a
 800284a:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	225a      	movs	r2, #90	; 0x5a
 8002850:	5a9b      	ldrh	r3, [r3, r2]
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1c2      	bne.n	80027de <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002862:	2302      	movs	r3, #2
  }
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b008      	add	sp, #32
 800286a:	bd80      	pop	{r7, pc}
 800286c:	000001ff 	.word	0x000001ff

08002870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af00      	add	r7, sp, #0
 8002876:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002878:	231a      	movs	r3, #26
 800287a:	2218      	movs	r2, #24
 800287c:	4694      	mov	ip, r2
 800287e:	44bc      	add	ip, r7
 8002880:	4463      	add	r3, ip
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	431a      	orrs	r2, r3
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	431a      	orrs	r2, r3
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4313      	orrs	r3, r2
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4ac1      	ldr	r2, [pc, #772]	; (8002bac <UART_SetConfig+0x33c>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	0019      	movs	r1, r3
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4abd      	ldr	r2, [pc, #756]	; (8002bb0 <UART_SetConfig+0x340>)
 80028bc:	4013      	ands	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4ab7      	ldr	r2, [pc, #732]	; (8002bb4 <UART_SetConfig+0x344>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d004      	beq.n	80028e6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e2:	4313      	orrs	r3, r2
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4ab2      	ldr	r2, [pc, #712]	; (8002bb8 <UART_SetConfig+0x348>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f8:	430a      	orrs	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4aae      	ldr	r2, [pc, #696]	; (8002bbc <UART_SetConfig+0x34c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d136      	bne.n	8002974 <UART_SetConfig+0x104>
 8002906:	4bae      	ldr	r3, [pc, #696]	; (8002bc0 <UART_SetConfig+0x350>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	2203      	movs	r2, #3
 800290c:	4013      	ands	r3, r2
 800290e:	2b03      	cmp	r3, #3
 8002910:	d020      	beq.n	8002954 <UART_SetConfig+0xe4>
 8002912:	d827      	bhi.n	8002964 <UART_SetConfig+0xf4>
 8002914:	2b02      	cmp	r3, #2
 8002916:	d00d      	beq.n	8002934 <UART_SetConfig+0xc4>
 8002918:	d824      	bhi.n	8002964 <UART_SetConfig+0xf4>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <UART_SetConfig+0xb4>
 800291e:	2b01      	cmp	r3, #1
 8002920:	d010      	beq.n	8002944 <UART_SetConfig+0xd4>
 8002922:	e01f      	b.n	8002964 <UART_SetConfig+0xf4>
 8002924:	231b      	movs	r3, #27
 8002926:	2218      	movs	r2, #24
 8002928:	4694      	mov	ip, r2
 800292a:	44bc      	add	ip, r7
 800292c:	4463      	add	r3, ip
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e0ab      	b.n	8002a8c <UART_SetConfig+0x21c>
 8002934:	231b      	movs	r3, #27
 8002936:	2218      	movs	r2, #24
 8002938:	4694      	mov	ip, r2
 800293a:	44bc      	add	ip, r7
 800293c:	4463      	add	r3, ip
 800293e:	2202      	movs	r2, #2
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e0a3      	b.n	8002a8c <UART_SetConfig+0x21c>
 8002944:	231b      	movs	r3, #27
 8002946:	2218      	movs	r2, #24
 8002948:	4694      	mov	ip, r2
 800294a:	44bc      	add	ip, r7
 800294c:	4463      	add	r3, ip
 800294e:	2204      	movs	r2, #4
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	e09b      	b.n	8002a8c <UART_SetConfig+0x21c>
 8002954:	231b      	movs	r3, #27
 8002956:	2218      	movs	r2, #24
 8002958:	4694      	mov	ip, r2
 800295a:	44bc      	add	ip, r7
 800295c:	4463      	add	r3, ip
 800295e:	2208      	movs	r2, #8
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e093      	b.n	8002a8c <UART_SetConfig+0x21c>
 8002964:	231b      	movs	r3, #27
 8002966:	2218      	movs	r2, #24
 8002968:	4694      	mov	ip, r2
 800296a:	44bc      	add	ip, r7
 800296c:	4463      	add	r3, ip
 800296e:	2210      	movs	r2, #16
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e08b      	b.n	8002a8c <UART_SetConfig+0x21c>
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a92      	ldr	r2, [pc, #584]	; (8002bc4 <UART_SetConfig+0x354>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d136      	bne.n	80029ec <UART_SetConfig+0x17c>
 800297e:	4b90      	ldr	r3, [pc, #576]	; (8002bc0 <UART_SetConfig+0x350>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	220c      	movs	r2, #12
 8002984:	4013      	ands	r3, r2
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d020      	beq.n	80029cc <UART_SetConfig+0x15c>
 800298a:	d827      	bhi.n	80029dc <UART_SetConfig+0x16c>
 800298c:	2b08      	cmp	r3, #8
 800298e:	d00d      	beq.n	80029ac <UART_SetConfig+0x13c>
 8002990:	d824      	bhi.n	80029dc <UART_SetConfig+0x16c>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <UART_SetConfig+0x12c>
 8002996:	2b04      	cmp	r3, #4
 8002998:	d010      	beq.n	80029bc <UART_SetConfig+0x14c>
 800299a:	e01f      	b.n	80029dc <UART_SetConfig+0x16c>
 800299c:	231b      	movs	r3, #27
 800299e:	2218      	movs	r2, #24
 80029a0:	4694      	mov	ip, r2
 80029a2:	44bc      	add	ip, r7
 80029a4:	4463      	add	r3, ip
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e06f      	b.n	8002a8c <UART_SetConfig+0x21c>
 80029ac:	231b      	movs	r3, #27
 80029ae:	2218      	movs	r2, #24
 80029b0:	4694      	mov	ip, r2
 80029b2:	44bc      	add	ip, r7
 80029b4:	4463      	add	r3, ip
 80029b6:	2202      	movs	r2, #2
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e067      	b.n	8002a8c <UART_SetConfig+0x21c>
 80029bc:	231b      	movs	r3, #27
 80029be:	2218      	movs	r2, #24
 80029c0:	4694      	mov	ip, r2
 80029c2:	44bc      	add	ip, r7
 80029c4:	4463      	add	r3, ip
 80029c6:	2204      	movs	r2, #4
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e05f      	b.n	8002a8c <UART_SetConfig+0x21c>
 80029cc:	231b      	movs	r3, #27
 80029ce:	2218      	movs	r2, #24
 80029d0:	4694      	mov	ip, r2
 80029d2:	44bc      	add	ip, r7
 80029d4:	4463      	add	r3, ip
 80029d6:	2208      	movs	r2, #8
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	e057      	b.n	8002a8c <UART_SetConfig+0x21c>
 80029dc:	231b      	movs	r3, #27
 80029de:	2218      	movs	r2, #24
 80029e0:	4694      	mov	ip, r2
 80029e2:	44bc      	add	ip, r7
 80029e4:	4463      	add	r3, ip
 80029e6:	2210      	movs	r2, #16
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e04f      	b.n	8002a8c <UART_SetConfig+0x21c>
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a70      	ldr	r2, [pc, #448]	; (8002bb4 <UART_SetConfig+0x344>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d143      	bne.n	8002a7e <UART_SetConfig+0x20e>
 80029f6:	4b72      	ldr	r3, [pc, #456]	; (8002bc0 <UART_SetConfig+0x350>)
 80029f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029fa:	23c0      	movs	r3, #192	; 0xc0
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4013      	ands	r3, r2
 8002a00:	22c0      	movs	r2, #192	; 0xc0
 8002a02:	0112      	lsls	r2, r2, #4
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d02a      	beq.n	8002a5e <UART_SetConfig+0x1ee>
 8002a08:	22c0      	movs	r2, #192	; 0xc0
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d82e      	bhi.n	8002a6e <UART_SetConfig+0x1fe>
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d012      	beq.n	8002a3e <UART_SetConfig+0x1ce>
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d826      	bhi.n	8002a6e <UART_SetConfig+0x1fe>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <UART_SetConfig+0x1be>
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	00d2      	lsls	r2, r2, #3
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d010      	beq.n	8002a4e <UART_SetConfig+0x1de>
 8002a2c:	e01f      	b.n	8002a6e <UART_SetConfig+0x1fe>
 8002a2e:	231b      	movs	r3, #27
 8002a30:	2218      	movs	r2, #24
 8002a32:	4694      	mov	ip, r2
 8002a34:	44bc      	add	ip, r7
 8002a36:	4463      	add	r3, ip
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e026      	b.n	8002a8c <UART_SetConfig+0x21c>
 8002a3e:	231b      	movs	r3, #27
 8002a40:	2218      	movs	r2, #24
 8002a42:	4694      	mov	ip, r2
 8002a44:	44bc      	add	ip, r7
 8002a46:	4463      	add	r3, ip
 8002a48:	2202      	movs	r2, #2
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e01e      	b.n	8002a8c <UART_SetConfig+0x21c>
 8002a4e:	231b      	movs	r3, #27
 8002a50:	2218      	movs	r2, #24
 8002a52:	4694      	mov	ip, r2
 8002a54:	44bc      	add	ip, r7
 8002a56:	4463      	add	r3, ip
 8002a58:	2204      	movs	r2, #4
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e016      	b.n	8002a8c <UART_SetConfig+0x21c>
 8002a5e:	231b      	movs	r3, #27
 8002a60:	2218      	movs	r2, #24
 8002a62:	4694      	mov	ip, r2
 8002a64:	44bc      	add	ip, r7
 8002a66:	4463      	add	r3, ip
 8002a68:	2208      	movs	r2, #8
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e00e      	b.n	8002a8c <UART_SetConfig+0x21c>
 8002a6e:	231b      	movs	r3, #27
 8002a70:	2218      	movs	r2, #24
 8002a72:	4694      	mov	ip, r2
 8002a74:	44bc      	add	ip, r7
 8002a76:	4463      	add	r3, ip
 8002a78:	2210      	movs	r2, #16
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e006      	b.n	8002a8c <UART_SetConfig+0x21c>
 8002a7e:	231b      	movs	r3, #27
 8002a80:	2218      	movs	r2, #24
 8002a82:	4694      	mov	ip, r2
 8002a84:	44bc      	add	ip, r7
 8002a86:	4463      	add	r3, ip
 8002a88:	2210      	movs	r2, #16
 8002a8a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a48      	ldr	r2, [pc, #288]	; (8002bb4 <UART_SetConfig+0x344>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d000      	beq.n	8002a98 <UART_SetConfig+0x228>
 8002a96:	e09b      	b.n	8002bd0 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a98:	231b      	movs	r3, #27
 8002a9a:	2218      	movs	r2, #24
 8002a9c:	4694      	mov	ip, r2
 8002a9e:	44bc      	add	ip, r7
 8002aa0:	4463      	add	r3, ip
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d01d      	beq.n	8002ae4 <UART_SetConfig+0x274>
 8002aa8:	dc20      	bgt.n	8002aec <UART_SetConfig+0x27c>
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d015      	beq.n	8002ada <UART_SetConfig+0x26a>
 8002aae:	dc1d      	bgt.n	8002aec <UART_SetConfig+0x27c>
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <UART_SetConfig+0x24a>
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d005      	beq.n	8002ac4 <UART_SetConfig+0x254>
 8002ab8:	e018      	b.n	8002aec <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aba:	f7ff fb5f 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ac2:	e01d      	b.n	8002b00 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <UART_SetConfig+0x350>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2210      	movs	r2, #16
 8002aca:	4013      	ands	r3, r2
 8002acc:	d002      	beq.n	8002ad4 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ace:	4b3e      	ldr	r3, [pc, #248]	; (8002bc8 <UART_SetConfig+0x358>)
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ad2:	e015      	b.n	8002b00 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8002ad4:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <UART_SetConfig+0x35c>)
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ad8:	e012      	b.n	8002b00 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ada:	f7ff fa9f 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ae2:	e00d      	b.n	8002b00 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aea:	e009      	b.n	8002b00 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002af0:	231a      	movs	r3, #26
 8002af2:	2218      	movs	r2, #24
 8002af4:	4694      	mov	ip, r2
 8002af6:	44bc      	add	ip, r7
 8002af8:	4463      	add	r3, ip
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
        break;
 8002afe:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d100      	bne.n	8002b08 <UART_SetConfig+0x298>
 8002b06:	e139      	b.n	8002d7c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	189b      	adds	r3, r3, r2
 8002b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d305      	bcc.n	8002b24 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d907      	bls.n	8002b34 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002b24:	231a      	movs	r3, #26
 8002b26:	2218      	movs	r2, #24
 8002b28:	4694      	mov	ip, r2
 8002b2a:	44bc      	add	ip, r7
 8002b2c:	4463      	add	r3, ip
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e123      	b.n	8002d7c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	6939      	ldr	r1, [r7, #16]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	000b      	movs	r3, r1
 8002b42:	0e1b      	lsrs	r3, r3, #24
 8002b44:	0010      	movs	r0, r2
 8002b46:	0205      	lsls	r5, r0, #8
 8002b48:	431d      	orrs	r5, r3
 8002b4a:	000b      	movs	r3, r1
 8002b4c:	021c      	lsls	r4, r3, #8
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68b8      	ldr	r0, [r7, #8]
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	1900      	adds	r0, r0, r4
 8002b60:	4169      	adcs	r1, r5
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f7fd fc4a 	bl	8000408 <__aeabi_uldivmod>
 8002b74:	0002      	movs	r2, r0
 8002b76:	000b      	movs	r3, r1
 8002b78:	0013      	movs	r3, r2
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b7e:	23c0      	movs	r3, #192	; 0xc0
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d309      	bcc.n	8002b9a <UART_SetConfig+0x32a>
 8002b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	035b      	lsls	r3, r3, #13
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d204      	bcs.n	8002b9a <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b96:	60da      	str	r2, [r3, #12]
 8002b98:	e0f0      	b.n	8002d7c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b9a:	231a      	movs	r3, #26
 8002b9c:	2218      	movs	r2, #24
 8002b9e:	4694      	mov	ip, r2
 8002ba0:	44bc      	add	ip, r7
 8002ba2:	4463      	add	r3, ip
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e0e8      	b.n	8002d7c <UART_SetConfig+0x50c>
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	efff69f3 	.word	0xefff69f3
 8002bb0:	ffffcfff 	.word	0xffffcfff
 8002bb4:	40004800 	.word	0x40004800
 8002bb8:	fffff4ff 	.word	0xfffff4ff
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40004400 	.word	0x40004400
 8002bc8:	003d0900 	.word	0x003d0900
 8002bcc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d000      	beq.n	8002bde <UART_SetConfig+0x36e>
 8002bdc:	e074      	b.n	8002cc8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002bde:	231b      	movs	r3, #27
 8002be0:	2218      	movs	r2, #24
 8002be2:	4694      	mov	ip, r2
 8002be4:	44bc      	add	ip, r7
 8002be6:	4463      	add	r3, ip
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d822      	bhi.n	8002c34 <UART_SetConfig+0x3c4>
 8002bee:	009a      	lsls	r2, r3, #2
 8002bf0:	4b6a      	ldr	r3, [pc, #424]	; (8002d9c <UART_SetConfig+0x52c>)
 8002bf2:	18d3      	adds	r3, r2, r3
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f7ff fac0 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c00:	e022      	b.n	8002c48 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c02:	f7ff fad1 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8002c06:	0003      	movs	r3, r0
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c0a:	e01d      	b.n	8002c48 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c0c:	4b64      	ldr	r3, [pc, #400]	; (8002da0 <UART_SetConfig+0x530>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2210      	movs	r2, #16
 8002c12:	4013      	ands	r3, r2
 8002c14:	d002      	beq.n	8002c1c <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <UART_SetConfig+0x534>)
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c1a:	e015      	b.n	8002c48 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8002c1c:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <UART_SetConfig+0x538>)
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c20:	e012      	b.n	8002c48 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c22:	f7ff f9fb 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8002c26:	0003      	movs	r3, r0
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c2a:	e00d      	b.n	8002c48 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c32:	e009      	b.n	8002c48 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c38:	231a      	movs	r3, #26
 8002c3a:	2218      	movs	r2, #24
 8002c3c:	4694      	mov	ip, r2
 8002c3e:	44bc      	add	ip, r7
 8002c40:	4463      	add	r3, ip
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
        break;
 8002c46:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d100      	bne.n	8002c50 <UART_SetConfig+0x3e0>
 8002c4e:	e095      	b.n	8002d7c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	005a      	lsls	r2, r3, #1
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	18d2      	adds	r2, r2, r3
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0019      	movs	r1, r3
 8002c62:	0010      	movs	r0, r2
 8002c64:	f7fd fa5a 	bl	800011c <__udivsi3>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	2b0f      	cmp	r3, #15
 8002c72:	d921      	bls.n	8002cb8 <UART_SetConfig+0x448>
 8002c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	025b      	lsls	r3, r3, #9
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d21c      	bcs.n	8002cb8 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	200e      	movs	r0, #14
 8002c84:	2418      	movs	r4, #24
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	181b      	adds	r3, r3, r0
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2207      	movs	r2, #7
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b299      	uxth	r1, r3
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	181b      	adds	r3, r3, r0
 8002ca0:	193a      	adds	r2, r7, r4
 8002ca2:	1812      	adds	r2, r2, r0
 8002ca4:	8812      	ldrh	r2, [r2, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	193a      	adds	r2, r7, r4
 8002cb0:	1812      	adds	r2, r2, r0
 8002cb2:	8812      	ldrh	r2, [r2, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	e061      	b.n	8002d7c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb8:	231a      	movs	r3, #26
 8002cba:	2218      	movs	r2, #24
 8002cbc:	4694      	mov	ip, r2
 8002cbe:	44bc      	add	ip, r7
 8002cc0:	4463      	add	r3, ip
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e059      	b.n	8002d7c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cc8:	231b      	movs	r3, #27
 8002cca:	2218      	movs	r2, #24
 8002ccc:	4694      	mov	ip, r2
 8002cce:	44bc      	add	ip, r7
 8002cd0:	4463      	add	r3, ip
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d822      	bhi.n	8002d1e <UART_SetConfig+0x4ae>
 8002cd8:	009a      	lsls	r2, r3, #2
 8002cda:	4b34      	ldr	r3, [pc, #208]	; (8002dac <UART_SetConfig+0x53c>)
 8002cdc:	18d3      	adds	r3, r2, r3
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce2:	f7ff fa4b 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cea:	e022      	b.n	8002d32 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cec:	f7ff fa5c 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf4:	e01d      	b.n	8002d32 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cf6:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <UART_SetConfig+0x530>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2210      	movs	r2, #16
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d002      	beq.n	8002d06 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <UART_SetConfig+0x534>)
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d04:	e015      	b.n	8002d32 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002d06:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <UART_SetConfig+0x538>)
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d0a:	e012      	b.n	8002d32 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d0c:	f7ff f986 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8002d10:	0003      	movs	r3, r0
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d14:	e00d      	b.n	8002d32 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d1c:	e009      	b.n	8002d32 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d22:	231a      	movs	r3, #26
 8002d24:	2218      	movs	r2, #24
 8002d26:	4694      	mov	ip, r2
 8002d28:	44bc      	add	ip, r7
 8002d2a:	4463      	add	r3, ip
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
        break;
 8002d30:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d021      	beq.n	8002d7c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	085a      	lsrs	r2, r3, #1
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	18d2      	adds	r2, r2, r3
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	0019      	movs	r1, r3
 8002d48:	0010      	movs	r0, r2
 8002d4a:	f7fd f9e7 	bl	800011c <__udivsi3>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d909      	bls.n	8002d6e <UART_SetConfig+0x4fe>
 8002d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d204      	bcs.n	8002d6e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	e006      	b.n	8002d7c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d6e:	231a      	movs	r3, #26
 8002d70:	2218      	movs	r2, #24
 8002d72:	4694      	mov	ip, r2
 8002d74:	44bc      	add	ip, r7
 8002d76:	4463      	add	r3, ip
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2200      	movs	r2, #0
 8002d86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d88:	231a      	movs	r3, #26
 8002d8a:	2218      	movs	r2, #24
 8002d8c:	4694      	mov	ip, r2
 8002d8e:	44bc      	add	ip, r7
 8002d90:	4463      	add	r3, ip
 8002d92:	781b      	ldrb	r3, [r3, #0]
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b00e      	add	sp, #56	; 0x38
 8002d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9c:	080043d4 	.word	0x080043d4
 8002da0:	40021000 	.word	0x40021000
 8002da4:	003d0900 	.word	0x003d0900
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	080043f8 	.word	0x080043f8

08002db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d00b      	beq.n	8002dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a4a      	ldr	r2, [pc, #296]	; (8002ef4 <UART_AdvFeatureConfig+0x144>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	2202      	movs	r2, #2
 8002de0:	4013      	ands	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a43      	ldr	r2, [pc, #268]	; (8002ef8 <UART_AdvFeatureConfig+0x148>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	0019      	movs	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2204      	movs	r2, #4
 8002e02:	4013      	ands	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <UART_AdvFeatureConfig+0x14c>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2208      	movs	r2, #8
 8002e24:	4013      	ands	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <UART_AdvFeatureConfig+0x150>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2210      	movs	r2, #16
 8002e46:	4013      	ands	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a2c      	ldr	r2, [pc, #176]	; (8002f04 <UART_AdvFeatureConfig+0x154>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	2220      	movs	r2, #32
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d00b      	beq.n	8002e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <UART_AdvFeatureConfig+0x158>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	2240      	movs	r2, #64	; 0x40
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d01d      	beq.n	8002eca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <UART_AdvFeatureConfig+0x15c>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	035b      	lsls	r3, r3, #13
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d10b      	bne.n	8002eca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <UART_AdvFeatureConfig+0x160>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <UART_AdvFeatureConfig+0x164>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  }
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	fffdffff 	.word	0xfffdffff
 8002ef8:	fffeffff 	.word	0xfffeffff
 8002efc:	fffbffff 	.word	0xfffbffff
 8002f00:	ffff7fff 	.word	0xffff7fff
 8002f04:	ffffefff 	.word	0xffffefff
 8002f08:	ffffdfff 	.word	0xffffdfff
 8002f0c:	ffefffff 	.word	0xffefffff
 8002f10:	ff9fffff 	.word	0xff9fffff
 8002f14:	fff7ffff 	.word	0xfff7ffff

08002f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	2100      	movs	r1, #0
 8002f26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f28:	f7fe f89c 	bl	8001064 <HAL_GetTick>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2208      	movs	r2, #8
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d10c      	bne.n	8002f58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	0391      	lsls	r1, r2, #14
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <UART_CheckIdleState+0x8c>)
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f000 f82c 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d001      	beq.n	8002f58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e021      	b.n	8002f9c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d10c      	bne.n	8002f80 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	03d1      	lsls	r1, r2, #15
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <UART_CheckIdleState+0x8c>)
 8002f70:	9200      	str	r2, [sp, #0]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f000 f818 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e00d      	b.n	8002f9c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2274      	movs	r2, #116	; 0x74
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	01ffffff 	.word	0x01ffffff

08002fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb8:	e05e      	b.n	8003078 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	d05b      	beq.n	8003078 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc0:	f7fe f850 	bl	8001064 <HAL_GetTick>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11b      	bne.n	800300e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	492f      	ldr	r1, [pc, #188]	; (80030a0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	438a      	bics	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2274      	movs	r2, #116	; 0x74
 8003006:	2100      	movs	r1, #0
 8003008:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e044      	b.n	8003098 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2204      	movs	r2, #4
 8003016:	4013      	ands	r3, r2
 8003018:	d02e      	beq.n	8003078 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	401a      	ands	r2, r3
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	429a      	cmp	r2, r3
 800302c:	d124      	bne.n	8003078 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4917      	ldr	r1, [pc, #92]	; (80030a0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003044:	400a      	ands	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2101      	movs	r1, #1
 8003054:	438a      	bics	r2, r1
 8003056:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	2120      	movs	r1, #32
 800306a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2274      	movs	r2, #116	; 0x74
 8003070:	2100      	movs	r1, #0
 8003072:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e00f      	b.n	8003098 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	425a      	negs	r2, r3
 8003088:	4153      	adcs	r3, r2
 800308a:	b2db      	uxtb	r3, r3
 800308c:	001a      	movs	r2, r3
 800308e:	1dfb      	adds	r3, r7, #7
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d091      	beq.n	8002fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b004      	add	sp, #16
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	fffffe5f 	.word	0xfffffe5f

080030a4 <GPIO_WriteHigh>:
#define TM1638_COLOR_GREEN  2

uint8_t intensity = 7;
uint8_t displays = 8;

void GPIO_WriteHigh(uint16_t pin){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	0002      	movs	r2, r0
 80030ac:	1dbb      	adds	r3, r7, #6
 80030ae:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, pin, 1);
 80030b0:	1dbb      	adds	r3, r7, #6
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	4804      	ldr	r0, [pc, #16]	; (80030c8 <GPIO_WriteHigh+0x24>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	0019      	movs	r1, r3
 80030ba:	f7fe fa4e 	bl	800155a <HAL_GPIO_WritePin>
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b002      	add	sp, #8
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	50000400 	.word	0x50000400

080030cc <GPIO_WriteLow>:

void GPIO_WriteLow(uint16_t pin){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	0002      	movs	r2, r0
 80030d4:	1dbb      	adds	r3, r7, #6
 80030d6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, pin, 0);
 80030d8:	1dbb      	adds	r3, r7, #6
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	4804      	ldr	r0, [pc, #16]	; (80030f0 <GPIO_WriteLow+0x24>)
 80030de:	2200      	movs	r2, #0
 80030e0:	0019      	movs	r1, r3
 80030e2:	f7fe fa3a 	bl	800155a <HAL_GPIO_WritePin>
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	50000400 	.word	0x50000400

080030f4 <TM1638_DeInit>:

void TM1638_DeInit(	/*GPIO_TypeDef* displayPort,
										GPIO_Pin_TypeDef dataPin,
										GPIO_Pin_TypeDef clockPin,
										GPIO_Pin_TypeDef strobePin*/void){	
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
	uint8_t activateDisplay = 1;
 80030fa:	1dbb      	adds	r3, r7, #6
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 8003100:	1dfb      	adds	r3, r7, #7
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]

	
	GPIO_WriteHigh(STROBE);
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	0018      	movs	r0, r3
 800310c:	f7ff ffca 	bl	80030a4 <GPIO_WriteHigh>
	GPIO_WriteHigh(CLOCK);
 8003110:	2080      	movs	r0, #128	; 0x80
 8003112:	f7ff ffc7 	bl	80030a4 <GPIO_WriteHigh>
	
  sendCommand(0x40);
 8003116:	2040      	movs	r0, #64	; 0x40
 8003118:	f000 f892 	bl	8003240 <sendCommand>
  sendCommand(0x80 | (activateDisplay ? 8 : 0) | intensity);
 800311c:	1dbb      	adds	r3, r7, #6
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <TM1638_DeInit+0x36>
 8003124:	2378      	movs	r3, #120	; 0x78
 8003126:	425b      	negs	r3, r3
 8003128:	e001      	b.n	800312e <TM1638_DeInit+0x3a>
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	425b      	negs	r3, r3
 800312e:	4a15      	ldr	r2, [pc, #84]	; (8003184 <TM1638_DeInit+0x90>)
 8003130:	7812      	ldrb	r2, [r2, #0]
 8003132:	b252      	sxtb	r2, r2
 8003134:	4313      	orrs	r3, r2
 8003136:	b25b      	sxtb	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	0018      	movs	r0, r3
 800313c:	f000 f880 	bl	8003240 <sendCommand>
	
	GPIO_WriteLow(STROBE);
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	0018      	movs	r0, r3
 8003146:	f7ff ffc1 	bl	80030cc <GPIO_WriteLow>
  send(0xC0);
 800314a:	20c0      	movs	r0, #192	; 0xc0
 800314c:	f000 f8e1 	bl	8003312 <send>
  for (i=0; i<16; i++) {
 8003150:	1dfb      	adds	r3, r7, #7
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e007      	b.n	8003168 <TM1638_DeInit+0x74>
    send(0x00);
 8003158:	2000      	movs	r0, #0
 800315a:	f000 f8da 	bl	8003312 <send>
  for (i=0; i<16; i++) {
 800315e:	1dfb      	adds	r3, r7, #7
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	1dfb      	adds	r3, r7, #7
 8003164:	3201      	adds	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	1dfb      	adds	r3, r7, #7
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b0f      	cmp	r3, #15
 800316e:	d9f3      	bls.n	8003158 <TM1638_DeInit+0x64>
  }
	GPIO_WriteHigh(STROBE);
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	0018      	movs	r0, r3
 8003176:	f7ff ff95 	bl	80030a4 <GPIO_WriteHigh>
}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	46bd      	mov	sp, r7
 800317e:	b002      	add	sp, #8
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	20000011 	.word	0x20000011

08003188 <setDisplayToString>:
  for (i = 0; i<displays; i++) {
    sendData(i << 1, 0);
  }
}

void setDisplayToString(const char* string, const uint16_t dots, const uint8_t pos, const uint8_t font[]){
 8003188:	b5b0      	push	{r4, r5, r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	0008      	movs	r0, r1
 8003192:	0011      	movs	r1, r2
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	230a      	movs	r3, #10
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	1c02      	adds	r2, r0, #0
 800319c:	801a      	strh	r2, [r3, #0]
 800319e:	2309      	movs	r3, #9
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	1c0a      	adds	r2, r1, #0
 80031a4:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80031a6:	2117      	movs	r1, #23
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
  for (i = 0; i<displays - pos; i++) {
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
 80031b4:	e030      	b.n	8003218 <setDisplayToString+0x90>
  	if (string[i] != '\0') {
 80031b6:	2517      	movs	r5, #23
 80031b8:	197b      	adds	r3, r7, r5
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	18d3      	adds	r3, r2, r3
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d035      	beq.n	8003232 <setDisplayToString+0xaa>
			sendChar(i + pos, font[string[i] - 32], (dots & (1 << (displays - i - 1))) != 0);
 80031c6:	197a      	adds	r2, r7, r5
 80031c8:	2309      	movs	r3, #9
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	18d3      	adds	r3, r2, r3
 80031d2:	b2d8      	uxtb	r0, r3
 80031d4:	197b      	adds	r3, r7, r5
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	18d3      	adds	r3, r2, r3
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	3b20      	subs	r3, #32
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	18d3      	adds	r3, r2, r3
 80031e4:	7819      	ldrb	r1, [r3, #0]
 80031e6:	230a      	movs	r3, #10
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	881a      	ldrh	r2, [r3, #0]
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <setDisplayToString+0xb4>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	001c      	movs	r4, r3
 80031f2:	197b      	adds	r3, r7, r5
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	1ae3      	subs	r3, r4, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	411a      	asrs	r2, r3
 80031fc:	0013      	movs	r3, r2
 80031fe:	2201      	movs	r2, #1
 8003200:	4013      	ands	r3, r2
 8003202:	1e5a      	subs	r2, r3, #1
 8003204:	4193      	sbcs	r3, r2
 8003206:	b2db      	uxtb	r3, r3
 8003208:	001a      	movs	r2, r3
 800320a:	f000 f85a 	bl	80032c2 <sendChar>
  for (i = 0; i<displays - pos; i++) {
 800320e:	197b      	adds	r3, r7, r5
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	197b      	adds	r3, r7, r5
 8003214:	3201      	adds	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	2317      	movs	r3, #23
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	4b07      	ldr	r3, [pc, #28]	; (800323c <setDisplayToString+0xb4>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	0019      	movs	r1, r3
 8003224:	2309      	movs	r3, #9
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	1acb      	subs	r3, r1, r3
 800322c:	429a      	cmp	r2, r3
 800322e:	dbc2      	blt.n	80031b6 <setDisplayToString+0x2e>
		} else {
			break;
		}
  }
}
 8003230:	e000      	b.n	8003234 <setDisplayToString+0xac>
			break;
 8003232:	46c0      	nop			; (mov r8, r8)
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b006      	add	sp, #24
 800323a:	bdb0      	pop	{r4, r5, r7, pc}
 800323c:	20000012 	.word	0x20000012

08003240 <sendCommand>:
      break;
    }
  }
}*/

void sendCommand(uint8_t cmd){
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	0002      	movs	r2, r0
 8003248:	1dfb      	adds	r3, r7, #7
 800324a:	701a      	strb	r2, [r3, #0]
	GPIO_WriteLow(STROBE);
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	0018      	movs	r0, r3
 8003252:	f7ff ff3b 	bl	80030cc <GPIO_WriteLow>
  send(cmd);
 8003256:	1dfb      	adds	r3, r7, #7
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	0018      	movs	r0, r3
 800325c:	f000 f859 	bl	8003312 <send>
	GPIO_WriteHigh(STROBE);
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	0018      	movs	r0, r3
 8003266:	f7ff ff1d 	bl	80030a4 <GPIO_WriteHigh>
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b002      	add	sp, #8
 8003270:	bd80      	pop	{r7, pc}

08003272 <sendData>:

void sendData(uint8_t address, uint8_t data){
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	0002      	movs	r2, r0
 800327a:	1dfb      	adds	r3, r7, #7
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	1dbb      	adds	r3, r7, #6
 8003280:	1c0a      	adds	r2, r1, #0
 8003282:	701a      	strb	r2, [r3, #0]
  sendCommand(0x44);
 8003284:	2044      	movs	r0, #68	; 0x44
 8003286:	f7ff ffdb 	bl	8003240 <sendCommand>
	GPIO_WriteLow(STROBE);
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	0018      	movs	r0, r3
 8003290:	f7ff ff1c 	bl	80030cc <GPIO_WriteLow>
  send(0xC0 | address);
 8003294:	1dfb      	adds	r3, r7, #7
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2240      	movs	r2, #64	; 0x40
 800329a:	4252      	negs	r2, r2
 800329c:	4313      	orrs	r3, r2
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 f836 	bl	8003312 <send>
  send(data);
 80032a6:	1dbb      	adds	r3, r7, #6
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	0018      	movs	r0, r3
 80032ac:	f000 f831 	bl	8003312 <send>
	GPIO_WriteHigh(STROBE);
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7ff fef5 	bl	80030a4 <GPIO_WriteHigh>
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b002      	add	sp, #8
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <sendChar>:

void sendChar(uint8_t pos, uint8_t data, uint8_t dot){
 80032c2:	b590      	push	{r4, r7, lr}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	0004      	movs	r4, r0
 80032ca:	0008      	movs	r0, r1
 80032cc:	0011      	movs	r1, r2
 80032ce:	1dfb      	adds	r3, r7, #7
 80032d0:	1c22      	adds	r2, r4, #0
 80032d2:	701a      	strb	r2, [r3, #0]
 80032d4:	1dbb      	adds	r3, r7, #6
 80032d6:	1c02      	adds	r2, r0, #0
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	1d7b      	adds	r3, r7, #5
 80032dc:	1c0a      	adds	r2, r1, #0
 80032de:	701a      	strb	r2, [r3, #0]
	sendData(pos << 1, data | (dot ? 0b10000000 : 0));
 80032e0:	1dfb      	adds	r3, r7, #7
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	18db      	adds	r3, r3, r3
 80032e6:	b2d8      	uxtb	r0, r3
 80032e8:	1d7b      	adds	r3, r7, #5
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <sendChar+0x34>
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	425b      	negs	r3, r3
 80032f4:	e000      	b.n	80032f8 <sendChar+0x36>
 80032f6:	2300      	movs	r3, #0
 80032f8:	1dba      	adds	r2, r7, #6
 80032fa:	7812      	ldrb	r2, [r2, #0]
 80032fc:	b252      	sxtb	r2, r2
 80032fe:	4313      	orrs	r3, r2
 8003300:	b25b      	sxtb	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	0019      	movs	r1, r3
 8003306:	f7ff ffb4 	bl	8003272 <sendData>
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	b003      	add	sp, #12
 8003310:	bd90      	pop	{r4, r7, pc}

08003312 <send>:

void send(uint8_t data){
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	0002      	movs	r2, r0
 800331a:	1dfb      	adds	r3, r7, #7
 800331c:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 800331e:	210f      	movs	r1, #15
 8003320:	187b      	adds	r3, r7, r1
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
  for (i=0; i<8; i++) {
 8003326:	187b      	adds	r3, r7, r1
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e020      	b.n	8003370 <send+0x5e>
		GPIO_WriteLow(CLOCK);
 800332e:	2080      	movs	r0, #128	; 0x80
 8003330:	f7ff fecc 	bl	80030cc <GPIO_WriteLow>
		if (data & 1){
 8003334:	1dfb      	adds	r3, r7, #7
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	4013      	ands	r3, r2
 800333c:	d005      	beq.n	800334a <send+0x38>
			GPIO_WriteHigh(DATA);
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	0018      	movs	r0, r3
 8003344:	f7ff feae 	bl	80030a4 <GPIO_WriteHigh>
 8003348:	e004      	b.n	8003354 <send+0x42>
		} else {
			GPIO_WriteLow(DATA);
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	0018      	movs	r0, r3
 8003350:	f7ff febc 	bl	80030cc <GPIO_WriteLow>
		}
    data >>= 1;
 8003354:	1dfb      	adds	r3, r7, #7
 8003356:	1dfa      	adds	r2, r7, #7
 8003358:	7812      	ldrb	r2, [r2, #0]
 800335a:	0852      	lsrs	r2, r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
		GPIO_WriteHigh(CLOCK);
 800335e:	2080      	movs	r0, #128	; 0x80
 8003360:	f7ff fea0 	bl	80030a4 <GPIO_WriteHigh>
  for (i=0; i<8; i++) {
 8003364:	210f      	movs	r1, #15
 8003366:	187b      	adds	r3, r7, r1
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	187b      	adds	r3, r7, r1
 800336c:	3201      	adds	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	230f      	movs	r3, #15
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b07      	cmp	r3, #7
 8003378:	d9d9      	bls.n	800332e <send+0x1c>
  }
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b004      	add	sp, #16
 8003382:	bd80      	pop	{r7, pc}

08003384 <__errno>:
 8003384:	4b01      	ldr	r3, [pc, #4]	; (800338c <__errno+0x8>)
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	4770      	bx	lr
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	20000014 	.word	0x20000014

08003390 <__libc_init_array>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	2600      	movs	r6, #0
 8003394:	4d0c      	ldr	r5, [pc, #48]	; (80033c8 <__libc_init_array+0x38>)
 8003396:	4c0d      	ldr	r4, [pc, #52]	; (80033cc <__libc_init_array+0x3c>)
 8003398:	1b64      	subs	r4, r4, r5
 800339a:	10a4      	asrs	r4, r4, #2
 800339c:	42a6      	cmp	r6, r4
 800339e:	d109      	bne.n	80033b4 <__libc_init_array+0x24>
 80033a0:	2600      	movs	r6, #0
 80033a2:	f000 ffbd 	bl	8004320 <_init>
 80033a6:	4d0a      	ldr	r5, [pc, #40]	; (80033d0 <__libc_init_array+0x40>)
 80033a8:	4c0a      	ldr	r4, [pc, #40]	; (80033d4 <__libc_init_array+0x44>)
 80033aa:	1b64      	subs	r4, r4, r5
 80033ac:	10a4      	asrs	r4, r4, #2
 80033ae:	42a6      	cmp	r6, r4
 80033b0:	d105      	bne.n	80033be <__libc_init_array+0x2e>
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	00b3      	lsls	r3, r6, #2
 80033b6:	58eb      	ldr	r3, [r5, r3]
 80033b8:	4798      	blx	r3
 80033ba:	3601      	adds	r6, #1
 80033bc:	e7ee      	b.n	800339c <__libc_init_array+0xc>
 80033be:	00b3      	lsls	r3, r6, #2
 80033c0:	58eb      	ldr	r3, [r5, r3]
 80033c2:	4798      	blx	r3
 80033c4:	3601      	adds	r6, #1
 80033c6:	e7f2      	b.n	80033ae <__libc_init_array+0x1e>
 80033c8:	080044bc 	.word	0x080044bc
 80033cc:	080044bc 	.word	0x080044bc
 80033d0:	080044bc 	.word	0x080044bc
 80033d4:	080044c0 	.word	0x080044c0

080033d8 <memset>:
 80033d8:	0003      	movs	r3, r0
 80033da:	1882      	adds	r2, r0, r2
 80033dc:	4293      	cmp	r3, r2
 80033de:	d100      	bne.n	80033e2 <memset+0xa>
 80033e0:	4770      	bx	lr
 80033e2:	7019      	strb	r1, [r3, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	e7f9      	b.n	80033dc <memset+0x4>

080033e8 <setvbuf>:
 80033e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ea:	001d      	movs	r5, r3
 80033ec:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <setvbuf+0x17c>)
 80033ee:	b085      	sub	sp, #20
 80033f0:	681e      	ldr	r6, [r3, #0]
 80033f2:	0004      	movs	r4, r0
 80033f4:	000f      	movs	r7, r1
 80033f6:	9200      	str	r2, [sp, #0]
 80033f8:	2e00      	cmp	r6, #0
 80033fa:	d005      	beq.n	8003408 <setvbuf+0x20>
 80033fc:	69b3      	ldr	r3, [r6, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <setvbuf+0x20>
 8003402:	0030      	movs	r0, r6
 8003404:	f000 fa06 	bl	8003814 <__sinit>
 8003408:	4b57      	ldr	r3, [pc, #348]	; (8003568 <setvbuf+0x180>)
 800340a:	429c      	cmp	r4, r3
 800340c:	d161      	bne.n	80034d2 <setvbuf+0xea>
 800340e:	6874      	ldr	r4, [r6, #4]
 8003410:	9b00      	ldr	r3, [sp, #0]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d005      	beq.n	8003422 <setvbuf+0x3a>
 8003416:	2b01      	cmp	r3, #1
 8003418:	d900      	bls.n	800341c <setvbuf+0x34>
 800341a:	e09d      	b.n	8003558 <setvbuf+0x170>
 800341c:	2d00      	cmp	r5, #0
 800341e:	da00      	bge.n	8003422 <setvbuf+0x3a>
 8003420:	e09a      	b.n	8003558 <setvbuf+0x170>
 8003422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003424:	07db      	lsls	r3, r3, #31
 8003426:	d405      	bmi.n	8003434 <setvbuf+0x4c>
 8003428:	89a3      	ldrh	r3, [r4, #12]
 800342a:	059b      	lsls	r3, r3, #22
 800342c:	d402      	bmi.n	8003434 <setvbuf+0x4c>
 800342e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003430:	f000 fa91 	bl	8003956 <__retarget_lock_acquire_recursive>
 8003434:	0021      	movs	r1, r4
 8003436:	0030      	movs	r0, r6
 8003438:	f000 f94a 	bl	80036d0 <_fflush_r>
 800343c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800343e:	2900      	cmp	r1, #0
 8003440:	d008      	beq.n	8003454 <setvbuf+0x6c>
 8003442:	0023      	movs	r3, r4
 8003444:	3344      	adds	r3, #68	; 0x44
 8003446:	4299      	cmp	r1, r3
 8003448:	d002      	beq.n	8003450 <setvbuf+0x68>
 800344a:	0030      	movs	r0, r6
 800344c:	f000 fab8 	bl	80039c0 <_free_r>
 8003450:	2300      	movs	r3, #0
 8003452:	6363      	str	r3, [r4, #52]	; 0x34
 8003454:	2300      	movs	r3, #0
 8003456:	61a3      	str	r3, [r4, #24]
 8003458:	6063      	str	r3, [r4, #4]
 800345a:	89a3      	ldrh	r3, [r4, #12]
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	d503      	bpl.n	8003468 <setvbuf+0x80>
 8003460:	0030      	movs	r0, r6
 8003462:	6921      	ldr	r1, [r4, #16]
 8003464:	f000 faac 	bl	80039c0 <_free_r>
 8003468:	89a3      	ldrh	r3, [r4, #12]
 800346a:	4a40      	ldr	r2, [pc, #256]	; (800356c <setvbuf+0x184>)
 800346c:	4013      	ands	r3, r2
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	9b00      	ldr	r3, [sp, #0]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d100      	bne.n	8003478 <setvbuf+0x90>
 8003476:	e069      	b.n	800354c <setvbuf+0x164>
 8003478:	ab03      	add	r3, sp, #12
 800347a:	0021      	movs	r1, r4
 800347c:	0030      	movs	r0, r6
 800347e:	aa02      	add	r2, sp, #8
 8003480:	f000 fa6c 	bl	800395c <__swhatbuf_r>
 8003484:	89a3      	ldrh	r3, [r4, #12]
 8003486:	4303      	orrs	r3, r0
 8003488:	81a3      	strh	r3, [r4, #12]
 800348a:	2d00      	cmp	r5, #0
 800348c:	d12b      	bne.n	80034e6 <setvbuf+0xfe>
 800348e:	9d02      	ldr	r5, [sp, #8]
 8003490:	0028      	movs	r0, r5
 8003492:	f000 fa8b 	bl	80039ac <malloc>
 8003496:	1e07      	subs	r7, r0, #0
 8003498:	d153      	bne.n	8003542 <setvbuf+0x15a>
 800349a:	9b02      	ldr	r3, [sp, #8]
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	42ab      	cmp	r3, r5
 80034a0:	d149      	bne.n	8003536 <setvbuf+0x14e>
 80034a2:	2501      	movs	r5, #1
 80034a4:	426d      	negs	r5, r5
 80034a6:	2302      	movs	r3, #2
 80034a8:	89a2      	ldrh	r2, [r4, #12]
 80034aa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80034ac:	4313      	orrs	r3, r2
 80034ae:	2200      	movs	r2, #0
 80034b0:	60a2      	str	r2, [r4, #8]
 80034b2:	0022      	movs	r2, r4
 80034b4:	3247      	adds	r2, #71	; 0x47
 80034b6:	6022      	str	r2, [r4, #0]
 80034b8:	6122      	str	r2, [r4, #16]
 80034ba:	2201      	movs	r2, #1
 80034bc:	b21b      	sxth	r3, r3
 80034be:	81a3      	strh	r3, [r4, #12]
 80034c0:	6162      	str	r2, [r4, #20]
 80034c2:	4211      	tst	r1, r2
 80034c4:	d134      	bne.n	8003530 <setvbuf+0x148>
 80034c6:	059b      	lsls	r3, r3, #22
 80034c8:	d432      	bmi.n	8003530 <setvbuf+0x148>
 80034ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034cc:	f000 fa44 	bl	8003958 <__retarget_lock_release_recursive>
 80034d0:	e02e      	b.n	8003530 <setvbuf+0x148>
 80034d2:	4b27      	ldr	r3, [pc, #156]	; (8003570 <setvbuf+0x188>)
 80034d4:	429c      	cmp	r4, r3
 80034d6:	d101      	bne.n	80034dc <setvbuf+0xf4>
 80034d8:	68b4      	ldr	r4, [r6, #8]
 80034da:	e799      	b.n	8003410 <setvbuf+0x28>
 80034dc:	4b25      	ldr	r3, [pc, #148]	; (8003574 <setvbuf+0x18c>)
 80034de:	429c      	cmp	r4, r3
 80034e0:	d196      	bne.n	8003410 <setvbuf+0x28>
 80034e2:	68f4      	ldr	r4, [r6, #12]
 80034e4:	e794      	b.n	8003410 <setvbuf+0x28>
 80034e6:	2f00      	cmp	r7, #0
 80034e8:	d0d2      	beq.n	8003490 <setvbuf+0xa8>
 80034ea:	69b3      	ldr	r3, [r6, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <setvbuf+0x10e>
 80034f0:	0030      	movs	r0, r6
 80034f2:	f000 f98f 	bl	8003814 <__sinit>
 80034f6:	9b00      	ldr	r3, [sp, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d102      	bne.n	8003502 <setvbuf+0x11a>
 80034fc:	89a2      	ldrh	r2, [r4, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	89a2      	ldrh	r2, [r4, #12]
 8003504:	2308      	movs	r3, #8
 8003506:	0011      	movs	r1, r2
 8003508:	6027      	str	r7, [r4, #0]
 800350a:	6127      	str	r7, [r4, #16]
 800350c:	6165      	str	r5, [r4, #20]
 800350e:	4019      	ands	r1, r3
 8003510:	421a      	tst	r2, r3
 8003512:	d01f      	beq.n	8003554 <setvbuf+0x16c>
 8003514:	07d3      	lsls	r3, r2, #31
 8003516:	d51b      	bpl.n	8003550 <setvbuf+0x168>
 8003518:	2300      	movs	r3, #0
 800351a:	426d      	negs	r5, r5
 800351c:	60a3      	str	r3, [r4, #8]
 800351e:	61a5      	str	r5, [r4, #24]
 8003520:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003522:	2301      	movs	r3, #1
 8003524:	000d      	movs	r5, r1
 8003526:	401d      	ands	r5, r3
 8003528:	4219      	tst	r1, r3
 800352a:	d118      	bne.n	800355e <setvbuf+0x176>
 800352c:	0593      	lsls	r3, r2, #22
 800352e:	d5cc      	bpl.n	80034ca <setvbuf+0xe2>
 8003530:	0028      	movs	r0, r5
 8003532:	b005      	add	sp, #20
 8003534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003536:	9801      	ldr	r0, [sp, #4]
 8003538:	f000 fa38 	bl	80039ac <malloc>
 800353c:	9d01      	ldr	r5, [sp, #4]
 800353e:	1e07      	subs	r7, r0, #0
 8003540:	d0af      	beq.n	80034a2 <setvbuf+0xba>
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	89a2      	ldrh	r2, [r4, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	81a3      	strh	r3, [r4, #12]
 800354a:	e7ce      	b.n	80034ea <setvbuf+0x102>
 800354c:	2500      	movs	r5, #0
 800354e:	e7aa      	b.n	80034a6 <setvbuf+0xbe>
 8003550:	60a5      	str	r5, [r4, #8]
 8003552:	e7e5      	b.n	8003520 <setvbuf+0x138>
 8003554:	60a1      	str	r1, [r4, #8]
 8003556:	e7e3      	b.n	8003520 <setvbuf+0x138>
 8003558:	2501      	movs	r5, #1
 800355a:	426d      	negs	r5, r5
 800355c:	e7e8      	b.n	8003530 <setvbuf+0x148>
 800355e:	2500      	movs	r5, #0
 8003560:	e7e6      	b.n	8003530 <setvbuf+0x148>
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	20000014 	.word	0x20000014
 8003568:	08004440 	.word	0x08004440
 800356c:	fffff35c 	.word	0xfffff35c
 8003570:	08004460 	.word	0x08004460
 8003574:	08004420 	.word	0x08004420

08003578 <siprintf>:
 8003578:	b40e      	push	{r1, r2, r3}
 800357a:	b500      	push	{lr}
 800357c:	490b      	ldr	r1, [pc, #44]	; (80035ac <siprintf+0x34>)
 800357e:	b09c      	sub	sp, #112	; 0x70
 8003580:	ab1d      	add	r3, sp, #116	; 0x74
 8003582:	9002      	str	r0, [sp, #8]
 8003584:	9006      	str	r0, [sp, #24]
 8003586:	9107      	str	r1, [sp, #28]
 8003588:	9104      	str	r1, [sp, #16]
 800358a:	4809      	ldr	r0, [pc, #36]	; (80035b0 <siprintf+0x38>)
 800358c:	4909      	ldr	r1, [pc, #36]	; (80035b4 <siprintf+0x3c>)
 800358e:	cb04      	ldmia	r3!, {r2}
 8003590:	9105      	str	r1, [sp, #20]
 8003592:	6800      	ldr	r0, [r0, #0]
 8003594:	a902      	add	r1, sp, #8
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	f000 fb1c 	bl	8003bd4 <_svfiprintf_r>
 800359c:	2300      	movs	r3, #0
 800359e:	9a02      	ldr	r2, [sp, #8]
 80035a0:	7013      	strb	r3, [r2, #0]
 80035a2:	b01c      	add	sp, #112	; 0x70
 80035a4:	bc08      	pop	{r3}
 80035a6:	b003      	add	sp, #12
 80035a8:	4718      	bx	r3
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	7fffffff 	.word	0x7fffffff
 80035b0:	20000014 	.word	0x20000014
 80035b4:	ffff0208 	.word	0xffff0208

080035b8 <__sflush_r>:
 80035b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035ba:	898b      	ldrh	r3, [r1, #12]
 80035bc:	0005      	movs	r5, r0
 80035be:	000c      	movs	r4, r1
 80035c0:	071a      	lsls	r2, r3, #28
 80035c2:	d45f      	bmi.n	8003684 <__sflush_r+0xcc>
 80035c4:	684a      	ldr	r2, [r1, #4]
 80035c6:	2a00      	cmp	r2, #0
 80035c8:	dc04      	bgt.n	80035d4 <__sflush_r+0x1c>
 80035ca:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80035cc:	2a00      	cmp	r2, #0
 80035ce:	dc01      	bgt.n	80035d4 <__sflush_r+0x1c>
 80035d0:	2000      	movs	r0, #0
 80035d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80035d6:	2f00      	cmp	r7, #0
 80035d8:	d0fa      	beq.n	80035d0 <__sflush_r+0x18>
 80035da:	2200      	movs	r2, #0
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	682e      	ldr	r6, [r5, #0]
 80035e0:	602a      	str	r2, [r5, #0]
 80035e2:	001a      	movs	r2, r3
 80035e4:	0149      	lsls	r1, r1, #5
 80035e6:	400a      	ands	r2, r1
 80035e8:	420b      	tst	r3, r1
 80035ea:	d034      	beq.n	8003656 <__sflush_r+0x9e>
 80035ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	075b      	lsls	r3, r3, #29
 80035f2:	d506      	bpl.n	8003602 <__sflush_r+0x4a>
 80035f4:	6863      	ldr	r3, [r4, #4]
 80035f6:	1ac0      	subs	r0, r0, r3
 80035f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <__sflush_r+0x4a>
 80035fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003600:	1ac0      	subs	r0, r0, r3
 8003602:	0002      	movs	r2, r0
 8003604:	6a21      	ldr	r1, [r4, #32]
 8003606:	2300      	movs	r3, #0
 8003608:	0028      	movs	r0, r5
 800360a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800360c:	47b8      	blx	r7
 800360e:	89a1      	ldrh	r1, [r4, #12]
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	d106      	bne.n	8003622 <__sflush_r+0x6a>
 8003614:	682b      	ldr	r3, [r5, #0]
 8003616:	2b1d      	cmp	r3, #29
 8003618:	d831      	bhi.n	800367e <__sflush_r+0xc6>
 800361a:	4a2c      	ldr	r2, [pc, #176]	; (80036cc <__sflush_r+0x114>)
 800361c:	40da      	lsrs	r2, r3
 800361e:	07d3      	lsls	r3, r2, #31
 8003620:	d52d      	bpl.n	800367e <__sflush_r+0xc6>
 8003622:	2300      	movs	r3, #0
 8003624:	6063      	str	r3, [r4, #4]
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	04cb      	lsls	r3, r1, #19
 800362c:	d505      	bpl.n	800363a <__sflush_r+0x82>
 800362e:	1c43      	adds	r3, r0, #1
 8003630:	d102      	bne.n	8003638 <__sflush_r+0x80>
 8003632:	682b      	ldr	r3, [r5, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d100      	bne.n	800363a <__sflush_r+0x82>
 8003638:	6560      	str	r0, [r4, #84]	; 0x54
 800363a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800363c:	602e      	str	r6, [r5, #0]
 800363e:	2900      	cmp	r1, #0
 8003640:	d0c6      	beq.n	80035d0 <__sflush_r+0x18>
 8003642:	0023      	movs	r3, r4
 8003644:	3344      	adds	r3, #68	; 0x44
 8003646:	4299      	cmp	r1, r3
 8003648:	d002      	beq.n	8003650 <__sflush_r+0x98>
 800364a:	0028      	movs	r0, r5
 800364c:	f000 f9b8 	bl	80039c0 <_free_r>
 8003650:	2000      	movs	r0, #0
 8003652:	6360      	str	r0, [r4, #52]	; 0x34
 8003654:	e7bd      	b.n	80035d2 <__sflush_r+0x1a>
 8003656:	2301      	movs	r3, #1
 8003658:	0028      	movs	r0, r5
 800365a:	6a21      	ldr	r1, [r4, #32]
 800365c:	47b8      	blx	r7
 800365e:	1c43      	adds	r3, r0, #1
 8003660:	d1c5      	bne.n	80035ee <__sflush_r+0x36>
 8003662:	682b      	ldr	r3, [r5, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0c2      	beq.n	80035ee <__sflush_r+0x36>
 8003668:	2b1d      	cmp	r3, #29
 800366a:	d001      	beq.n	8003670 <__sflush_r+0xb8>
 800366c:	2b16      	cmp	r3, #22
 800366e:	d101      	bne.n	8003674 <__sflush_r+0xbc>
 8003670:	602e      	str	r6, [r5, #0]
 8003672:	e7ad      	b.n	80035d0 <__sflush_r+0x18>
 8003674:	2340      	movs	r3, #64	; 0x40
 8003676:	89a2      	ldrh	r2, [r4, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	e7a9      	b.n	80035d2 <__sflush_r+0x1a>
 800367e:	2340      	movs	r3, #64	; 0x40
 8003680:	430b      	orrs	r3, r1
 8003682:	e7fa      	b.n	800367a <__sflush_r+0xc2>
 8003684:	690f      	ldr	r7, [r1, #16]
 8003686:	2f00      	cmp	r7, #0
 8003688:	d0a2      	beq.n	80035d0 <__sflush_r+0x18>
 800368a:	680a      	ldr	r2, [r1, #0]
 800368c:	600f      	str	r7, [r1, #0]
 800368e:	1bd2      	subs	r2, r2, r7
 8003690:	9201      	str	r2, [sp, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	079b      	lsls	r3, r3, #30
 8003696:	d100      	bne.n	800369a <__sflush_r+0xe2>
 8003698:	694a      	ldr	r2, [r1, #20]
 800369a:	60a2      	str	r2, [r4, #8]
 800369c:	9b01      	ldr	r3, [sp, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	dc00      	bgt.n	80036a4 <__sflush_r+0xec>
 80036a2:	e795      	b.n	80035d0 <__sflush_r+0x18>
 80036a4:	003a      	movs	r2, r7
 80036a6:	0028      	movs	r0, r5
 80036a8:	9b01      	ldr	r3, [sp, #4]
 80036aa:	6a21      	ldr	r1, [r4, #32]
 80036ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036ae:	47b0      	blx	r6
 80036b0:	2800      	cmp	r0, #0
 80036b2:	dc06      	bgt.n	80036c2 <__sflush_r+0x10a>
 80036b4:	2340      	movs	r3, #64	; 0x40
 80036b6:	2001      	movs	r0, #1
 80036b8:	89a2      	ldrh	r2, [r4, #12]
 80036ba:	4240      	negs	r0, r0
 80036bc:	4313      	orrs	r3, r2
 80036be:	81a3      	strh	r3, [r4, #12]
 80036c0:	e787      	b.n	80035d2 <__sflush_r+0x1a>
 80036c2:	9b01      	ldr	r3, [sp, #4]
 80036c4:	183f      	adds	r7, r7, r0
 80036c6:	1a1b      	subs	r3, r3, r0
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	e7e7      	b.n	800369c <__sflush_r+0xe4>
 80036cc:	20400001 	.word	0x20400001

080036d0 <_fflush_r>:
 80036d0:	690b      	ldr	r3, [r1, #16]
 80036d2:	b570      	push	{r4, r5, r6, lr}
 80036d4:	0005      	movs	r5, r0
 80036d6:	000c      	movs	r4, r1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <_fflush_r+0x12>
 80036dc:	2500      	movs	r5, #0
 80036de:	0028      	movs	r0, r5
 80036e0:	bd70      	pop	{r4, r5, r6, pc}
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d004      	beq.n	80036f0 <_fflush_r+0x20>
 80036e6:	6983      	ldr	r3, [r0, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <_fflush_r+0x20>
 80036ec:	f000 f892 	bl	8003814 <__sinit>
 80036f0:	4b14      	ldr	r3, [pc, #80]	; (8003744 <_fflush_r+0x74>)
 80036f2:	429c      	cmp	r4, r3
 80036f4:	d11b      	bne.n	800372e <_fflush_r+0x5e>
 80036f6:	686c      	ldr	r4, [r5, #4]
 80036f8:	220c      	movs	r2, #12
 80036fa:	5ea3      	ldrsh	r3, [r4, r2]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ed      	beq.n	80036dc <_fflush_r+0xc>
 8003700:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003702:	07d2      	lsls	r2, r2, #31
 8003704:	d404      	bmi.n	8003710 <_fflush_r+0x40>
 8003706:	059b      	lsls	r3, r3, #22
 8003708:	d402      	bmi.n	8003710 <_fflush_r+0x40>
 800370a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800370c:	f000 f923 	bl	8003956 <__retarget_lock_acquire_recursive>
 8003710:	0028      	movs	r0, r5
 8003712:	0021      	movs	r1, r4
 8003714:	f7ff ff50 	bl	80035b8 <__sflush_r>
 8003718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800371a:	0005      	movs	r5, r0
 800371c:	07db      	lsls	r3, r3, #31
 800371e:	d4de      	bmi.n	80036de <_fflush_r+0xe>
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	059b      	lsls	r3, r3, #22
 8003724:	d4db      	bmi.n	80036de <_fflush_r+0xe>
 8003726:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003728:	f000 f916 	bl	8003958 <__retarget_lock_release_recursive>
 800372c:	e7d7      	b.n	80036de <_fflush_r+0xe>
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <_fflush_r+0x78>)
 8003730:	429c      	cmp	r4, r3
 8003732:	d101      	bne.n	8003738 <_fflush_r+0x68>
 8003734:	68ac      	ldr	r4, [r5, #8]
 8003736:	e7df      	b.n	80036f8 <_fflush_r+0x28>
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <_fflush_r+0x7c>)
 800373a:	429c      	cmp	r4, r3
 800373c:	d1dc      	bne.n	80036f8 <_fflush_r+0x28>
 800373e:	68ec      	ldr	r4, [r5, #12]
 8003740:	e7da      	b.n	80036f8 <_fflush_r+0x28>
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	08004440 	.word	0x08004440
 8003748:	08004460 	.word	0x08004460
 800374c:	08004420 	.word	0x08004420

08003750 <std>:
 8003750:	2300      	movs	r3, #0
 8003752:	b510      	push	{r4, lr}
 8003754:	0004      	movs	r4, r0
 8003756:	6003      	str	r3, [r0, #0]
 8003758:	6043      	str	r3, [r0, #4]
 800375a:	6083      	str	r3, [r0, #8]
 800375c:	8181      	strh	r1, [r0, #12]
 800375e:	6643      	str	r3, [r0, #100]	; 0x64
 8003760:	0019      	movs	r1, r3
 8003762:	81c2      	strh	r2, [r0, #14]
 8003764:	6103      	str	r3, [r0, #16]
 8003766:	6143      	str	r3, [r0, #20]
 8003768:	6183      	str	r3, [r0, #24]
 800376a:	2208      	movs	r2, #8
 800376c:	305c      	adds	r0, #92	; 0x5c
 800376e:	f7ff fe33 	bl	80033d8 <memset>
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <std+0x38>)
 8003774:	6263      	str	r3, [r4, #36]	; 0x24
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <std+0x3c>)
 8003778:	6224      	str	r4, [r4, #32]
 800377a:	62a3      	str	r3, [r4, #40]	; 0x28
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <std+0x40>)
 800377e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <std+0x44>)
 8003782:	6323      	str	r3, [r4, #48]	; 0x30
 8003784:	bd10      	pop	{r4, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	080040fd 	.word	0x080040fd
 800378c:	08004125 	.word	0x08004125
 8003790:	0800415d 	.word	0x0800415d
 8003794:	08004189 	.word	0x08004189

08003798 <_cleanup_r>:
 8003798:	b510      	push	{r4, lr}
 800379a:	4902      	ldr	r1, [pc, #8]	; (80037a4 <_cleanup_r+0xc>)
 800379c:	f000 f8ba 	bl	8003914 <_fwalk_reent>
 80037a0:	bd10      	pop	{r4, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	080036d1 	.word	0x080036d1

080037a8 <__sfmoreglue>:
 80037a8:	b570      	push	{r4, r5, r6, lr}
 80037aa:	2568      	movs	r5, #104	; 0x68
 80037ac:	1e4a      	subs	r2, r1, #1
 80037ae:	4355      	muls	r5, r2
 80037b0:	000e      	movs	r6, r1
 80037b2:	0029      	movs	r1, r5
 80037b4:	3174      	adds	r1, #116	; 0x74
 80037b6:	f000 f94d 	bl	8003a54 <_malloc_r>
 80037ba:	1e04      	subs	r4, r0, #0
 80037bc:	d008      	beq.n	80037d0 <__sfmoreglue+0x28>
 80037be:	2100      	movs	r1, #0
 80037c0:	002a      	movs	r2, r5
 80037c2:	6001      	str	r1, [r0, #0]
 80037c4:	6046      	str	r6, [r0, #4]
 80037c6:	300c      	adds	r0, #12
 80037c8:	60a0      	str	r0, [r4, #8]
 80037ca:	3268      	adds	r2, #104	; 0x68
 80037cc:	f7ff fe04 	bl	80033d8 <memset>
 80037d0:	0020      	movs	r0, r4
 80037d2:	bd70      	pop	{r4, r5, r6, pc}

080037d4 <__sfp_lock_acquire>:
 80037d4:	b510      	push	{r4, lr}
 80037d6:	4802      	ldr	r0, [pc, #8]	; (80037e0 <__sfp_lock_acquire+0xc>)
 80037d8:	f000 f8bd 	bl	8003956 <__retarget_lock_acquire_recursive>
 80037dc:	bd10      	pop	{r4, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	200001a0 	.word	0x200001a0

080037e4 <__sfp_lock_release>:
 80037e4:	b510      	push	{r4, lr}
 80037e6:	4802      	ldr	r0, [pc, #8]	; (80037f0 <__sfp_lock_release+0xc>)
 80037e8:	f000 f8b6 	bl	8003958 <__retarget_lock_release_recursive>
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	200001a0 	.word	0x200001a0

080037f4 <__sinit_lock_acquire>:
 80037f4:	b510      	push	{r4, lr}
 80037f6:	4802      	ldr	r0, [pc, #8]	; (8003800 <__sinit_lock_acquire+0xc>)
 80037f8:	f000 f8ad 	bl	8003956 <__retarget_lock_acquire_recursive>
 80037fc:	bd10      	pop	{r4, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	2000019b 	.word	0x2000019b

08003804 <__sinit_lock_release>:
 8003804:	b510      	push	{r4, lr}
 8003806:	4802      	ldr	r0, [pc, #8]	; (8003810 <__sinit_lock_release+0xc>)
 8003808:	f000 f8a6 	bl	8003958 <__retarget_lock_release_recursive>
 800380c:	bd10      	pop	{r4, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	2000019b 	.word	0x2000019b

08003814 <__sinit>:
 8003814:	b513      	push	{r0, r1, r4, lr}
 8003816:	0004      	movs	r4, r0
 8003818:	f7ff ffec 	bl	80037f4 <__sinit_lock_acquire>
 800381c:	69a3      	ldr	r3, [r4, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <__sinit+0x14>
 8003822:	f7ff ffef 	bl	8003804 <__sinit_lock_release>
 8003826:	bd13      	pop	{r0, r1, r4, pc}
 8003828:	64a3      	str	r3, [r4, #72]	; 0x48
 800382a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800382c:	6523      	str	r3, [r4, #80]	; 0x50
 800382e:	4b13      	ldr	r3, [pc, #76]	; (800387c <__sinit+0x68>)
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <__sinit+0x6c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	62a2      	str	r2, [r4, #40]	; 0x28
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	42a3      	cmp	r3, r4
 800383a:	d101      	bne.n	8003840 <__sinit+0x2c>
 800383c:	2301      	movs	r3, #1
 800383e:	61a3      	str	r3, [r4, #24]
 8003840:	0020      	movs	r0, r4
 8003842:	f000 f81f 	bl	8003884 <__sfp>
 8003846:	6060      	str	r0, [r4, #4]
 8003848:	0020      	movs	r0, r4
 800384a:	f000 f81b 	bl	8003884 <__sfp>
 800384e:	60a0      	str	r0, [r4, #8]
 8003850:	0020      	movs	r0, r4
 8003852:	f000 f817 	bl	8003884 <__sfp>
 8003856:	2200      	movs	r2, #0
 8003858:	2104      	movs	r1, #4
 800385a:	60e0      	str	r0, [r4, #12]
 800385c:	6860      	ldr	r0, [r4, #4]
 800385e:	f7ff ff77 	bl	8003750 <std>
 8003862:	2201      	movs	r2, #1
 8003864:	2109      	movs	r1, #9
 8003866:	68a0      	ldr	r0, [r4, #8]
 8003868:	f7ff ff72 	bl	8003750 <std>
 800386c:	2202      	movs	r2, #2
 800386e:	2112      	movs	r1, #18
 8003870:	68e0      	ldr	r0, [r4, #12]
 8003872:	f7ff ff6d 	bl	8003750 <std>
 8003876:	2301      	movs	r3, #1
 8003878:	61a3      	str	r3, [r4, #24]
 800387a:	e7d2      	b.n	8003822 <__sinit+0xe>
 800387c:	0800441c 	.word	0x0800441c
 8003880:	08003799 	.word	0x08003799

08003884 <__sfp>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	0007      	movs	r7, r0
 8003888:	f7ff ffa4 	bl	80037d4 <__sfp_lock_acquire>
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <__sfp+0x88>)
 800388e:	681e      	ldr	r6, [r3, #0]
 8003890:	69b3      	ldr	r3, [r6, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <__sfp+0x18>
 8003896:	0030      	movs	r0, r6
 8003898:	f7ff ffbc 	bl	8003814 <__sinit>
 800389c:	3648      	adds	r6, #72	; 0x48
 800389e:	68b4      	ldr	r4, [r6, #8]
 80038a0:	6873      	ldr	r3, [r6, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	d504      	bpl.n	80038b0 <__sfp+0x2c>
 80038a6:	6833      	ldr	r3, [r6, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d022      	beq.n	80038f2 <__sfp+0x6e>
 80038ac:	6836      	ldr	r6, [r6, #0]
 80038ae:	e7f6      	b.n	800389e <__sfp+0x1a>
 80038b0:	220c      	movs	r2, #12
 80038b2:	5ea5      	ldrsh	r5, [r4, r2]
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	d11a      	bne.n	80038ee <__sfp+0x6a>
 80038b8:	0020      	movs	r0, r4
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <__sfp+0x8c>)
 80038bc:	3058      	adds	r0, #88	; 0x58
 80038be:	60e3      	str	r3, [r4, #12]
 80038c0:	6665      	str	r5, [r4, #100]	; 0x64
 80038c2:	f000 f847 	bl	8003954 <__retarget_lock_init_recursive>
 80038c6:	f7ff ff8d 	bl	80037e4 <__sfp_lock_release>
 80038ca:	0020      	movs	r0, r4
 80038cc:	2208      	movs	r2, #8
 80038ce:	0029      	movs	r1, r5
 80038d0:	6025      	str	r5, [r4, #0]
 80038d2:	60a5      	str	r5, [r4, #8]
 80038d4:	6065      	str	r5, [r4, #4]
 80038d6:	6125      	str	r5, [r4, #16]
 80038d8:	6165      	str	r5, [r4, #20]
 80038da:	61a5      	str	r5, [r4, #24]
 80038dc:	305c      	adds	r0, #92	; 0x5c
 80038de:	f7ff fd7b 	bl	80033d8 <memset>
 80038e2:	6365      	str	r5, [r4, #52]	; 0x34
 80038e4:	63a5      	str	r5, [r4, #56]	; 0x38
 80038e6:	64a5      	str	r5, [r4, #72]	; 0x48
 80038e8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80038ea:	0020      	movs	r0, r4
 80038ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ee:	3468      	adds	r4, #104	; 0x68
 80038f0:	e7d7      	b.n	80038a2 <__sfp+0x1e>
 80038f2:	2104      	movs	r1, #4
 80038f4:	0038      	movs	r0, r7
 80038f6:	f7ff ff57 	bl	80037a8 <__sfmoreglue>
 80038fa:	1e04      	subs	r4, r0, #0
 80038fc:	6030      	str	r0, [r6, #0]
 80038fe:	d1d5      	bne.n	80038ac <__sfp+0x28>
 8003900:	f7ff ff70 	bl	80037e4 <__sfp_lock_release>
 8003904:	230c      	movs	r3, #12
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	e7ef      	b.n	80038ea <__sfp+0x66>
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	0800441c 	.word	0x0800441c
 8003910:	ffff0001 	.word	0xffff0001

08003914 <_fwalk_reent>:
 8003914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003916:	0004      	movs	r4, r0
 8003918:	0006      	movs	r6, r0
 800391a:	2700      	movs	r7, #0
 800391c:	9101      	str	r1, [sp, #4]
 800391e:	3448      	adds	r4, #72	; 0x48
 8003920:	6863      	ldr	r3, [r4, #4]
 8003922:	68a5      	ldr	r5, [r4, #8]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	9b00      	ldr	r3, [sp, #0]
 8003928:	3b01      	subs	r3, #1
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	d504      	bpl.n	8003938 <_fwalk_reent+0x24>
 800392e:	6824      	ldr	r4, [r4, #0]
 8003930:	2c00      	cmp	r4, #0
 8003932:	d1f5      	bne.n	8003920 <_fwalk_reent+0xc>
 8003934:	0038      	movs	r0, r7
 8003936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003938:	89ab      	ldrh	r3, [r5, #12]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d908      	bls.n	8003950 <_fwalk_reent+0x3c>
 800393e:	220e      	movs	r2, #14
 8003940:	5eab      	ldrsh	r3, [r5, r2]
 8003942:	3301      	adds	r3, #1
 8003944:	d004      	beq.n	8003950 <_fwalk_reent+0x3c>
 8003946:	0029      	movs	r1, r5
 8003948:	0030      	movs	r0, r6
 800394a:	9b01      	ldr	r3, [sp, #4]
 800394c:	4798      	blx	r3
 800394e:	4307      	orrs	r7, r0
 8003950:	3568      	adds	r5, #104	; 0x68
 8003952:	e7e8      	b.n	8003926 <_fwalk_reent+0x12>

08003954 <__retarget_lock_init_recursive>:
 8003954:	4770      	bx	lr

08003956 <__retarget_lock_acquire_recursive>:
 8003956:	4770      	bx	lr

08003958 <__retarget_lock_release_recursive>:
 8003958:	4770      	bx	lr
	...

0800395c <__swhatbuf_r>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	000e      	movs	r6, r1
 8003960:	001d      	movs	r5, r3
 8003962:	230e      	movs	r3, #14
 8003964:	5ec9      	ldrsh	r1, [r1, r3]
 8003966:	0014      	movs	r4, r2
 8003968:	b096      	sub	sp, #88	; 0x58
 800396a:	2900      	cmp	r1, #0
 800396c:	da07      	bge.n	800397e <__swhatbuf_r+0x22>
 800396e:	2300      	movs	r3, #0
 8003970:	602b      	str	r3, [r5, #0]
 8003972:	89b3      	ldrh	r3, [r6, #12]
 8003974:	061b      	lsls	r3, r3, #24
 8003976:	d411      	bmi.n	800399c <__swhatbuf_r+0x40>
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	e00f      	b.n	800399e <__swhatbuf_r+0x42>
 800397e:	466a      	mov	r2, sp
 8003980:	f000 fc2e 	bl	80041e0 <_fstat_r>
 8003984:	2800      	cmp	r0, #0
 8003986:	dbf2      	blt.n	800396e <__swhatbuf_r+0x12>
 8003988:	23f0      	movs	r3, #240	; 0xf0
 800398a:	9901      	ldr	r1, [sp, #4]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	4019      	ands	r1, r3
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <__swhatbuf_r+0x4c>)
 8003992:	18c9      	adds	r1, r1, r3
 8003994:	424b      	negs	r3, r1
 8003996:	4159      	adcs	r1, r3
 8003998:	6029      	str	r1, [r5, #0]
 800399a:	e7ed      	b.n	8003978 <__swhatbuf_r+0x1c>
 800399c:	2340      	movs	r3, #64	; 0x40
 800399e:	2000      	movs	r0, #0
 80039a0:	6023      	str	r3, [r4, #0]
 80039a2:	b016      	add	sp, #88	; 0x58
 80039a4:	bd70      	pop	{r4, r5, r6, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	ffffe000 	.word	0xffffe000

080039ac <malloc>:
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4b03      	ldr	r3, [pc, #12]	; (80039bc <malloc+0x10>)
 80039b0:	0001      	movs	r1, r0
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	f000 f84e 	bl	8003a54 <_malloc_r>
 80039b8:	bd10      	pop	{r4, pc}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	20000014 	.word	0x20000014

080039c0 <_free_r>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	0005      	movs	r5, r0
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d010      	beq.n	80039ea <_free_r+0x2a>
 80039c8:	1f0c      	subs	r4, r1, #4
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	da00      	bge.n	80039d2 <_free_r+0x12>
 80039d0:	18e4      	adds	r4, r4, r3
 80039d2:	0028      	movs	r0, r5
 80039d4:	f000 fc52 	bl	800427c <__malloc_lock>
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <_free_r+0x90>)
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <_free_r+0x2c>
 80039e0:	6063      	str	r3, [r4, #4]
 80039e2:	6014      	str	r4, [r2, #0]
 80039e4:	0028      	movs	r0, r5
 80039e6:	f000 fc51 	bl	800428c <__malloc_unlock>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	d908      	bls.n	8003a02 <_free_r+0x42>
 80039f0:	6821      	ldr	r1, [r4, #0]
 80039f2:	1860      	adds	r0, r4, r1
 80039f4:	4283      	cmp	r3, r0
 80039f6:	d1f3      	bne.n	80039e0 <_free_r+0x20>
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	1841      	adds	r1, r0, r1
 80039fe:	6021      	str	r1, [r4, #0]
 8003a00:	e7ee      	b.n	80039e0 <_free_r+0x20>
 8003a02:	001a      	movs	r2, r3
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <_free_r+0x4e>
 8003a0a:	42a3      	cmp	r3, r4
 8003a0c:	d9f9      	bls.n	8003a02 <_free_r+0x42>
 8003a0e:	6811      	ldr	r1, [r2, #0]
 8003a10:	1850      	adds	r0, r2, r1
 8003a12:	42a0      	cmp	r0, r4
 8003a14:	d10b      	bne.n	8003a2e <_free_r+0x6e>
 8003a16:	6820      	ldr	r0, [r4, #0]
 8003a18:	1809      	adds	r1, r1, r0
 8003a1a:	1850      	adds	r0, r2, r1
 8003a1c:	6011      	str	r1, [r2, #0]
 8003a1e:	4283      	cmp	r3, r0
 8003a20:	d1e0      	bne.n	80039e4 <_free_r+0x24>
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	1841      	adds	r1, r0, r1
 8003a28:	6011      	str	r1, [r2, #0]
 8003a2a:	6053      	str	r3, [r2, #4]
 8003a2c:	e7da      	b.n	80039e4 <_free_r+0x24>
 8003a2e:	42a0      	cmp	r0, r4
 8003a30:	d902      	bls.n	8003a38 <_free_r+0x78>
 8003a32:	230c      	movs	r3, #12
 8003a34:	602b      	str	r3, [r5, #0]
 8003a36:	e7d5      	b.n	80039e4 <_free_r+0x24>
 8003a38:	6821      	ldr	r1, [r4, #0]
 8003a3a:	1860      	adds	r0, r4, r1
 8003a3c:	4283      	cmp	r3, r0
 8003a3e:	d103      	bne.n	8003a48 <_free_r+0x88>
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	1841      	adds	r1, r0, r1
 8003a46:	6021      	str	r1, [r4, #0]
 8003a48:	6063      	str	r3, [r4, #4]
 8003a4a:	6054      	str	r4, [r2, #4]
 8003a4c:	e7ca      	b.n	80039e4 <_free_r+0x24>
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	200000a8 	.word	0x200000a8

08003a54 <_malloc_r>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	2303      	movs	r3, #3
 8003a58:	1ccd      	adds	r5, r1, #3
 8003a5a:	439d      	bics	r5, r3
 8003a5c:	3508      	adds	r5, #8
 8003a5e:	0006      	movs	r6, r0
 8003a60:	2d0c      	cmp	r5, #12
 8003a62:	d21f      	bcs.n	8003aa4 <_malloc_r+0x50>
 8003a64:	250c      	movs	r5, #12
 8003a66:	42a9      	cmp	r1, r5
 8003a68:	d81e      	bhi.n	8003aa8 <_malloc_r+0x54>
 8003a6a:	0030      	movs	r0, r6
 8003a6c:	f000 fc06 	bl	800427c <__malloc_lock>
 8003a70:	4925      	ldr	r1, [pc, #148]	; (8003b08 <_malloc_r+0xb4>)
 8003a72:	680a      	ldr	r2, [r1, #0]
 8003a74:	0014      	movs	r4, r2
 8003a76:	2c00      	cmp	r4, #0
 8003a78:	d11a      	bne.n	8003ab0 <_malloc_r+0x5c>
 8003a7a:	4f24      	ldr	r7, [pc, #144]	; (8003b0c <_malloc_r+0xb8>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d104      	bne.n	8003a8c <_malloc_r+0x38>
 8003a82:	0021      	movs	r1, r4
 8003a84:	0030      	movs	r0, r6
 8003a86:	f000 fb27 	bl	80040d8 <_sbrk_r>
 8003a8a:	6038      	str	r0, [r7, #0]
 8003a8c:	0029      	movs	r1, r5
 8003a8e:	0030      	movs	r0, r6
 8003a90:	f000 fb22 	bl	80040d8 <_sbrk_r>
 8003a94:	1c43      	adds	r3, r0, #1
 8003a96:	d12b      	bne.n	8003af0 <_malloc_r+0x9c>
 8003a98:	230c      	movs	r3, #12
 8003a9a:	0030      	movs	r0, r6
 8003a9c:	6033      	str	r3, [r6, #0]
 8003a9e:	f000 fbf5 	bl	800428c <__malloc_unlock>
 8003aa2:	e003      	b.n	8003aac <_malloc_r+0x58>
 8003aa4:	2d00      	cmp	r5, #0
 8003aa6:	dade      	bge.n	8003a66 <_malloc_r+0x12>
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	6033      	str	r3, [r6, #0]
 8003aac:	2000      	movs	r0, #0
 8003aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	1b5b      	subs	r3, r3, r5
 8003ab4:	d419      	bmi.n	8003aea <_malloc_r+0x96>
 8003ab6:	2b0b      	cmp	r3, #11
 8003ab8:	d903      	bls.n	8003ac2 <_malloc_r+0x6e>
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	18e4      	adds	r4, r4, r3
 8003abe:	6025      	str	r5, [r4, #0]
 8003ac0:	e003      	b.n	8003aca <_malloc_r+0x76>
 8003ac2:	6863      	ldr	r3, [r4, #4]
 8003ac4:	42a2      	cmp	r2, r4
 8003ac6:	d10e      	bne.n	8003ae6 <_malloc_r+0x92>
 8003ac8:	600b      	str	r3, [r1, #0]
 8003aca:	0030      	movs	r0, r6
 8003acc:	f000 fbde 	bl	800428c <__malloc_unlock>
 8003ad0:	0020      	movs	r0, r4
 8003ad2:	2207      	movs	r2, #7
 8003ad4:	300b      	adds	r0, #11
 8003ad6:	1d23      	adds	r3, r4, #4
 8003ad8:	4390      	bics	r0, r2
 8003ada:	1ac2      	subs	r2, r0, r3
 8003adc:	4298      	cmp	r0, r3
 8003ade:	d0e6      	beq.n	8003aae <_malloc_r+0x5a>
 8003ae0:	1a1b      	subs	r3, r3, r0
 8003ae2:	50a3      	str	r3, [r4, r2]
 8003ae4:	e7e3      	b.n	8003aae <_malloc_r+0x5a>
 8003ae6:	6053      	str	r3, [r2, #4]
 8003ae8:	e7ef      	b.n	8003aca <_malloc_r+0x76>
 8003aea:	0022      	movs	r2, r4
 8003aec:	6864      	ldr	r4, [r4, #4]
 8003aee:	e7c2      	b.n	8003a76 <_malloc_r+0x22>
 8003af0:	2303      	movs	r3, #3
 8003af2:	1cc4      	adds	r4, r0, #3
 8003af4:	439c      	bics	r4, r3
 8003af6:	42a0      	cmp	r0, r4
 8003af8:	d0e1      	beq.n	8003abe <_malloc_r+0x6a>
 8003afa:	1a21      	subs	r1, r4, r0
 8003afc:	0030      	movs	r0, r6
 8003afe:	f000 faeb 	bl	80040d8 <_sbrk_r>
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	d1db      	bne.n	8003abe <_malloc_r+0x6a>
 8003b06:	e7c7      	b.n	8003a98 <_malloc_r+0x44>
 8003b08:	200000a8 	.word	0x200000a8
 8003b0c:	200000ac 	.word	0x200000ac

08003b10 <__ssputs_r>:
 8003b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b12:	688e      	ldr	r6, [r1, #8]
 8003b14:	b085      	sub	sp, #20
 8003b16:	0007      	movs	r7, r0
 8003b18:	000c      	movs	r4, r1
 8003b1a:	9203      	str	r2, [sp, #12]
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	429e      	cmp	r6, r3
 8003b20:	d83c      	bhi.n	8003b9c <__ssputs_r+0x8c>
 8003b22:	2390      	movs	r3, #144	; 0x90
 8003b24:	898a      	ldrh	r2, [r1, #12]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	421a      	tst	r2, r3
 8003b2a:	d034      	beq.n	8003b96 <__ssputs_r+0x86>
 8003b2c:	2503      	movs	r5, #3
 8003b2e:	6909      	ldr	r1, [r1, #16]
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	1a5b      	subs	r3, r3, r1
 8003b34:	9302      	str	r3, [sp, #8]
 8003b36:	6963      	ldr	r3, [r4, #20]
 8003b38:	9802      	ldr	r0, [sp, #8]
 8003b3a:	435d      	muls	r5, r3
 8003b3c:	0feb      	lsrs	r3, r5, #31
 8003b3e:	195d      	adds	r5, r3, r5
 8003b40:	9b01      	ldr	r3, [sp, #4]
 8003b42:	106d      	asrs	r5, r5, #1
 8003b44:	3301      	adds	r3, #1
 8003b46:	181b      	adds	r3, r3, r0
 8003b48:	42ab      	cmp	r3, r5
 8003b4a:	d900      	bls.n	8003b4e <__ssputs_r+0x3e>
 8003b4c:	001d      	movs	r5, r3
 8003b4e:	0553      	lsls	r3, r2, #21
 8003b50:	d532      	bpl.n	8003bb8 <__ssputs_r+0xa8>
 8003b52:	0029      	movs	r1, r5
 8003b54:	0038      	movs	r0, r7
 8003b56:	f7ff ff7d 	bl	8003a54 <_malloc_r>
 8003b5a:	1e06      	subs	r6, r0, #0
 8003b5c:	d109      	bne.n	8003b72 <__ssputs_r+0x62>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	2340      	movs	r3, #64	; 0x40
 8003b64:	2001      	movs	r0, #1
 8003b66:	89a2      	ldrh	r2, [r4, #12]
 8003b68:	4240      	negs	r0, r0
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	b005      	add	sp, #20
 8003b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b72:	9a02      	ldr	r2, [sp, #8]
 8003b74:	6921      	ldr	r1, [r4, #16]
 8003b76:	f000 fb64 	bl	8004242 <memcpy>
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <__ssputs_r+0xc0>)
 8003b7e:	401a      	ands	r2, r3
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	4313      	orrs	r3, r2
 8003b84:	81a3      	strh	r3, [r4, #12]
 8003b86:	9b02      	ldr	r3, [sp, #8]
 8003b88:	6126      	str	r6, [r4, #16]
 8003b8a:	18f6      	adds	r6, r6, r3
 8003b8c:	6026      	str	r6, [r4, #0]
 8003b8e:	6165      	str	r5, [r4, #20]
 8003b90:	9e01      	ldr	r6, [sp, #4]
 8003b92:	1aed      	subs	r5, r5, r3
 8003b94:	60a5      	str	r5, [r4, #8]
 8003b96:	9b01      	ldr	r3, [sp, #4]
 8003b98:	429e      	cmp	r6, r3
 8003b9a:	d900      	bls.n	8003b9e <__ssputs_r+0x8e>
 8003b9c:	9e01      	ldr	r6, [sp, #4]
 8003b9e:	0032      	movs	r2, r6
 8003ba0:	9903      	ldr	r1, [sp, #12]
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	f000 fb56 	bl	8004254 <memmove>
 8003ba8:	68a3      	ldr	r3, [r4, #8]
 8003baa:	2000      	movs	r0, #0
 8003bac:	1b9b      	subs	r3, r3, r6
 8003bae:	60a3      	str	r3, [r4, #8]
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	199e      	adds	r6, r3, r6
 8003bb4:	6026      	str	r6, [r4, #0]
 8003bb6:	e7da      	b.n	8003b6e <__ssputs_r+0x5e>
 8003bb8:	002a      	movs	r2, r5
 8003bba:	0038      	movs	r0, r7
 8003bbc:	f000 fb6e 	bl	800429c <_realloc_r>
 8003bc0:	1e06      	subs	r6, r0, #0
 8003bc2:	d1e0      	bne.n	8003b86 <__ssputs_r+0x76>
 8003bc4:	0038      	movs	r0, r7
 8003bc6:	6921      	ldr	r1, [r4, #16]
 8003bc8:	f7ff fefa 	bl	80039c0 <_free_r>
 8003bcc:	e7c7      	b.n	8003b5e <__ssputs_r+0x4e>
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	fffffb7f 	.word	0xfffffb7f

08003bd4 <_svfiprintf_r>:
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd6:	b0a1      	sub	sp, #132	; 0x84
 8003bd8:	9003      	str	r0, [sp, #12]
 8003bda:	001d      	movs	r5, r3
 8003bdc:	898b      	ldrh	r3, [r1, #12]
 8003bde:	000f      	movs	r7, r1
 8003be0:	0016      	movs	r6, r2
 8003be2:	061b      	lsls	r3, r3, #24
 8003be4:	d511      	bpl.n	8003c0a <_svfiprintf_r+0x36>
 8003be6:	690b      	ldr	r3, [r1, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10e      	bne.n	8003c0a <_svfiprintf_r+0x36>
 8003bec:	2140      	movs	r1, #64	; 0x40
 8003bee:	f7ff ff31 	bl	8003a54 <_malloc_r>
 8003bf2:	6038      	str	r0, [r7, #0]
 8003bf4:	6138      	str	r0, [r7, #16]
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	d105      	bne.n	8003c06 <_svfiprintf_r+0x32>
 8003bfa:	230c      	movs	r3, #12
 8003bfc:	9a03      	ldr	r2, [sp, #12]
 8003bfe:	3801      	subs	r0, #1
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	b021      	add	sp, #132	; 0x84
 8003c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c06:	2340      	movs	r3, #64	; 0x40
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	ac08      	add	r4, sp, #32
 8003c0e:	6163      	str	r3, [r4, #20]
 8003c10:	3320      	adds	r3, #32
 8003c12:	7663      	strb	r3, [r4, #25]
 8003c14:	3310      	adds	r3, #16
 8003c16:	76a3      	strb	r3, [r4, #26]
 8003c18:	9507      	str	r5, [sp, #28]
 8003c1a:	0035      	movs	r5, r6
 8003c1c:	782b      	ldrb	r3, [r5, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <_svfiprintf_r+0x52>
 8003c22:	2b25      	cmp	r3, #37	; 0x25
 8003c24:	d147      	bne.n	8003cb6 <_svfiprintf_r+0xe2>
 8003c26:	1bab      	subs	r3, r5, r6
 8003c28:	9305      	str	r3, [sp, #20]
 8003c2a:	42b5      	cmp	r5, r6
 8003c2c:	d00c      	beq.n	8003c48 <_svfiprintf_r+0x74>
 8003c2e:	0032      	movs	r2, r6
 8003c30:	0039      	movs	r1, r7
 8003c32:	9803      	ldr	r0, [sp, #12]
 8003c34:	f7ff ff6c 	bl	8003b10 <__ssputs_r>
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	d100      	bne.n	8003c3e <_svfiprintf_r+0x6a>
 8003c3c:	e0ae      	b.n	8003d9c <_svfiprintf_r+0x1c8>
 8003c3e:	6962      	ldr	r2, [r4, #20]
 8003c40:	9b05      	ldr	r3, [sp, #20]
 8003c42:	4694      	mov	ip, r2
 8003c44:	4463      	add	r3, ip
 8003c46:	6163      	str	r3, [r4, #20]
 8003c48:	782b      	ldrb	r3, [r5, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d100      	bne.n	8003c50 <_svfiprintf_r+0x7c>
 8003c4e:	e0a5      	b.n	8003d9c <_svfiprintf_r+0x1c8>
 8003c50:	2201      	movs	r2, #1
 8003c52:	2300      	movs	r3, #0
 8003c54:	4252      	negs	r2, r2
 8003c56:	6062      	str	r2, [r4, #4]
 8003c58:	a904      	add	r1, sp, #16
 8003c5a:	3254      	adds	r2, #84	; 0x54
 8003c5c:	1852      	adds	r2, r2, r1
 8003c5e:	1c6e      	adds	r6, r5, #1
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	60e3      	str	r3, [r4, #12]
 8003c64:	60a3      	str	r3, [r4, #8]
 8003c66:	7013      	strb	r3, [r2, #0]
 8003c68:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	7831      	ldrb	r1, [r6, #0]
 8003c6e:	4854      	ldr	r0, [pc, #336]	; (8003dc0 <_svfiprintf_r+0x1ec>)
 8003c70:	f000 fadc 	bl	800422c <memchr>
 8003c74:	1c75      	adds	r5, r6, #1
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d11f      	bne.n	8003cba <_svfiprintf_r+0xe6>
 8003c7a:	6822      	ldr	r2, [r4, #0]
 8003c7c:	06d3      	lsls	r3, r2, #27
 8003c7e:	d504      	bpl.n	8003c8a <_svfiprintf_r+0xb6>
 8003c80:	2353      	movs	r3, #83	; 0x53
 8003c82:	a904      	add	r1, sp, #16
 8003c84:	185b      	adds	r3, r3, r1
 8003c86:	2120      	movs	r1, #32
 8003c88:	7019      	strb	r1, [r3, #0]
 8003c8a:	0713      	lsls	r3, r2, #28
 8003c8c:	d504      	bpl.n	8003c98 <_svfiprintf_r+0xc4>
 8003c8e:	2353      	movs	r3, #83	; 0x53
 8003c90:	a904      	add	r1, sp, #16
 8003c92:	185b      	adds	r3, r3, r1
 8003c94:	212b      	movs	r1, #43	; 0x2b
 8003c96:	7019      	strb	r1, [r3, #0]
 8003c98:	7833      	ldrb	r3, [r6, #0]
 8003c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c9c:	d016      	beq.n	8003ccc <_svfiprintf_r+0xf8>
 8003c9e:	0035      	movs	r5, r6
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	200a      	movs	r0, #10
 8003ca4:	68e3      	ldr	r3, [r4, #12]
 8003ca6:	782a      	ldrb	r2, [r5, #0]
 8003ca8:	1c6e      	adds	r6, r5, #1
 8003caa:	3a30      	subs	r2, #48	; 0x30
 8003cac:	2a09      	cmp	r2, #9
 8003cae:	d94e      	bls.n	8003d4e <_svfiprintf_r+0x17a>
 8003cb0:	2900      	cmp	r1, #0
 8003cb2:	d111      	bne.n	8003cd8 <_svfiprintf_r+0x104>
 8003cb4:	e017      	b.n	8003ce6 <_svfiprintf_r+0x112>
 8003cb6:	3501      	adds	r5, #1
 8003cb8:	e7b0      	b.n	8003c1c <_svfiprintf_r+0x48>
 8003cba:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <_svfiprintf_r+0x1ec>)
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	1ac0      	subs	r0, r0, r3
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	4083      	lsls	r3, r0
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	002e      	movs	r6, r5
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	e7ce      	b.n	8003c6a <_svfiprintf_r+0x96>
 8003ccc:	9b07      	ldr	r3, [sp, #28]
 8003cce:	1d19      	adds	r1, r3, #4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	9107      	str	r1, [sp, #28]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	db01      	blt.n	8003cdc <_svfiprintf_r+0x108>
 8003cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cda:	e004      	b.n	8003ce6 <_svfiprintf_r+0x112>
 8003cdc:	425b      	negs	r3, r3
 8003cde:	60e3      	str	r3, [r4, #12]
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	782b      	ldrb	r3, [r5, #0]
 8003ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8003cea:	d10a      	bne.n	8003d02 <_svfiprintf_r+0x12e>
 8003cec:	786b      	ldrb	r3, [r5, #1]
 8003cee:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf0:	d135      	bne.n	8003d5e <_svfiprintf_r+0x18a>
 8003cf2:	9b07      	ldr	r3, [sp, #28]
 8003cf4:	3502      	adds	r5, #2
 8003cf6:	1d1a      	adds	r2, r3, #4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	9207      	str	r2, [sp, #28]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	db2b      	blt.n	8003d58 <_svfiprintf_r+0x184>
 8003d00:	9309      	str	r3, [sp, #36]	; 0x24
 8003d02:	4e30      	ldr	r6, [pc, #192]	; (8003dc4 <_svfiprintf_r+0x1f0>)
 8003d04:	2203      	movs	r2, #3
 8003d06:	0030      	movs	r0, r6
 8003d08:	7829      	ldrb	r1, [r5, #0]
 8003d0a:	f000 fa8f 	bl	800422c <memchr>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d006      	beq.n	8003d20 <_svfiprintf_r+0x14c>
 8003d12:	2340      	movs	r3, #64	; 0x40
 8003d14:	1b80      	subs	r0, r0, r6
 8003d16:	4083      	lsls	r3, r0
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	3501      	adds	r5, #1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	6023      	str	r3, [r4, #0]
 8003d20:	7829      	ldrb	r1, [r5, #0]
 8003d22:	2206      	movs	r2, #6
 8003d24:	4828      	ldr	r0, [pc, #160]	; (8003dc8 <_svfiprintf_r+0x1f4>)
 8003d26:	1c6e      	adds	r6, r5, #1
 8003d28:	7621      	strb	r1, [r4, #24]
 8003d2a:	f000 fa7f 	bl	800422c <memchr>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d03c      	beq.n	8003dac <_svfiprintf_r+0x1d8>
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <_svfiprintf_r+0x1f8>)
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d125      	bne.n	8003d84 <_svfiprintf_r+0x1b0>
 8003d38:	2207      	movs	r2, #7
 8003d3a:	9b07      	ldr	r3, [sp, #28]
 8003d3c:	3307      	adds	r3, #7
 8003d3e:	4393      	bics	r3, r2
 8003d40:	3308      	adds	r3, #8
 8003d42:	9307      	str	r3, [sp, #28]
 8003d44:	6963      	ldr	r3, [r4, #20]
 8003d46:	9a04      	ldr	r2, [sp, #16]
 8003d48:	189b      	adds	r3, r3, r2
 8003d4a:	6163      	str	r3, [r4, #20]
 8003d4c:	e765      	b.n	8003c1a <_svfiprintf_r+0x46>
 8003d4e:	4343      	muls	r3, r0
 8003d50:	0035      	movs	r5, r6
 8003d52:	2101      	movs	r1, #1
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	e7a6      	b.n	8003ca6 <_svfiprintf_r+0xd2>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	425b      	negs	r3, r3
 8003d5c:	e7d0      	b.n	8003d00 <_svfiprintf_r+0x12c>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	200a      	movs	r0, #10
 8003d62:	001a      	movs	r2, r3
 8003d64:	3501      	adds	r5, #1
 8003d66:	6063      	str	r3, [r4, #4]
 8003d68:	7829      	ldrb	r1, [r5, #0]
 8003d6a:	1c6e      	adds	r6, r5, #1
 8003d6c:	3930      	subs	r1, #48	; 0x30
 8003d6e:	2909      	cmp	r1, #9
 8003d70:	d903      	bls.n	8003d7a <_svfiprintf_r+0x1a6>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0c5      	beq.n	8003d02 <_svfiprintf_r+0x12e>
 8003d76:	9209      	str	r2, [sp, #36]	; 0x24
 8003d78:	e7c3      	b.n	8003d02 <_svfiprintf_r+0x12e>
 8003d7a:	4342      	muls	r2, r0
 8003d7c:	0035      	movs	r5, r6
 8003d7e:	2301      	movs	r3, #1
 8003d80:	1852      	adds	r2, r2, r1
 8003d82:	e7f1      	b.n	8003d68 <_svfiprintf_r+0x194>
 8003d84:	ab07      	add	r3, sp, #28
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	003a      	movs	r2, r7
 8003d8a:	0021      	movs	r1, r4
 8003d8c:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <_svfiprintf_r+0x1fc>)
 8003d8e:	9803      	ldr	r0, [sp, #12]
 8003d90:	e000      	b.n	8003d94 <_svfiprintf_r+0x1c0>
 8003d92:	bf00      	nop
 8003d94:	9004      	str	r0, [sp, #16]
 8003d96:	9b04      	ldr	r3, [sp, #16]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	d1d3      	bne.n	8003d44 <_svfiprintf_r+0x170>
 8003d9c:	89bb      	ldrh	r3, [r7, #12]
 8003d9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003da0:	065b      	lsls	r3, r3, #25
 8003da2:	d400      	bmi.n	8003da6 <_svfiprintf_r+0x1d2>
 8003da4:	e72d      	b.n	8003c02 <_svfiprintf_r+0x2e>
 8003da6:	2001      	movs	r0, #1
 8003da8:	4240      	negs	r0, r0
 8003daa:	e72a      	b.n	8003c02 <_svfiprintf_r+0x2e>
 8003dac:	ab07      	add	r3, sp, #28
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	003a      	movs	r2, r7
 8003db2:	0021      	movs	r1, r4
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <_svfiprintf_r+0x1fc>)
 8003db6:	9803      	ldr	r0, [sp, #12]
 8003db8:	f000 f87c 	bl	8003eb4 <_printf_i>
 8003dbc:	e7ea      	b.n	8003d94 <_svfiprintf_r+0x1c0>
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	08004480 	.word	0x08004480
 8003dc4:	08004486 	.word	0x08004486
 8003dc8:	0800448a 	.word	0x0800448a
 8003dcc:	00000000 	.word	0x00000000
 8003dd0:	08003b11 	.word	0x08003b11

08003dd4 <_printf_common>:
 8003dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dd6:	0015      	movs	r5, r2
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	688a      	ldr	r2, [r1, #8]
 8003ddc:	690b      	ldr	r3, [r1, #16]
 8003dde:	000c      	movs	r4, r1
 8003de0:	9000      	str	r0, [sp, #0]
 8003de2:	4293      	cmp	r3, r2
 8003de4:	da00      	bge.n	8003de8 <_printf_common+0x14>
 8003de6:	0013      	movs	r3, r2
 8003de8:	0022      	movs	r2, r4
 8003dea:	602b      	str	r3, [r5, #0]
 8003dec:	3243      	adds	r2, #67	; 0x43
 8003dee:	7812      	ldrb	r2, [r2, #0]
 8003df0:	2a00      	cmp	r2, #0
 8003df2:	d001      	beq.n	8003df8 <_printf_common+0x24>
 8003df4:	3301      	adds	r3, #1
 8003df6:	602b      	str	r3, [r5, #0]
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	069b      	lsls	r3, r3, #26
 8003dfc:	d502      	bpl.n	8003e04 <_printf_common+0x30>
 8003dfe:	682b      	ldr	r3, [r5, #0]
 8003e00:	3302      	adds	r3, #2
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	2306      	movs	r3, #6
 8003e08:	0017      	movs	r7, r2
 8003e0a:	401f      	ands	r7, r3
 8003e0c:	421a      	tst	r2, r3
 8003e0e:	d027      	beq.n	8003e60 <_printf_common+0x8c>
 8003e10:	0023      	movs	r3, r4
 8003e12:	3343      	adds	r3, #67	; 0x43
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	1e5a      	subs	r2, r3, #1
 8003e18:	4193      	sbcs	r3, r2
 8003e1a:	6822      	ldr	r2, [r4, #0]
 8003e1c:	0692      	lsls	r2, r2, #26
 8003e1e:	d430      	bmi.n	8003e82 <_printf_common+0xae>
 8003e20:	0022      	movs	r2, r4
 8003e22:	9901      	ldr	r1, [sp, #4]
 8003e24:	9800      	ldr	r0, [sp, #0]
 8003e26:	9e08      	ldr	r6, [sp, #32]
 8003e28:	3243      	adds	r2, #67	; 0x43
 8003e2a:	47b0      	blx	r6
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d025      	beq.n	8003e7c <_printf_common+0xa8>
 8003e30:	2306      	movs	r3, #6
 8003e32:	6820      	ldr	r0, [r4, #0]
 8003e34:	682a      	ldr	r2, [r5, #0]
 8003e36:	68e1      	ldr	r1, [r4, #12]
 8003e38:	2500      	movs	r5, #0
 8003e3a:	4003      	ands	r3, r0
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d103      	bne.n	8003e48 <_printf_common+0x74>
 8003e40:	1a8d      	subs	r5, r1, r2
 8003e42:	43eb      	mvns	r3, r5
 8003e44:	17db      	asrs	r3, r3, #31
 8003e46:	401d      	ands	r5, r3
 8003e48:	68a3      	ldr	r3, [r4, #8]
 8003e4a:	6922      	ldr	r2, [r4, #16]
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	dd01      	ble.n	8003e54 <_printf_common+0x80>
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	18ed      	adds	r5, r5, r3
 8003e54:	2700      	movs	r7, #0
 8003e56:	42bd      	cmp	r5, r7
 8003e58:	d120      	bne.n	8003e9c <_printf_common+0xc8>
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	e010      	b.n	8003e80 <_printf_common+0xac>
 8003e5e:	3701      	adds	r7, #1
 8003e60:	68e3      	ldr	r3, [r4, #12]
 8003e62:	682a      	ldr	r2, [r5, #0]
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	42bb      	cmp	r3, r7
 8003e68:	ddd2      	ble.n	8003e10 <_printf_common+0x3c>
 8003e6a:	0022      	movs	r2, r4
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	9901      	ldr	r1, [sp, #4]
 8003e70:	9800      	ldr	r0, [sp, #0]
 8003e72:	9e08      	ldr	r6, [sp, #32]
 8003e74:	3219      	adds	r2, #25
 8003e76:	47b0      	blx	r6
 8003e78:	1c43      	adds	r3, r0, #1
 8003e7a:	d1f0      	bne.n	8003e5e <_printf_common+0x8a>
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	4240      	negs	r0, r0
 8003e80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e82:	2030      	movs	r0, #48	; 0x30
 8003e84:	18e1      	adds	r1, r4, r3
 8003e86:	3143      	adds	r1, #67	; 0x43
 8003e88:	7008      	strb	r0, [r1, #0]
 8003e8a:	0021      	movs	r1, r4
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	3145      	adds	r1, #69	; 0x45
 8003e90:	7809      	ldrb	r1, [r1, #0]
 8003e92:	18a2      	adds	r2, r4, r2
 8003e94:	3243      	adds	r2, #67	; 0x43
 8003e96:	3302      	adds	r3, #2
 8003e98:	7011      	strb	r1, [r2, #0]
 8003e9a:	e7c1      	b.n	8003e20 <_printf_common+0x4c>
 8003e9c:	0022      	movs	r2, r4
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	9901      	ldr	r1, [sp, #4]
 8003ea2:	9800      	ldr	r0, [sp, #0]
 8003ea4:	9e08      	ldr	r6, [sp, #32]
 8003ea6:	321a      	adds	r2, #26
 8003ea8:	47b0      	blx	r6
 8003eaa:	1c43      	adds	r3, r0, #1
 8003eac:	d0e6      	beq.n	8003e7c <_printf_common+0xa8>
 8003eae:	3701      	adds	r7, #1
 8003eb0:	e7d1      	b.n	8003e56 <_printf_common+0x82>
	...

08003eb4 <_printf_i>:
 8003eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eb6:	b08b      	sub	sp, #44	; 0x2c
 8003eb8:	9206      	str	r2, [sp, #24]
 8003eba:	000a      	movs	r2, r1
 8003ebc:	3243      	adds	r2, #67	; 0x43
 8003ebe:	9307      	str	r3, [sp, #28]
 8003ec0:	9005      	str	r0, [sp, #20]
 8003ec2:	9204      	str	r2, [sp, #16]
 8003ec4:	7e0a      	ldrb	r2, [r1, #24]
 8003ec6:	000c      	movs	r4, r1
 8003ec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003eca:	2a78      	cmp	r2, #120	; 0x78
 8003ecc:	d806      	bhi.n	8003edc <_printf_i+0x28>
 8003ece:	2a62      	cmp	r2, #98	; 0x62
 8003ed0:	d808      	bhi.n	8003ee4 <_printf_i+0x30>
 8003ed2:	2a00      	cmp	r2, #0
 8003ed4:	d100      	bne.n	8003ed8 <_printf_i+0x24>
 8003ed6:	e0c0      	b.n	800405a <_printf_i+0x1a6>
 8003ed8:	2a58      	cmp	r2, #88	; 0x58
 8003eda:	d052      	beq.n	8003f82 <_printf_i+0xce>
 8003edc:	0026      	movs	r6, r4
 8003ede:	3642      	adds	r6, #66	; 0x42
 8003ee0:	7032      	strb	r2, [r6, #0]
 8003ee2:	e022      	b.n	8003f2a <_printf_i+0x76>
 8003ee4:	0010      	movs	r0, r2
 8003ee6:	3863      	subs	r0, #99	; 0x63
 8003ee8:	2815      	cmp	r0, #21
 8003eea:	d8f7      	bhi.n	8003edc <_printf_i+0x28>
 8003eec:	f7fc f90c 	bl	8000108 <__gnu_thumb1_case_shi>
 8003ef0:	001f0016 	.word	0x001f0016
 8003ef4:	fff6fff6 	.word	0xfff6fff6
 8003ef8:	fff6fff6 	.word	0xfff6fff6
 8003efc:	fff6001f 	.word	0xfff6001f
 8003f00:	fff6fff6 	.word	0xfff6fff6
 8003f04:	00a8fff6 	.word	0x00a8fff6
 8003f08:	009a0036 	.word	0x009a0036
 8003f0c:	fff6fff6 	.word	0xfff6fff6
 8003f10:	fff600b9 	.word	0xfff600b9
 8003f14:	fff60036 	.word	0xfff60036
 8003f18:	009efff6 	.word	0x009efff6
 8003f1c:	0026      	movs	r6, r4
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	3642      	adds	r6, #66	; 0x42
 8003f22:	1d11      	adds	r1, r2, #4
 8003f24:	6019      	str	r1, [r3, #0]
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	7033      	strb	r3, [r6, #0]
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0a7      	b.n	800407e <_printf_i+0x1ca>
 8003f2e:	6808      	ldr	r0, [r1, #0]
 8003f30:	6819      	ldr	r1, [r3, #0]
 8003f32:	1d0a      	adds	r2, r1, #4
 8003f34:	0605      	lsls	r5, r0, #24
 8003f36:	d50b      	bpl.n	8003f50 <_printf_i+0x9c>
 8003f38:	680d      	ldr	r5, [r1, #0]
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	2d00      	cmp	r5, #0
 8003f3e:	da03      	bge.n	8003f48 <_printf_i+0x94>
 8003f40:	232d      	movs	r3, #45	; 0x2d
 8003f42:	9a04      	ldr	r2, [sp, #16]
 8003f44:	426d      	negs	r5, r5
 8003f46:	7013      	strb	r3, [r2, #0]
 8003f48:	4b61      	ldr	r3, [pc, #388]	; (80040d0 <_printf_i+0x21c>)
 8003f4a:	270a      	movs	r7, #10
 8003f4c:	9303      	str	r3, [sp, #12]
 8003f4e:	e032      	b.n	8003fb6 <_printf_i+0x102>
 8003f50:	680d      	ldr	r5, [r1, #0]
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	0641      	lsls	r1, r0, #25
 8003f56:	d5f1      	bpl.n	8003f3c <_printf_i+0x88>
 8003f58:	b22d      	sxth	r5, r5
 8003f5a:	e7ef      	b.n	8003f3c <_printf_i+0x88>
 8003f5c:	680d      	ldr	r5, [r1, #0]
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	1d08      	adds	r0, r1, #4
 8003f62:	6018      	str	r0, [r3, #0]
 8003f64:	062e      	lsls	r6, r5, #24
 8003f66:	d501      	bpl.n	8003f6c <_printf_i+0xb8>
 8003f68:	680d      	ldr	r5, [r1, #0]
 8003f6a:	e003      	b.n	8003f74 <_printf_i+0xc0>
 8003f6c:	066d      	lsls	r5, r5, #25
 8003f6e:	d5fb      	bpl.n	8003f68 <_printf_i+0xb4>
 8003f70:	680d      	ldr	r5, [r1, #0]
 8003f72:	b2ad      	uxth	r5, r5
 8003f74:	4b56      	ldr	r3, [pc, #344]	; (80040d0 <_printf_i+0x21c>)
 8003f76:	270a      	movs	r7, #10
 8003f78:	9303      	str	r3, [sp, #12]
 8003f7a:	2a6f      	cmp	r2, #111	; 0x6f
 8003f7c:	d117      	bne.n	8003fae <_printf_i+0xfa>
 8003f7e:	2708      	movs	r7, #8
 8003f80:	e015      	b.n	8003fae <_printf_i+0xfa>
 8003f82:	3145      	adds	r1, #69	; 0x45
 8003f84:	700a      	strb	r2, [r1, #0]
 8003f86:	4a52      	ldr	r2, [pc, #328]	; (80040d0 <_printf_i+0x21c>)
 8003f88:	9203      	str	r2, [sp, #12]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	6821      	ldr	r1, [r4, #0]
 8003f8e:	ca20      	ldmia	r2!, {r5}
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	0608      	lsls	r0, r1, #24
 8003f94:	d550      	bpl.n	8004038 <_printf_i+0x184>
 8003f96:	07cb      	lsls	r3, r1, #31
 8003f98:	d502      	bpl.n	8003fa0 <_printf_i+0xec>
 8003f9a:	2320      	movs	r3, #32
 8003f9c:	4319      	orrs	r1, r3
 8003f9e:	6021      	str	r1, [r4, #0]
 8003fa0:	2710      	movs	r7, #16
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	d103      	bne.n	8003fae <_printf_i+0xfa>
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	6822      	ldr	r2, [r4, #0]
 8003faa:	439a      	bics	r2, r3
 8003fac:	6022      	str	r2, [r4, #0]
 8003fae:	0023      	movs	r3, r4
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	3343      	adds	r3, #67	; 0x43
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	60a3      	str	r3, [r4, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	db03      	blt.n	8003fc6 <_printf_i+0x112>
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	6821      	ldr	r1, [r4, #0]
 8003fc2:	4391      	bics	r1, r2
 8003fc4:	6021      	str	r1, [r4, #0]
 8003fc6:	2d00      	cmp	r5, #0
 8003fc8:	d102      	bne.n	8003fd0 <_printf_i+0x11c>
 8003fca:	9e04      	ldr	r6, [sp, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00c      	beq.n	8003fea <_printf_i+0x136>
 8003fd0:	9e04      	ldr	r6, [sp, #16]
 8003fd2:	0028      	movs	r0, r5
 8003fd4:	0039      	movs	r1, r7
 8003fd6:	f7fc f927 	bl	8000228 <__aeabi_uidivmod>
 8003fda:	9b03      	ldr	r3, [sp, #12]
 8003fdc:	3e01      	subs	r6, #1
 8003fde:	5c5b      	ldrb	r3, [r3, r1]
 8003fe0:	7033      	strb	r3, [r6, #0]
 8003fe2:	002b      	movs	r3, r5
 8003fe4:	0005      	movs	r5, r0
 8003fe6:	429f      	cmp	r7, r3
 8003fe8:	d9f3      	bls.n	8003fd2 <_printf_i+0x11e>
 8003fea:	2f08      	cmp	r7, #8
 8003fec:	d109      	bne.n	8004002 <_printf_i+0x14e>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	07db      	lsls	r3, r3, #31
 8003ff2:	d506      	bpl.n	8004002 <_printf_i+0x14e>
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	6922      	ldr	r2, [r4, #16]
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	dc02      	bgt.n	8004002 <_printf_i+0x14e>
 8003ffc:	2330      	movs	r3, #48	; 0x30
 8003ffe:	3e01      	subs	r6, #1
 8004000:	7033      	strb	r3, [r6, #0]
 8004002:	9b04      	ldr	r3, [sp, #16]
 8004004:	1b9b      	subs	r3, r3, r6
 8004006:	6123      	str	r3, [r4, #16]
 8004008:	9b07      	ldr	r3, [sp, #28]
 800400a:	0021      	movs	r1, r4
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	9805      	ldr	r0, [sp, #20]
 8004010:	9b06      	ldr	r3, [sp, #24]
 8004012:	aa09      	add	r2, sp, #36	; 0x24
 8004014:	f7ff fede 	bl	8003dd4 <_printf_common>
 8004018:	1c43      	adds	r3, r0, #1
 800401a:	d135      	bne.n	8004088 <_printf_i+0x1d4>
 800401c:	2001      	movs	r0, #1
 800401e:	4240      	negs	r0, r0
 8004020:	b00b      	add	sp, #44	; 0x2c
 8004022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004024:	2220      	movs	r2, #32
 8004026:	6809      	ldr	r1, [r1, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	6022      	str	r2, [r4, #0]
 800402c:	0022      	movs	r2, r4
 800402e:	2178      	movs	r1, #120	; 0x78
 8004030:	3245      	adds	r2, #69	; 0x45
 8004032:	7011      	strb	r1, [r2, #0]
 8004034:	4a27      	ldr	r2, [pc, #156]	; (80040d4 <_printf_i+0x220>)
 8004036:	e7a7      	b.n	8003f88 <_printf_i+0xd4>
 8004038:	0648      	lsls	r0, r1, #25
 800403a:	d5ac      	bpl.n	8003f96 <_printf_i+0xe2>
 800403c:	b2ad      	uxth	r5, r5
 800403e:	e7aa      	b.n	8003f96 <_printf_i+0xe2>
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	680d      	ldr	r5, [r1, #0]
 8004044:	1d10      	adds	r0, r2, #4
 8004046:	6949      	ldr	r1, [r1, #20]
 8004048:	6018      	str	r0, [r3, #0]
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	062e      	lsls	r6, r5, #24
 800404e:	d501      	bpl.n	8004054 <_printf_i+0x1a0>
 8004050:	6019      	str	r1, [r3, #0]
 8004052:	e002      	b.n	800405a <_printf_i+0x1a6>
 8004054:	066d      	lsls	r5, r5, #25
 8004056:	d5fb      	bpl.n	8004050 <_printf_i+0x19c>
 8004058:	8019      	strh	r1, [r3, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	9e04      	ldr	r6, [sp, #16]
 800405e:	6123      	str	r3, [r4, #16]
 8004060:	e7d2      	b.n	8004008 <_printf_i+0x154>
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	1d11      	adds	r1, r2, #4
 8004066:	6019      	str	r1, [r3, #0]
 8004068:	6816      	ldr	r6, [r2, #0]
 800406a:	2100      	movs	r1, #0
 800406c:	0030      	movs	r0, r6
 800406e:	6862      	ldr	r2, [r4, #4]
 8004070:	f000 f8dc 	bl	800422c <memchr>
 8004074:	2800      	cmp	r0, #0
 8004076:	d001      	beq.n	800407c <_printf_i+0x1c8>
 8004078:	1b80      	subs	r0, r0, r6
 800407a:	6060      	str	r0, [r4, #4]
 800407c:	6863      	ldr	r3, [r4, #4]
 800407e:	6123      	str	r3, [r4, #16]
 8004080:	2300      	movs	r3, #0
 8004082:	9a04      	ldr	r2, [sp, #16]
 8004084:	7013      	strb	r3, [r2, #0]
 8004086:	e7bf      	b.n	8004008 <_printf_i+0x154>
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	0032      	movs	r2, r6
 800408c:	9906      	ldr	r1, [sp, #24]
 800408e:	9805      	ldr	r0, [sp, #20]
 8004090:	9d07      	ldr	r5, [sp, #28]
 8004092:	47a8      	blx	r5
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d0c1      	beq.n	800401c <_printf_i+0x168>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	079b      	lsls	r3, r3, #30
 800409c:	d415      	bmi.n	80040ca <_printf_i+0x216>
 800409e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a0:	68e0      	ldr	r0, [r4, #12]
 80040a2:	4298      	cmp	r0, r3
 80040a4:	dabc      	bge.n	8004020 <_printf_i+0x16c>
 80040a6:	0018      	movs	r0, r3
 80040a8:	e7ba      	b.n	8004020 <_printf_i+0x16c>
 80040aa:	0022      	movs	r2, r4
 80040ac:	2301      	movs	r3, #1
 80040ae:	9906      	ldr	r1, [sp, #24]
 80040b0:	9805      	ldr	r0, [sp, #20]
 80040b2:	9e07      	ldr	r6, [sp, #28]
 80040b4:	3219      	adds	r2, #25
 80040b6:	47b0      	blx	r6
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d0af      	beq.n	800401c <_printf_i+0x168>
 80040bc:	3501      	adds	r5, #1
 80040be:	68e3      	ldr	r3, [r4, #12]
 80040c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	42ab      	cmp	r3, r5
 80040c6:	dcf0      	bgt.n	80040aa <_printf_i+0x1f6>
 80040c8:	e7e9      	b.n	800409e <_printf_i+0x1ea>
 80040ca:	2500      	movs	r5, #0
 80040cc:	e7f7      	b.n	80040be <_printf_i+0x20a>
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	08004491 	.word	0x08004491
 80040d4:	080044a2 	.word	0x080044a2

080040d8 <_sbrk_r>:
 80040d8:	2300      	movs	r3, #0
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	4d06      	ldr	r5, [pc, #24]	; (80040f8 <_sbrk_r+0x20>)
 80040de:	0004      	movs	r4, r0
 80040e0:	0008      	movs	r0, r1
 80040e2:	602b      	str	r3, [r5, #0]
 80040e4:	f7fc fef2 	bl	8000ecc <_sbrk>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d103      	bne.n	80040f4 <_sbrk_r+0x1c>
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d000      	beq.n	80040f4 <_sbrk_r+0x1c>
 80040f2:	6023      	str	r3, [r4, #0]
 80040f4:	bd70      	pop	{r4, r5, r6, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	200001a4 	.word	0x200001a4

080040fc <__sread>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	000c      	movs	r4, r1
 8004100:	250e      	movs	r5, #14
 8004102:	5f49      	ldrsh	r1, [r1, r5]
 8004104:	f000 f8f0 	bl	80042e8 <_read_r>
 8004108:	2800      	cmp	r0, #0
 800410a:	db03      	blt.n	8004114 <__sread+0x18>
 800410c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800410e:	181b      	adds	r3, r3, r0
 8004110:	6563      	str	r3, [r4, #84]	; 0x54
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	4a02      	ldr	r2, [pc, #8]	; (8004120 <__sread+0x24>)
 8004118:	4013      	ands	r3, r2
 800411a:	81a3      	strh	r3, [r4, #12]
 800411c:	e7f9      	b.n	8004112 <__sread+0x16>
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	ffffefff 	.word	0xffffefff

08004124 <__swrite>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	001f      	movs	r7, r3
 8004128:	898b      	ldrh	r3, [r1, #12]
 800412a:	0005      	movs	r5, r0
 800412c:	000c      	movs	r4, r1
 800412e:	0016      	movs	r6, r2
 8004130:	05db      	lsls	r3, r3, #23
 8004132:	d505      	bpl.n	8004140 <__swrite+0x1c>
 8004134:	230e      	movs	r3, #14
 8004136:	5ec9      	ldrsh	r1, [r1, r3]
 8004138:	2200      	movs	r2, #0
 800413a:	2302      	movs	r3, #2
 800413c:	f000 f862 	bl	8004204 <_lseek_r>
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	4a05      	ldr	r2, [pc, #20]	; (8004158 <__swrite+0x34>)
 8004144:	0028      	movs	r0, r5
 8004146:	4013      	ands	r3, r2
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	0032      	movs	r2, r6
 800414c:	230e      	movs	r3, #14
 800414e:	5ee1      	ldrsh	r1, [r4, r3]
 8004150:	003b      	movs	r3, r7
 8004152:	f000 f81f 	bl	8004194 <_write_r>
 8004156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004158:	ffffefff 	.word	0xffffefff

0800415c <__sseek>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	000c      	movs	r4, r1
 8004160:	250e      	movs	r5, #14
 8004162:	5f49      	ldrsh	r1, [r1, r5]
 8004164:	f000 f84e 	bl	8004204 <_lseek_r>
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	1c42      	adds	r2, r0, #1
 800416c:	d103      	bne.n	8004176 <__sseek+0x1a>
 800416e:	4a05      	ldr	r2, [pc, #20]	; (8004184 <__sseek+0x28>)
 8004170:	4013      	ands	r3, r2
 8004172:	81a3      	strh	r3, [r4, #12]
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	2280      	movs	r2, #128	; 0x80
 8004178:	0152      	lsls	r2, r2, #5
 800417a:	4313      	orrs	r3, r2
 800417c:	81a3      	strh	r3, [r4, #12]
 800417e:	6560      	str	r0, [r4, #84]	; 0x54
 8004180:	e7f8      	b.n	8004174 <__sseek+0x18>
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	ffffefff 	.word	0xffffefff

08004188 <__sclose>:
 8004188:	b510      	push	{r4, lr}
 800418a:	230e      	movs	r3, #14
 800418c:	5ec9      	ldrsh	r1, [r1, r3]
 800418e:	f000 f815 	bl	80041bc <_close_r>
 8004192:	bd10      	pop	{r4, pc}

08004194 <_write_r>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	0004      	movs	r4, r0
 8004198:	0008      	movs	r0, r1
 800419a:	0011      	movs	r1, r2
 800419c:	001a      	movs	r2, r3
 800419e:	2300      	movs	r3, #0
 80041a0:	4d05      	ldr	r5, [pc, #20]	; (80041b8 <_write_r+0x24>)
 80041a2:	602b      	str	r3, [r5, #0]
 80041a4:	f7fc fd9e 	bl	8000ce4 <_write>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d103      	bne.n	80041b4 <_write_r+0x20>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d000      	beq.n	80041b4 <_write_r+0x20>
 80041b2:	6023      	str	r3, [r4, #0]
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	200001a4 	.word	0x200001a4

080041bc <_close_r>:
 80041bc:	2300      	movs	r3, #0
 80041be:	b570      	push	{r4, r5, r6, lr}
 80041c0:	4d06      	ldr	r5, [pc, #24]	; (80041dc <_close_r+0x20>)
 80041c2:	0004      	movs	r4, r0
 80041c4:	0008      	movs	r0, r1
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	f7fc fe5d 	bl	8000e86 <_close>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d103      	bne.n	80041d8 <_close_r+0x1c>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d000      	beq.n	80041d8 <_close_r+0x1c>
 80041d6:	6023      	str	r3, [r4, #0]
 80041d8:	bd70      	pop	{r4, r5, r6, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	200001a4 	.word	0x200001a4

080041e0 <_fstat_r>:
 80041e0:	2300      	movs	r3, #0
 80041e2:	b570      	push	{r4, r5, r6, lr}
 80041e4:	4d06      	ldr	r5, [pc, #24]	; (8004200 <_fstat_r+0x20>)
 80041e6:	0004      	movs	r4, r0
 80041e8:	0008      	movs	r0, r1
 80041ea:	0011      	movs	r1, r2
 80041ec:	602b      	str	r3, [r5, #0]
 80041ee:	f7fc fe54 	bl	8000e9a <_fstat>
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	d103      	bne.n	80041fe <_fstat_r+0x1e>
 80041f6:	682b      	ldr	r3, [r5, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d000      	beq.n	80041fe <_fstat_r+0x1e>
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	200001a4 	.word	0x200001a4

08004204 <_lseek_r>:
 8004204:	b570      	push	{r4, r5, r6, lr}
 8004206:	0004      	movs	r4, r0
 8004208:	0008      	movs	r0, r1
 800420a:	0011      	movs	r1, r2
 800420c:	001a      	movs	r2, r3
 800420e:	2300      	movs	r3, #0
 8004210:	4d05      	ldr	r5, [pc, #20]	; (8004228 <_lseek_r+0x24>)
 8004212:	602b      	str	r3, [r5, #0]
 8004214:	f7fc fe4f 	bl	8000eb6 <_lseek>
 8004218:	1c43      	adds	r3, r0, #1
 800421a:	d103      	bne.n	8004224 <_lseek_r+0x20>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d000      	beq.n	8004224 <_lseek_r+0x20>
 8004222:	6023      	str	r3, [r4, #0]
 8004224:	bd70      	pop	{r4, r5, r6, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	200001a4 	.word	0x200001a4

0800422c <memchr>:
 800422c:	b2c9      	uxtb	r1, r1
 800422e:	1882      	adds	r2, r0, r2
 8004230:	4290      	cmp	r0, r2
 8004232:	d101      	bne.n	8004238 <memchr+0xc>
 8004234:	2000      	movs	r0, #0
 8004236:	4770      	bx	lr
 8004238:	7803      	ldrb	r3, [r0, #0]
 800423a:	428b      	cmp	r3, r1
 800423c:	d0fb      	beq.n	8004236 <memchr+0xa>
 800423e:	3001      	adds	r0, #1
 8004240:	e7f6      	b.n	8004230 <memchr+0x4>

08004242 <memcpy>:
 8004242:	2300      	movs	r3, #0
 8004244:	b510      	push	{r4, lr}
 8004246:	429a      	cmp	r2, r3
 8004248:	d100      	bne.n	800424c <memcpy+0xa>
 800424a:	bd10      	pop	{r4, pc}
 800424c:	5ccc      	ldrb	r4, [r1, r3]
 800424e:	54c4      	strb	r4, [r0, r3]
 8004250:	3301      	adds	r3, #1
 8004252:	e7f8      	b.n	8004246 <memcpy+0x4>

08004254 <memmove>:
 8004254:	b510      	push	{r4, lr}
 8004256:	4288      	cmp	r0, r1
 8004258:	d902      	bls.n	8004260 <memmove+0xc>
 800425a:	188b      	adds	r3, r1, r2
 800425c:	4298      	cmp	r0, r3
 800425e:	d303      	bcc.n	8004268 <memmove+0x14>
 8004260:	2300      	movs	r3, #0
 8004262:	e007      	b.n	8004274 <memmove+0x20>
 8004264:	5c8b      	ldrb	r3, [r1, r2]
 8004266:	5483      	strb	r3, [r0, r2]
 8004268:	3a01      	subs	r2, #1
 800426a:	d2fb      	bcs.n	8004264 <memmove+0x10>
 800426c:	bd10      	pop	{r4, pc}
 800426e:	5ccc      	ldrb	r4, [r1, r3]
 8004270:	54c4      	strb	r4, [r0, r3]
 8004272:	3301      	adds	r3, #1
 8004274:	429a      	cmp	r2, r3
 8004276:	d1fa      	bne.n	800426e <memmove+0x1a>
 8004278:	e7f8      	b.n	800426c <memmove+0x18>
	...

0800427c <__malloc_lock>:
 800427c:	b510      	push	{r4, lr}
 800427e:	4802      	ldr	r0, [pc, #8]	; (8004288 <__malloc_lock+0xc>)
 8004280:	f7ff fb69 	bl	8003956 <__retarget_lock_acquire_recursive>
 8004284:	bd10      	pop	{r4, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	2000019c 	.word	0x2000019c

0800428c <__malloc_unlock>:
 800428c:	b510      	push	{r4, lr}
 800428e:	4802      	ldr	r0, [pc, #8]	; (8004298 <__malloc_unlock+0xc>)
 8004290:	f7ff fb62 	bl	8003958 <__retarget_lock_release_recursive>
 8004294:	bd10      	pop	{r4, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	2000019c 	.word	0x2000019c

0800429c <_realloc_r>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	0007      	movs	r7, r0
 80042a0:	000d      	movs	r5, r1
 80042a2:	0016      	movs	r6, r2
 80042a4:	2900      	cmp	r1, #0
 80042a6:	d105      	bne.n	80042b4 <_realloc_r+0x18>
 80042a8:	0011      	movs	r1, r2
 80042aa:	f7ff fbd3 	bl	8003a54 <_malloc_r>
 80042ae:	0004      	movs	r4, r0
 80042b0:	0020      	movs	r0, r4
 80042b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	d103      	bne.n	80042c0 <_realloc_r+0x24>
 80042b8:	f7ff fb82 	bl	80039c0 <_free_r>
 80042bc:	0034      	movs	r4, r6
 80042be:	e7f7      	b.n	80042b0 <_realloc_r+0x14>
 80042c0:	f000 f826 	bl	8004310 <_malloc_usable_size_r>
 80042c4:	002c      	movs	r4, r5
 80042c6:	42b0      	cmp	r0, r6
 80042c8:	d2f2      	bcs.n	80042b0 <_realloc_r+0x14>
 80042ca:	0031      	movs	r1, r6
 80042cc:	0038      	movs	r0, r7
 80042ce:	f7ff fbc1 	bl	8003a54 <_malloc_r>
 80042d2:	1e04      	subs	r4, r0, #0
 80042d4:	d0ec      	beq.n	80042b0 <_realloc_r+0x14>
 80042d6:	0029      	movs	r1, r5
 80042d8:	0032      	movs	r2, r6
 80042da:	f7ff ffb2 	bl	8004242 <memcpy>
 80042de:	0029      	movs	r1, r5
 80042e0:	0038      	movs	r0, r7
 80042e2:	f7ff fb6d 	bl	80039c0 <_free_r>
 80042e6:	e7e3      	b.n	80042b0 <_realloc_r+0x14>

080042e8 <_read_r>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	0004      	movs	r4, r0
 80042ec:	0008      	movs	r0, r1
 80042ee:	0011      	movs	r1, r2
 80042f0:	001a      	movs	r2, r3
 80042f2:	2300      	movs	r3, #0
 80042f4:	4d05      	ldr	r5, [pc, #20]	; (800430c <_read_r+0x24>)
 80042f6:	602b      	str	r3, [r5, #0]
 80042f8:	f7fc fd22 	bl	8000d40 <_read>
 80042fc:	1c43      	adds	r3, r0, #1
 80042fe:	d103      	bne.n	8004308 <_read_r+0x20>
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d000      	beq.n	8004308 <_read_r+0x20>
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	bd70      	pop	{r4, r5, r6, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	200001a4 	.word	0x200001a4

08004310 <_malloc_usable_size_r>:
 8004310:	1f0b      	subs	r3, r1, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1f18      	subs	r0, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	da01      	bge.n	800431e <_malloc_usable_size_r+0xe>
 800431a:	580b      	ldr	r3, [r1, r0]
 800431c:	18c0      	adds	r0, r0, r3
 800431e:	4770      	bx	lr

08004320 <_init>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr

0800432c <_fini>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr
