
Qdice-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d4  080050d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050dc  080050dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050dc  080050dc  000150dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080050e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000078  0800515c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  0800515c  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddb6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b3  00000000  00000000  0002de56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00030210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00030e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001614f  00000000  00000000  000319e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd3d  00000000  00000000  00047b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080fa4  00000000  00000000  00055874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6818  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000357c  00000000  00000000  000d686c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ebc 	.word	0x08004ebc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004ebc 	.word	0x08004ebc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f82e 	bl	8000498 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	000f      	movs	r7, r1
 8000450:	0001      	movs	r1, r0
 8000452:	002e      	movs	r6, r5
 8000454:	46c6      	mov	lr, r8
 8000456:	4684      	mov	ip, r0
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	0c14      	lsrs	r4, r2, #16
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	4346      	muls	r6, r0
 8000462:	434d      	muls	r5, r1
 8000464:	4360      	muls	r0, r4
 8000466:	4361      	muls	r1, r4
 8000468:	1940      	adds	r0, r0, r5
 800046a:	0c34      	lsrs	r4, r6, #16
 800046c:	1824      	adds	r4, r4, r0
 800046e:	b500      	push	{lr}
 8000470:	42a5      	cmp	r5, r4
 8000472:	d903      	bls.n	800047c <__aeabi_lmul+0x34>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	0240      	lsls	r0, r0, #9
 8000478:	4680      	mov	r8, r0
 800047a:	4441      	add	r1, r8
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	186d      	adds	r5, r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4359      	muls	r1, r3
 8000484:	437a      	muls	r2, r7
 8000486:	0430      	lsls	r0, r6, #16
 8000488:	1949      	adds	r1, r1, r5
 800048a:	0424      	lsls	r4, r4, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	1820      	adds	r0, r4, r0
 8000490:	1889      	adds	r1, r1, r2
 8000492:	bc80      	pop	{r7}
 8000494:	46b8      	mov	r8, r7
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__udivmoddi4>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	0004      	movs	r4, r0
 80004a6:	000d      	movs	r5, r1
 80004a8:	4692      	mov	sl, r2
 80004aa:	4699      	mov	r9, r3
 80004ac:	b083      	sub	sp, #12
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d830      	bhi.n	8000514 <__udivmoddi4+0x7c>
 80004b2:	d02d      	beq.n	8000510 <__udivmoddi4+0x78>
 80004b4:	4649      	mov	r1, r9
 80004b6:	4650      	mov	r0, sl
 80004b8:	f000 f8ba 	bl	8000630 <__clzdi2>
 80004bc:	0029      	movs	r1, r5
 80004be:	0006      	movs	r6, r0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f000 f8b5 	bl	8000630 <__clzdi2>
 80004c6:	1a33      	subs	r3, r6, r0
 80004c8:	4698      	mov	r8, r3
 80004ca:	3b20      	subs	r3, #32
 80004cc:	469b      	mov	fp, r3
 80004ce:	d433      	bmi.n	8000538 <__udivmoddi4+0xa0>
 80004d0:	465a      	mov	r2, fp
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	001f      	movs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001e      	movs	r6, r3
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d83a      	bhi.n	800055a <__udivmoddi4+0xc2>
 80004e4:	42af      	cmp	r7, r5
 80004e6:	d100      	bne.n	80004ea <__udivmoddi4+0x52>
 80004e8:	e078      	b.n	80005dc <__udivmoddi4+0x144>
 80004ea:	465b      	mov	r3, fp
 80004ec:	1ba4      	subs	r4, r4, r6
 80004ee:	41bd      	sbcs	r5, r7
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da00      	bge.n	80004f6 <__udivmoddi4+0x5e>
 80004f4:	e075      	b.n	80005e2 <__udivmoddi4+0x14a>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	465a      	mov	r2, fp
 8000502:	4093      	lsls	r3, r2
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	4642      	mov	r2, r8
 800050a:	4093      	lsls	r3, r2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	e028      	b.n	8000562 <__udivmoddi4+0xca>
 8000510:	4282      	cmp	r2, r0
 8000512:	d9cf      	bls.n	80004b4 <__udivmoddi4+0x1c>
 8000514:	2200      	movs	r2, #0
 8000516:	2300      	movs	r3, #0
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <__udivmoddi4+0x8e>
 8000522:	601c      	str	r4, [r3, #0]
 8000524:	605d      	str	r5, [r3, #4]
 8000526:	9800      	ldr	r0, [sp, #0]
 8000528:	9901      	ldr	r1, [sp, #4]
 800052a:	b003      	add	sp, #12
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	4642      	mov	r2, r8
 800053a:	2320      	movs	r3, #32
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	4652      	mov	r2, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	4641      	mov	r1, r8
 8000544:	0013      	movs	r3, r2
 8000546:	464a      	mov	r2, r9
 8000548:	408a      	lsls	r2, r1
 800054a:	0017      	movs	r7, r2
 800054c:	4642      	mov	r2, r8
 800054e:	431f      	orrs	r7, r3
 8000550:	4653      	mov	r3, sl
 8000552:	4093      	lsls	r3, r2
 8000554:	001e      	movs	r6, r3
 8000556:	42af      	cmp	r7, r5
 8000558:	d9c4      	bls.n	80004e4 <__udivmoddi4+0x4c>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0d9      	beq.n	800051c <__udivmoddi4+0x84>
 8000568:	07fb      	lsls	r3, r7, #31
 800056a:	0872      	lsrs	r2, r6, #1
 800056c:	431a      	orrs	r2, r3
 800056e:	4646      	mov	r6, r8
 8000570:	087b      	lsrs	r3, r7, #1
 8000572:	e00e      	b.n	8000592 <__udivmoddi4+0xfa>
 8000574:	42ab      	cmp	r3, r5
 8000576:	d101      	bne.n	800057c <__udivmoddi4+0xe4>
 8000578:	42a2      	cmp	r2, r4
 800057a:	d80c      	bhi.n	8000596 <__udivmoddi4+0xfe>
 800057c:	1aa4      	subs	r4, r4, r2
 800057e:	419d      	sbcs	r5, r3
 8000580:	2001      	movs	r0, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2100      	movs	r1, #0
 8000588:	3e01      	subs	r6, #1
 800058a:	1824      	adds	r4, r4, r0
 800058c:	414d      	adcs	r5, r1
 800058e:	2e00      	cmp	r6, #0
 8000590:	d006      	beq.n	80005a0 <__udivmoddi4+0x108>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d9ee      	bls.n	8000574 <__udivmoddi4+0xdc>
 8000596:	3e01      	subs	r6, #1
 8000598:	1924      	adds	r4, r4, r4
 800059a:	416d      	adcs	r5, r5
 800059c:	2e00      	cmp	r6, #0
 800059e:	d1f8      	bne.n	8000592 <__udivmoddi4+0xfa>
 80005a0:	9800      	ldr	r0, [sp, #0]
 80005a2:	9901      	ldr	r1, [sp, #4]
 80005a4:	465b      	mov	r3, fp
 80005a6:	1900      	adds	r0, r0, r4
 80005a8:	4169      	adcs	r1, r5
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db24      	blt.n	80005f8 <__udivmoddi4+0x160>
 80005ae:	002b      	movs	r3, r5
 80005b0:	465a      	mov	r2, fp
 80005b2:	4644      	mov	r4, r8
 80005b4:	40d3      	lsrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db2a      	blt.n	800061a <__udivmoddi4+0x182>
 80005c4:	0026      	movs	r6, r4
 80005c6:	409e      	lsls	r6, r3
 80005c8:	0033      	movs	r3, r6
 80005ca:	0026      	movs	r6, r4
 80005cc:	4647      	mov	r7, r8
 80005ce:	40be      	lsls	r6, r7
 80005d0:	0032      	movs	r2, r6
 80005d2:	1a80      	subs	r0, r0, r2
 80005d4:	4199      	sbcs	r1, r3
 80005d6:	9000      	str	r0, [sp, #0]
 80005d8:	9101      	str	r1, [sp, #4]
 80005da:	e79f      	b.n	800051c <__udivmoddi4+0x84>
 80005dc:	42a3      	cmp	r3, r4
 80005de:	d8bc      	bhi.n	800055a <__udivmoddi4+0xc2>
 80005e0:	e783      	b.n	80004ea <__udivmoddi4+0x52>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	9100      	str	r1, [sp, #0]
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	40da      	lsrs	r2, r3
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	e786      	b.n	8000506 <__udivmoddi4+0x6e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	4646      	mov	r6, r8
 8000602:	409a      	lsls	r2, r3
 8000604:	0023      	movs	r3, r4
 8000606:	40f3      	lsrs	r3, r6
 8000608:	4644      	mov	r4, r8
 800060a:	4313      	orrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	40e2      	lsrs	r2, r4
 8000610:	001c      	movs	r4, r3
 8000612:	465b      	mov	r3, fp
 8000614:	0015      	movs	r5, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dad4      	bge.n	80005c4 <__udivmoddi4+0x12c>
 800061a:	4642      	mov	r2, r8
 800061c:	002f      	movs	r7, r5
 800061e:	2320      	movs	r3, #32
 8000620:	0026      	movs	r6, r4
 8000622:	4097      	lsls	r7, r2
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	40de      	lsrs	r6, r3
 8000628:	003b      	movs	r3, r7
 800062a:	4333      	orrs	r3, r6
 800062c:	e7cd      	b.n	80005ca <__udivmoddi4+0x132>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__clzdi2>:
 8000630:	b510      	push	{r4, lr}
 8000632:	2900      	cmp	r1, #0
 8000634:	d103      	bne.n	800063e <__clzdi2+0xe>
 8000636:	f000 f807 	bl	8000648 <__clzsi2>
 800063a:	3020      	adds	r0, #32
 800063c:	e002      	b.n	8000644 <__clzdi2+0x14>
 800063e:	1c08      	adds	r0, r1, #0
 8000640:	f000 f802 	bl	8000648 <__clzsi2>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	46c0      	nop			; (mov r8, r8)

08000648 <__clzsi2>:
 8000648:	211c      	movs	r1, #28
 800064a:	2301      	movs	r3, #1
 800064c:	041b      	lsls	r3, r3, #16
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0xe>
 8000652:	0c00      	lsrs	r0, r0, #16
 8000654:	3910      	subs	r1, #16
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	4298      	cmp	r0, r3
 800065a:	d301      	bcc.n	8000660 <__clzsi2+0x18>
 800065c:	0a00      	lsrs	r0, r0, #8
 800065e:	3908      	subs	r1, #8
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	4298      	cmp	r0, r3
 8000664:	d301      	bcc.n	800066a <__clzsi2+0x22>
 8000666:	0900      	lsrs	r0, r0, #4
 8000668:	3904      	subs	r1, #4
 800066a:	a202      	add	r2, pc, #8	; (adr r2, 8000674 <__clzsi2+0x2c>)
 800066c:	5c10      	ldrb	r0, [r2, r0]
 800066e:	1840      	adds	r0, r0, r1
 8000670:	4770      	bx	lr
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	02020304 	.word	0x02020304
 8000678:	01010101 	.word	0x01010101
	...

08000684 <readSW>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void readSW(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	currentSwStates[Roll] = HAL_GPIO_ReadPin(SW_ROLL_GPIO_Port, SW_ROLL_Pin);
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	015b      	lsls	r3, r3, #5
 800068c:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <readSW+0x64>)
 800068e:	0019      	movs	r1, r3
 8000690:	0010      	movs	r0, r2
 8000692:	f000 ff35 	bl	8001500 <HAL_GPIO_ReadPin>
 8000696:	0003      	movs	r3, r0
 8000698:	001a      	movs	r2, r3
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <readSW+0x68>)
 800069c:	701a      	strb	r2, [r3, #0]
	currentSwStates[Dice] = HAL_GPIO_ReadPin(SW_DICE_GPIO_Port, SW_DICE_Pin);
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <readSW+0x64>)
 80006a4:	0019      	movs	r1, r3
 80006a6:	0010      	movs	r0, r2
 80006a8:	f000 ff2a 	bl	8001500 <HAL_GPIO_ReadPin>
 80006ac:	0003      	movs	r3, r0
 80006ae:	001a      	movs	r2, r3
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <readSW+0x68>)
 80006b2:	705a      	strb	r2, [r3, #1]
	currentSwStates[Speed] = HAL_GPIO_ReadPin(SW_SPEED_GPIO_Port, SW_SPEED_Pin);
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	01db      	lsls	r3, r3, #7
 80006b8:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <readSW+0x64>)
 80006ba:	0019      	movs	r1, r3
 80006bc:	0010      	movs	r0, r2
 80006be:	f000 ff1f 	bl	8001500 <HAL_GPIO_ReadPin>
 80006c2:	0003      	movs	r3, r0
 80006c4:	001a      	movs	r2, r3
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <readSW+0x68>)
 80006c8:	709a      	strb	r2, [r3, #2]
	currentSwStates[Mode] = HAL_GPIO_ReadPin(SW_MODE_GPIO_Port, SW_MODE_Pin);
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	019b      	lsls	r3, r3, #6
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <readSW+0x64>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f000 ff14 	bl	8001500 <HAL_GPIO_ReadPin>
 80006d8:	0003      	movs	r3, r0
 80006da:	001a      	movs	r2, r3
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <readSW+0x68>)
 80006de:	70da      	strb	r2, [r3, #3]

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	50000400 	.word	0x50000400
 80006ec:	200000a0 	.word	0x200000a0

080006f0 <debounceCheck>:

uint8_t debounceCheck(uint8_t readState, uint8_t diceCode){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	0002      	movs	r2, r0
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	1dbb      	adds	r3, r7, #6
 80006fe:	1c0a      	adds	r2, r1, #0
 8000700:	701a      	strb	r2, [r3, #0]
	if(lastSwStates[diceCode] == readState)
 8000702:	1dbb      	adds	r3, r7, #6
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <debounceCheck+0x3c>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	1dfa      	adds	r2, r7, #7
 800070c:	7812      	ldrb	r2, [r2, #0]
 800070e:	429a      	cmp	r2, r3
 8000710:	d101      	bne.n	8000716 <debounceCheck+0x26>
		return 0;
 8000712:	2300      	movs	r3, #0
 8000714:	e006      	b.n	8000724 <debounceCheck+0x34>
	else{
		lastSwStates[diceCode] = readState;
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <debounceCheck+0x3c>)
 800071c:	1df9      	adds	r1, r7, #7
 800071e:	7809      	ldrb	r1, [r1, #0]
 8000720:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000722:	2301      	movs	r3, #1
	}
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000009c 	.word	0x2000009c

08000730 <HAL_GPIO_EXTI_Callback>:
//		ITM_SendChar(*ptr++);
//	}
//	return len;
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	0002      	movs	r2, r0
 8000738:	1dbb      	adds	r3, r7, #6
 800073a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == INT_PULSE_Pin){
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	881a      	ldrh	r2, [r3, #0]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	429a      	cmp	r2, r3
 8000746:	d12c      	bne.n	80007a2 <HAL_GPIO_EXTI_Callback+0x72>
//		HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
		currentTick = HAL_GetTick();
 8000748:	f000 fcac 	bl	80010a4 <HAL_GetTick>
 800074c:	0002      	movs	r2, r0
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <HAL_GPIO_EXTI_Callback+0x7c>)
 8000750:	601a      	str	r2, [r3, #0]
		if(rolling){
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d023      	beq.n	80007a2 <HAL_GPIO_EXTI_Callback+0x72>
			rolling = false;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_GPIO_EXTI_Callback+0x80>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
			currentTick = currentTick % 100;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_GPIO_EXTI_Callback+0x7c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2164      	movs	r1, #100	; 0x64
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff fd5e 	bl	8000228 <__aeabi_uidivmod>
 800076c:	000b      	movs	r3, r1
 800076e:	001a      	movs	r2, r3
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_GPIO_EXTI_Callback+0x7c>)
 8000772:	601a      	str	r2, [r3, #0]
			rollNumber = currentTick % dices[currentDice];
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <HAL_GPIO_EXTI_Callback+0x7c>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_GPIO_EXTI_Callback+0x84>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	0019      	movs	r1, r3
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000780:	5c5b      	ldrb	r3, [r3, r1]
 8000782:	0019      	movs	r1, r3
 8000784:	0010      	movs	r0, r2
 8000786:	f7ff fd4f 	bl	8000228 <__aeabi_uidivmod>
 800078a:	000b      	movs	r3, r1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_GPIO_EXTI_Callback+0x8c>)
 8000790:	701a      	strb	r2, [r3, #0]
			printf("Rolled dice: %d\r\n", rollNumber);
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_GPIO_EXTI_Callback+0x8c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	001a      	movs	r2, r3
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x90>)
 800079a:	0011      	movs	r1, r2
 800079c:	0018      	movs	r0, r3
 800079e:	f003 f8d5 	bl	800394c <iprintf>
//			HAL_UART_Transmit(&huart1, MSG2, sizeof(MSG2), 100);
//			HAL_GPIO_WritePin(SW_HV_GPIO_Port, SW_HV_Pin, RESET);
		}
	}
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	2000016c 	.word	0x2000016c
 80007b0:	20000095 	.word	0x20000095
 80007b4:	20000094 	.word	0x20000094
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000096 	.word	0x20000096
 80007c0:	08004ed4 	.word	0x08004ed4

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fc3a 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f8b4 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f954 	bl	8000a7c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007d4:	f000 f922 	bl	8000a1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80007d8:	4b4a      	ldr	r3, [pc, #296]	; (8000904 <main+0x140>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fa54 	bl	8000c88 <RetargetInit>
  TM1638_Init();
 80007e0:	f002 fea7 	bl	8003532 <TM1638_Init>
  TM1638_ConfigDisplay(7, TM1638DisplayStateON);
 80007e4:	2101      	movs	r1, #1
 80007e6:	2007      	movs	r0, #7
 80007e8:	f002 feab 	bl	8003542 <TM1638_ConfigDisplay>
  TM1638_SetSingleDigit_HEX(8 | TM1638DecimalPoint, 0);
 80007ec:	2100      	movs	r1, #0
 80007ee:	2088      	movs	r0, #136	; 0x88
 80007f0:	f002 fef8 	bl	80035e4 <TM1638_SetSingleDigit_HEX>

  sprintf(MSG, "Particle detected!\n");
 80007f4:	4a44      	ldr	r2, [pc, #272]	; (8000908 <main+0x144>)
 80007f6:	4b45      	ldr	r3, [pc, #276]	; (800090c <main+0x148>)
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f003 fa04 	bl	8003c08 <siprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  printf("test\n");
	currentTick = HAL_GetTick();
 8000800:	f000 fc50 	bl	80010a4 <HAL_GetTick>
 8000804:	0002      	movs	r2, r0
 8000806:	4b42      	ldr	r3, [pc, #264]	; (8000910 <main+0x14c>)
 8000808:	601a      	str	r2, [r3, #0]


	if((currentTick-lastPress)>DEBOUNCE_TIME_MS){
 800080a:	4b41      	ldr	r3, [pc, #260]	; (8000910 <main+0x14c>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <main+0x150>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	2b6e      	cmp	r3, #110	; 0x6e
 8000816:	d9f3      	bls.n	8000800 <main+0x3c>
		readSW();
 8000818:	f7ff ff34 	bl	8000684 <readSW>
		if(debounceCheck(currentSwStates[Roll], Roll)){
 800081c:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <main+0x154>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2100      	movs	r1, #0
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff ff64 	bl	80006f0 <debounceCheck>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d016      	beq.n	800085a <main+0x96>
			if(!currentSwStates[Roll]){
 800082c:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <main+0x154>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d112      	bne.n	800085a <main+0x96>
			  	//ADD FUNCTIONAL CODE HERE
				if(rolling == false){
 8000834:	4b39      	ldr	r3, [pc, #228]	; (800091c <main+0x158>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2201      	movs	r2, #1
 800083a:	4053      	eors	r3, r2
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d006      	beq.n	8000850 <main+0x8c>
					printf("Rolling...\r\n");
 8000842:	4b37      	ldr	r3, [pc, #220]	; (8000920 <main+0x15c>)
 8000844:	0018      	movs	r0, r3
 8000846:	f003 f90d 	bl	8003a64 <puts>
					rolling = true;
 800084a:	4b34      	ldr	r3, [pc, #208]	; (800091c <main+0x158>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
				}
				lastPress = HAL_GetTick();
 8000850:	f000 fc28 	bl	80010a4 <HAL_GetTick>
 8000854:	0002      	movs	r2, r0
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <main+0x150>)
 8000858:	601a      	str	r2, [r3, #0]
			  }
		}

		if(debounceCheck(currentSwStates[Dice], Dice)){
 800085a:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <main+0x154>)
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	2101      	movs	r1, #1
 8000860:	0018      	movs	r0, r3
 8000862:	f7ff ff45 	bl	80006f0 <debounceCheck>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d01e      	beq.n	80008a8 <main+0xe4>
			if(!currentSwStates[Dice]){
 800086a:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <main+0x154>)
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d11a      	bne.n	80008a8 <main+0xe4>
			  	//ADD FUNCTIONAL CODE HERE
				currentDice = (currentDice + 1) % NDICES;
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <main+0x160>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	2107      	movs	r1, #7
 800087a:	0018      	movs	r0, r3
 800087c:	f7ff fdbe 	bl	80003fc <__aeabi_idivmod>
 8000880:	000b      	movs	r3, r1
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <main+0x160>)
 8000886:	701a      	strb	r2, [r3, #0]
				printf("Current dice: D%d\r\n", dices[currentDice]);
 8000888:	4b26      	ldr	r3, [pc, #152]	; (8000924 <main+0x160>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	001a      	movs	r2, r3
 800088e:	4b26      	ldr	r3, [pc, #152]	; (8000928 <main+0x164>)
 8000890:	5c9b      	ldrb	r3, [r3, r2]
 8000892:	001a      	movs	r2, r3
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <main+0x168>)
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f003 f857 	bl	800394c <iprintf>
//				HAL_UART_Transmit(&huart1, MSG2, sizeof(MSG2), 100);
				lastPress = HAL_GetTick();
 800089e:	f000 fc01 	bl	80010a4 <HAL_GetTick>
 80008a2:	0002      	movs	r2, r0
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <main+0x150>)
 80008a6:	601a      	str	r2, [r3, #0]
			}
		}

		if(debounceCheck(currentSwStates[Speed], Speed)){
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <main+0x154>)
 80008aa:	789b      	ldrb	r3, [r3, #2]
 80008ac:	2102      	movs	r1, #2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff ff1e 	bl	80006f0 <debounceCheck>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d00c      	beq.n	80008d2 <main+0x10e>
			if(!currentSwStates[Speed]){
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <main+0x154>)
 80008ba:	789b      	ldrb	r3, [r3, #2]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d108      	bne.n	80008d2 <main+0x10e>
				//ADD FUNCTIONAL CODE HERE
				printf("uart test\r\n");
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <main+0x16c>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f003 f8ce 	bl	8003a64 <puts>
//				HAL_UART_Transmit(&huart1, MSG2, sizeof(MSG2), 100);
				lastPress = HAL_GetTick();
 80008c8:	f000 fbec 	bl	80010a4 <HAL_GetTick>
 80008cc:	0002      	movs	r2, r0
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <main+0x150>)
 80008d0:	601a      	str	r2, [r3, #0]
			  }
		}

		if(debounceCheck(currentSwStates[Mode], Mode)){
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <main+0x154>)
 80008d4:	78db      	ldrb	r3, [r3, #3]
 80008d6:	2103      	movs	r1, #3
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ff09 	bl	80006f0 <debounceCheck>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d08e      	beq.n	8000800 <main+0x3c>
			if(!currentSwStates[Mode]){
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <main+0x154>)
 80008e4:	78db      	ldrb	r3, [r3, #3]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d18a      	bne.n	8000800 <main+0x3c>
	//			  currentDice = (currentDice + 1) % NDICES;
				HAL_GPIO_TogglePin(SW_HV_GPIO_Port, SW_HV_Pin);
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	019b      	lsls	r3, r3, #6
 80008ee:	4a11      	ldr	r2, [pc, #68]	; (8000934 <main+0x170>)
 80008f0:	0019      	movs	r1, r3
 80008f2:	0010      	movs	r0, r2
 80008f4:	f000 fe3e 	bl	8001574 <HAL_GPIO_TogglePin>
				lastPress = HAL_GetTick();
 80008f8:	f000 fbd4 	bl	80010a4 <HAL_GetTick>
 80008fc:	0002      	movs	r2, r0
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <main+0x150>)
 8000900:	601a      	str	r2, [r3, #0]
	currentTick = HAL_GetTick();
 8000902:	e77d      	b.n	8000800 <main+0x3c>
 8000904:	200000e8 	.word	0x200000e8
 8000908:	08004ee8 	.word	0x08004ee8
 800090c:	20000170 	.word	0x20000170
 8000910:	2000016c 	.word	0x2000016c
 8000914:	20000098 	.word	0x20000098
 8000918:	200000a0 	.word	0x200000a0
 800091c:	20000095 	.word	0x20000095
 8000920:	08004efc 	.word	0x08004efc
 8000924:	20000094 	.word	0x20000094
 8000928:	20000000 	.word	0x20000000
 800092c:	08004f08 	.word	0x08004f08
 8000930:	08004f1c 	.word	0x08004f1c
 8000934:	50000800 	.word	0x50000800

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b09d      	sub	sp, #116	; 0x74
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	2438      	movs	r4, #56	; 0x38
 8000940:	193b      	adds	r3, r7, r4
 8000942:	0018      	movs	r0, r3
 8000944:	2338      	movs	r3, #56	; 0x38
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f002 fff7 	bl	800393c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094e:	2324      	movs	r3, #36	; 0x24
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	0018      	movs	r0, r3
 8000954:	2314      	movs	r3, #20
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f002 ffef 	bl	800393c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095e:	003b      	movs	r3, r7
 8000960:	0018      	movs	r0, r3
 8000962:	2324      	movs	r3, #36	; 0x24
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f002 ffe8 	bl	800393c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <SystemClock_Config+0xdc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a29      	ldr	r2, [pc, #164]	; (8000a18 <SystemClock_Config+0xe0>)
 8000972:	401a      	ands	r2, r3
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <SystemClock_Config+0xdc>)
 8000976:	2180      	movs	r1, #128	; 0x80
 8000978:	0109      	lsls	r1, r1, #4
 800097a:	430a      	orrs	r2, r1
 800097c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097e:	0021      	movs	r1, r4
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2202      	movs	r2, #2
 8000984:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2201      	movs	r2, #1
 800098a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2210      	movs	r2, #16
 8000990:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2202      	movs	r2, #2
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	02d2      	lsls	r2, r2, #11
 80009a4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	03d2      	lsls	r2, r2, #15
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fe17 	bl	80015e4 <HAL_RCC_OscConfig>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x86>
  {
    Error_Handler();
 80009ba:	f000 f95f 	bl	8000c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	2124      	movs	r1, #36	; 0x24
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	220f      	movs	r2, #15
 80009c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2203      	movs	r2, #3
 80009ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2101      	movs	r1, #1
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 f9c2 	bl	8001d6c <HAL_RCC_ClockConfig>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80009ec:	f000 f946 	bl	8000c7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009f0:	003b      	movs	r3, r7
 80009f2:	2201      	movs	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009f6:	003b      	movs	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fc:	003b      	movs	r3, r7
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 fc0a 	bl	8002218 <HAL_RCCEx_PeriphCLKConfig>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a08:	f000 f938 	bl	8000c7c <Error_Handler>
  }
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b01d      	add	sp, #116	; 0x74
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	40007000 	.word	0x40007000
 8000a18:	ffffe7ff 	.word	0xffffe7ff

08000a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a22:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <MX_USART1_UART_Init+0x5c>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a28:	22e1      	movs	r2, #225	; 0xe1
 8000a2a:	0252      	lsls	r2, r2, #9
 8000a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <MX_USART1_UART_Init+0x58>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 ff2d 	bl	80028c0 <HAL_UART_Init>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a6a:	f000 f907 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200000e8 	.word	0x200000e8
 8000a78:	40013800 	.word	0x40013800

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b08b      	sub	sp, #44	; 0x2c
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	2414      	movs	r4, #20
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	0018      	movs	r0, r3
 8000a88:	2314      	movs	r3, #20
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f002 ff55 	bl	800393c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	4b6a      	ldr	r3, [pc, #424]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a96:	4b69      	ldr	r3, [pc, #420]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000a98:	2104      	movs	r1, #4
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a9e:	4b67      	ldr	r3, [pc, #412]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	4b64      	ldr	r3, [pc, #400]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aae:	4b63      	ldr	r3, [pc, #396]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ab6:	4b61      	ldr	r3, [pc, #388]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	4013      	ands	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b5e      	ldr	r3, [pc, #376]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac6:	4b5d      	ldr	r3, [pc, #372]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	430a      	orrs	r2, r1
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ace:	4b5b      	ldr	r3, [pc, #364]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b58      	ldr	r3, [pc, #352]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ade:	4b57      	ldr	r3, [pc, #348]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae6:	4b55      	ldr	r3, [pc, #340]	; (8000c3c <MX_GPIO_Init+0x1c0>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	2202      	movs	r2, #2
 8000aec:	4013      	ands	r3, r2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_HV_GPIO_Port, SW_HV_Pin, GPIO_PIN_RESET);
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	019b      	lsls	r3, r3, #6
 8000af6:	4852      	ldr	r0, [pc, #328]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	0019      	movs	r1, r3
 8000afc:	f000 fd1d 	bl	800153a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW_CLK_Pin|DISP_CS_Pin|DISP_DATA_Pin, GPIO_PIN_RESET);
 8000b00:	23e0      	movs	r3, #224	; 0xe0
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	484f      	ldr	r0, [pc, #316]	; (8000c44 <MX_GPIO_Init+0x1c8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	0019      	movs	r1, r3
 8000b0a:	f000 fd16 	bl	800153a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_HV_Pin */
  GPIO_InitStruct.Pin = SW_HV_Pin;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	0192      	lsls	r2, r2, #6
 8000b14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2201      	movs	r2, #1
 8000b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_HV_GPIO_Port, &GPIO_InitStruct);
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	4a45      	ldr	r2, [pc, #276]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	0010      	movs	r0, r2
 8000b30:	f000 fb70 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b34:	0021      	movs	r1, r4
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	22c0      	movs	r2, #192	; 0xc0
 8000b3a:	0212      	lsls	r2, r2, #8
 8000b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	000c      	movs	r4, r1
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2203      	movs	r2, #3
 8000b44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	4a3c      	ldr	r2, [pc, #240]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b50:	0019      	movs	r1, r3
 8000b52:	0010      	movs	r0, r2
 8000b54:	f000 fb5e 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2203      	movs	r2, #3
 8000b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	4a36      	ldr	r2, [pc, #216]	; (8000c48 <MX_GPIO_Init+0x1cc>)
 8000b6e:	0019      	movs	r1, r3
 8000b70:	0010      	movs	r0, r2
 8000b72:	f000 fb4f 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	4a34      	ldr	r2, [pc, #208]	; (8000c4c <MX_GPIO_Init+0x1d0>)
 8000b7a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	2203      	movs	r2, #3
 8000b80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	193a      	adds	r2, r7, r4
 8000b8a:	23a0      	movs	r3, #160	; 0xa0
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 fb3f 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	4a2d      	ldr	r2, [pc, #180]	; (8000c50 <MX_GPIO_Init+0x1d4>)
 8000b9a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <MX_GPIO_Init+0x1c8>)
 8000bac:	0019      	movs	r1, r3
 8000bae:	0010      	movs	r0, r2
 8000bb0:	f000 fb30 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_ROLL_Pin SW_MODE_Pin SW_SPEED_Pin SW_DICE_Pin */
  GPIO_InitStruct.Pin = SW_ROLL_Pin|SW_MODE_Pin|SW_SPEED_Pin|SW_DICE_Pin;
 8000bb4:	0021      	movs	r1, r4
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	22f0      	movs	r2, #240	; 0xf0
 8000bba:	0212      	lsls	r2, r2, #8
 8000bbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <MX_GPIO_Init+0x1c8>)
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	f000 fb1e 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_PULSE_Pin */
  GPIO_InitStruct.Pin = INT_PULSE_Pin;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	0052      	lsls	r2, r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <MX_GPIO_Init+0x1d8>)
 8000be4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_PULSE_GPIO_Port, &GPIO_InitStruct);
 8000bec:	193a      	adds	r2, r7, r4
 8000bee:	23a0      	movs	r3, #160	; 0xa0
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	0011      	movs	r1, r2
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f000 fb0d 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_CLK_Pin DISP_CS_Pin DISP_DATA_Pin */
  GPIO_InitStruct.Pin = SW_CLK_Pin|DISP_CS_Pin|DISP_DATA_Pin;
 8000bfa:	0021      	movs	r1, r4
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	22e0      	movs	r2, #224	; 0xe0
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2201      	movs	r2, #1
 8000c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <MX_GPIO_Init+0x1c8>)
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	f000 faf9 	bl	8001214 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2007      	movs	r0, #7
 8000c28:	f000 face 	bl	80011c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c2c:	2007      	movs	r0, #7
 8000c2e:	f000 fae0 	bl	80011f2 <HAL_NVIC_EnableIRQ>

}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b00b      	add	sp, #44	; 0x2c
 8000c38:	bd90      	pop	{r4, r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	50000800 	.word	0x50000800
 8000c44:	50000400 	.word	0x50000400
 8000c48:	50001c00 	.word	0x50001c00
 8000c4c:	000098ff 	.word	0x000098ff
 8000c50:	00000c7f 	.word	0x00000c7f
 8000c54:	10210000 	.word	0x10210000

08000c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d101      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6a:	f000 fa09 	bl	8001080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	40001000 	.word	0x40001000

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <RetargetInit+0x28>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <RetargetInit+0x2c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6898      	ldr	r0, [r3, #8]
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f002 fee9 	bl	8003a78 <setvbuf>
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000194 	.word	0x20000194
 8000cb4:	20000014 	.word	0x20000014

08000cb8 <_write>:
//
//  errno = EBADF;
//  return 0;
//}

int _write(int fd, char* ptr, int len) {
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d002      	beq.n	8000cd0 <_write+0x18>
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d114      	bne.n	8000cfa <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <_write+0x58>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	2517      	movs	r5, #23
 8000cda:	197c      	adds	r4, r7, r5
 8000cdc:	2301      	movs	r3, #1
 8000cde:	425b      	negs	r3, r3
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	f001 fe41 	bl	8002968 <HAL_UART_Transmit>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8000cea:	197b      	adds	r3, r7, r5
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <_write+0x3e>
      return len;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	e008      	b.n	8000d08 <_write+0x50>
    else
      return EIO;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	e006      	b.n	8000d08 <_write+0x50>
  }
  errno = EBADF;
 8000cfa:	f002 fdf5 	bl	80038e8 <__errno>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	2209      	movs	r2, #9
 8000d02:	601a      	str	r2, [r3, #0]
  return -1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	425b      	negs	r3, r3
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b006      	add	sp, #24
 8000d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d10:	20000194 	.word	0x20000194

08000d14 <_read>:
//
//  errno = EBADF;
//  return -1;
//}

int _read(int fd, char* ptr, int len) {
 8000d14:	b5b0      	push	{r4, r5, r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d113      	bne.n	8000d4e <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <_read+0x50>)
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	2517      	movs	r5, #23
 8000d2c:	197c      	adds	r4, r7, r5
 8000d2e:	2301      	movs	r3, #1
 8000d30:	425b      	negs	r3, r3
 8000d32:	68b9      	ldr	r1, [r7, #8]
 8000d34:	2201      	movs	r2, #1
 8000d36:	f001 febf 	bl	8002ab8 <HAL_UART_Receive>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8000d3e:	197b      	adds	r3, r7, r5
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <_read+0x36>
      return 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e008      	b.n	8000d5c <_read+0x48>
    else
      return EIO;
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	e006      	b.n	8000d5c <_read+0x48>
  }
  errno = EBADF;
 8000d4e:	f002 fdcb 	bl	80038e8 <__errno>
 8000d52:	0003      	movs	r3, r0
 8000d54:	2209      	movs	r2, #9
 8000d56:	601a      	str	r2, [r3, #0]
  return -1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	425b      	negs	r3, r3
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b006      	add	sp, #24
 8000d62:	bdb0      	pop	{r4, r5, r7, pc}
 8000d64:	20000194 	.word	0x20000194

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <HAL_MspInit+0x24>)
 8000d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x24>)
 8000d72:	2101      	movs	r1, #1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_MspInit+0x24>)
 8000d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <HAL_MspInit+0x24>)
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	0549      	lsls	r1, r1, #21
 8000d82:	430a      	orrs	r2, r1
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	240c      	movs	r4, #12
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	2314      	movs	r3, #20
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f002 fdca 	bl	800393c <memset>
  if(huart->Instance==USART1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <HAL_UART_MspInit+0x80>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12a      	bne.n	8000e08 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_UART_MspInit+0x84>)
 8000db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0x84>)
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	01c9      	lsls	r1, r1, #7
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_UART_MspInit+0x84>)
 8000dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_UART_MspInit+0x84>)
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_UART_MspInit+0x84>)
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	22c0      	movs	r2, #192	; 0xc0
 8000ddc:	00d2      	lsls	r2, r2, #3
 8000dde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	0021      	movs	r1, r4
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2202      	movs	r2, #2
 8000de6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2203      	movs	r2, #3
 8000df2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2204      	movs	r2, #4
 8000df8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	187a      	adds	r2, r7, r1
 8000dfc:	23a0      	movs	r3, #160	; 0xa0
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 fa06 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b009      	add	sp, #36	; 0x24
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	40013800 	.word	0x40013800
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	2011      	movs	r0, #17
 8000e30:	f000 f9ca 	bl	80011c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e34:	2011      	movs	r0, #17
 8000e36:	f000 f9dc 	bl	80011f2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_InitTick+0x98>)
 8000e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <HAL_InitTick+0x98>)
 8000e40:	2110      	movs	r1, #16
 8000e42:	430a      	orrs	r2, r1
 8000e44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e46:	2308      	movs	r3, #8
 8000e48:	18fa      	adds	r2, r7, r3
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f001 f9af 	bl	80021b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e56:	f001 f981 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	4914      	ldr	r1, [pc, #80]	; (8000eb4 <HAL_InitTick+0x9c>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff f95a 	bl	800011c <__udivsi3>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0xa0>)
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_InitTick+0xa4>)
 8000e72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_InitTick+0xa0>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_InitTick+0xa8>)
 8000e78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_InitTick+0xa0>)
 8000e7c:	6a3a      	ldr	r2, [r7, #32]
 8000e7e:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_InitTick+0xa0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_InitTick+0xa0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_InitTick+0xa0>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f001 fb26 	bl	80024e0 <HAL_TIM_Base_Init>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d105      	bne.n	8000ea4 <HAL_InitTick+0x8c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <HAL_InitTick+0xa0>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f001 fb68 	bl	8002570 <HAL_TIM_Base_Start_IT>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	e000      	b.n	8000ea6 <HAL_InitTick+0x8e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b00a      	add	sp, #40	; 0x28
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	000f4240 	.word	0x000f4240
 8000eb8:	20000198 	.word	0x20000198
 8000ebc:	40001000 	.word	0x40001000
 8000ec0:	000003e7 	.word	0x000003e7

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 fb58 	bl	80015ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <TIM6_DAC_IRQHandler+0x14>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f001 fb7c 	bl	8002608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	20000198 	.word	0x20000198

08000f1c <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	return -1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	425b      	negs	r3, r3
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	0192      	lsls	r2, r2, #6
 8000f40:	605a      	str	r2, [r3, #4]
	return 0;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_isatty>:

int _isatty(int file)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	return 1;
 8000f54:	2301      	movs	r3, #1
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
	return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b004      	add	sp, #16
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	18d3      	adds	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f002 fca0 	bl	80038e8 <__errno>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	18d2      	adds	r2, r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b006      	add	sp, #24
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20002000 	.word	0x20002000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	200000a4 	.word	0x200000a4
 8000fdc:	200001f0 	.word	0x200001f0

08000fe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490e      	ldr	r1, [pc, #56]	; (800102c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0b      	ldr	r4, [pc, #44]	; (8001038 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001016:	f7ff ffe3 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f002 fc6b 	bl	80038f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fbd1 	bl	80007c4 <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   r0, =_estack
 8001024:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001030:	080050e4 	.word	0x080050e4
  ldr r2, =_sbss
 8001034:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001038:	200001ec 	.word	0x200001ec

0800103c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_COMP_IRQHandler>
	...

08001040 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_Init+0x3c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_Init+0x3c>)
 8001052:	2140      	movs	r1, #64	; 0x40
 8001054:	430a      	orrs	r2, r1
 8001056:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fedd 	bl	8000e18 <HAL_InitTick>
 800105e:	1e03      	subs	r3, r0, #0
 8001060:	d003      	beq.n	800106a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e001      	b.n	800106e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800106a:	f7ff fe7d 	bl	8000d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x1c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	001a      	movs	r2, r3
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x20>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	18d2      	adds	r2, r2, r3
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_IncTick+0x20>)
 8001092:	601a      	str	r2, [r3, #0]
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	20000010 	.word	0x20000010
 80010a0:	200001d8 	.word	0x200001d8

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <HAL_GetTick+0x10>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	200001d8 	.word	0x200001d8

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	0002      	movs	r2, r0
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b7f      	cmp	r3, #127	; 0x7f
 80010ca:	d809      	bhi.n	80010e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	001a      	movs	r2, r3
 80010d2:	231f      	movs	r3, #31
 80010d4:	401a      	ands	r2, r3
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_EnableIRQ+0x30>)
 80010d8:	2101      	movs	r1, #1
 80010da:	4091      	lsls	r1, r2
 80010dc:	000a      	movs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
  }
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	0002      	movs	r2, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001100:	d828      	bhi.n	8001154 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001102:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <__NVIC_SetPriority+0xd4>)
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	33c0      	adds	r3, #192	; 0xc0
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	589b      	ldr	r3, [r3, r2]
 8001112:	1dfa      	adds	r2, r7, #7
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	0011      	movs	r1, r2
 8001118:	2203      	movs	r2, #3
 800111a:	400a      	ands	r2, r1
 800111c:	00d2      	lsls	r2, r2, #3
 800111e:	21ff      	movs	r1, #255	; 0xff
 8001120:	4091      	lsls	r1, r2
 8001122:	000a      	movs	r2, r1
 8001124:	43d2      	mvns	r2, r2
 8001126:	401a      	ands	r2, r3
 8001128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	22ff      	movs	r2, #255	; 0xff
 8001130:	401a      	ands	r2, r3
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	0018      	movs	r0, r3
 8001138:	2303      	movs	r3, #3
 800113a:	4003      	ands	r3, r0
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001140:	481f      	ldr	r0, [pc, #124]	; (80011c0 <__NVIC_SetPriority+0xd4>)
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	430a      	orrs	r2, r1
 800114c:	33c0      	adds	r3, #192	; 0xc0
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001152:	e031      	b.n	80011b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <__NVIC_SetPriority+0xd8>)
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	0019      	movs	r1, r3
 800115c:	230f      	movs	r3, #15
 800115e:	400b      	ands	r3, r1
 8001160:	3b08      	subs	r3, #8
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3306      	adds	r3, #6
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	1dfa      	adds	r2, r7, #7
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	2203      	movs	r2, #3
 8001176:	400a      	ands	r2, r1
 8001178:	00d2      	lsls	r2, r2, #3
 800117a:	21ff      	movs	r1, #255	; 0xff
 800117c:	4091      	lsls	r1, r2
 800117e:	000a      	movs	r2, r1
 8001180:	43d2      	mvns	r2, r2
 8001182:	401a      	ands	r2, r3
 8001184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	019b      	lsls	r3, r3, #6
 800118a:	22ff      	movs	r2, #255	; 0xff
 800118c:	401a      	ands	r2, r3
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0018      	movs	r0, r3
 8001194:	2303      	movs	r3, #3
 8001196:	4003      	ands	r3, r0
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <__NVIC_SetPriority+0xd8>)
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	001c      	movs	r4, r3
 80011a4:	230f      	movs	r3, #15
 80011a6:	4023      	ands	r3, r4
 80011a8:	3b08      	subs	r3, #8
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	430a      	orrs	r2, r1
 80011ae:	3306      	adds	r3, #6
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	18c3      	adds	r3, r0, r3
 80011b4:	3304      	adds	r3, #4
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b003      	add	sp, #12
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	210f      	movs	r1, #15
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	1c02      	adds	r2, r0, #0
 80011d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	0011      	movs	r1, r2
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff ff81 	bl	80010ec <__NVIC_SetPriority>
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	0002      	movs	r2, r0
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b25b      	sxtb	r3, r3
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff ff57 	bl	80010b8 <__NVIC_EnableIRQ>
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800122a:	e14f      	b.n	80014cc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <HAL_GPIO_Init+0x30>
 8001242:	e140      	b.n	80014c6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d00b      	beq.n	8001264 <HAL_GPIO_Init+0x50>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d007      	beq.n	8001264 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001258:	2b11      	cmp	r3, #17
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b12      	cmp	r3, #18
 8001262:	d130      	bne.n	80012c6 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	43da      	mvns	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	409a      	lsls	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129a:	2201      	movs	r2, #1
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	43da      	mvns	r2, r3
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	2201      	movs	r2, #1
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0xf2>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b12      	cmp	r3, #18
 8001304:	d123      	bne.n	800134e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3208      	adds	r2, #8
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	58d3      	ldr	r3, [r2, r3]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2207      	movs	r2, #7
 8001318:	4013      	ands	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2107      	movs	r1, #7
 8001332:	400b      	ands	r3, r1
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	08da      	lsrs	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3208      	adds	r2, #8
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	6939      	ldr	r1, [r7, #16]
 800134c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	2203      	movs	r2, #3
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	43da      	mvns	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2203      	movs	r2, #3
 800136c:	401a      	ands	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	055b      	lsls	r3, r3, #21
 800138a:	4013      	ands	r3, r2
 800138c:	d100      	bne.n	8001390 <HAL_GPIO_Init+0x17c>
 800138e:	e09a      	b.n	80014c6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	4b54      	ldr	r3, [pc, #336]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001394:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001396:	2101      	movs	r1, #1
 8001398:	430a      	orrs	r2, r1
 800139a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800139c:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <HAL_GPIO_Init+0x2d4>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	589b      	ldr	r3, [r3, r2]
 80013a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2203      	movs	r2, #3
 80013ae:	4013      	ands	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	409a      	lsls	r2, r3
 80013b6:	0013      	movs	r3, r2
 80013b8:	43da      	mvns	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	23a0      	movs	r3, #160	; 0xa0
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d019      	beq.n	80013fe <HAL_GPIO_Init+0x1ea>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a47      	ldr	r2, [pc, #284]	; (80014ec <HAL_GPIO_Init+0x2d8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x1e6>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a46      	ldr	r2, [pc, #280]	; (80014f0 <HAL_GPIO_Init+0x2dc>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x1e2>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a45      	ldr	r2, [pc, #276]	; (80014f4 <HAL_GPIO_Init+0x2e0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x1de>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <HAL_GPIO_Init+0x2e4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x1da>
 80013ea:	2305      	movs	r3, #5
 80013ec:	e008      	b.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013ee:	2306      	movs	r3, #6
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013fe:	2300      	movs	r3, #0
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	2103      	movs	r1, #3
 8001404:	400a      	ands	r2, r1
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	4093      	lsls	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001410:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_GPIO_Init+0x2d4>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	4013      	ands	r3, r2
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001448:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43da      	mvns	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	4013      	ands	r3, r2
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43da      	mvns	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	035b      	lsls	r3, r3, #13
 800148a:	4013      	ands	r3, r2
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	43da      	mvns	r2, r3
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	039b      	lsls	r3, r3, #14
 80014b4:	4013      	ands	r3, r2
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	40da      	lsrs	r2, r3
 80014d4:	1e13      	subs	r3, r2, #0
 80014d6:	d000      	beq.n	80014da <HAL_GPIO_Init+0x2c6>
 80014d8:	e6a8      	b.n	800122c <HAL_GPIO_Init+0x18>
  }
}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b006      	add	sp, #24
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	50000400 	.word	0x50000400
 80014f0:	50000800 	.word	0x50000800
 80014f4:	50000c00 	.word	0x50000c00
 80014f8:	50001c00 	.word	0x50001c00
 80014fc:	40010400 	.word	0x40010400

08001500 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	000a      	movs	r2, r1
 800150a:	1cbb      	adds	r3, r7, #2
 800150c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	1cba      	adds	r2, r7, #2
 8001514:	8812      	ldrh	r2, [r2, #0]
 8001516:	4013      	ands	r3, r2
 8001518:	d004      	beq.n	8001524 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800151a:	230f      	movs	r3, #15
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	e003      	b.n	800152c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001524:	230f      	movs	r3, #15
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800152c:	230f      	movs	r3, #15
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	781b      	ldrb	r3, [r3, #0]
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	0008      	movs	r0, r1
 8001544:	0011      	movs	r1, r2
 8001546:	1cbb      	adds	r3, r7, #2
 8001548:	1c02      	adds	r2, r0, #0
 800154a:	801a      	strh	r2, [r3, #0]
 800154c:	1c7b      	adds	r3, r7, #1
 800154e:	1c0a      	adds	r2, r1, #0
 8001550:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001552:	1c7b      	adds	r3, r7, #1
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	1cbb      	adds	r3, r7, #2
 800155c:	881a      	ldrh	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001562:	e003      	b.n	800156c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001564:	1cbb      	adds	r3, r7, #2
 8001566:	881a      	ldrh	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b002      	add	sp, #8
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	000a      	movs	r2, r1
 800157e:	1cbb      	adds	r3, r7, #2
 8001580:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001588:	1cbb      	adds	r3, r7, #2
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4013      	ands	r3, r2
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43db      	mvns	r3, r3
 8001596:	1cb9      	adds	r1, r7, #2
 8001598:	8809      	ldrh	r1, [r1, #0]
 800159a:	400b      	ands	r3, r1
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b004      	add	sp, #16
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	0002      	movs	r2, r0
 80015b4:	1dbb      	adds	r3, r7, #6
 80015b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	1dba      	adds	r2, r7, #6
 80015be:	8812      	ldrh	r2, [r2, #0]
 80015c0:	4013      	ands	r3, r2
 80015c2:	d008      	beq.n	80015d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015c6:	1dba      	adds	r2, r7, #6
 80015c8:	8812      	ldrh	r2, [r2, #0]
 80015ca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015cc:	1dbb      	adds	r3, r7, #6
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7ff f8ad 	bl	8000730 <HAL_GPIO_EXTI_Callback>
  }
}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e4:	b5b0      	push	{r4, r5, r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f000 fbaf 	bl	8001d56 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f8:	4bcf      	ldr	r3, [pc, #828]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	220c      	movs	r2, #12
 80015fe:	4013      	ands	r3, r2
 8001600:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001602:	4bcd      	ldr	r3, [pc, #820]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	4013      	ands	r3, r2
 800160c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2201      	movs	r2, #1
 8001614:	4013      	ands	r3, r2
 8001616:	d100      	bne.n	800161a <HAL_RCC_OscConfig+0x36>
 8001618:	e07e      	b.n	8001718 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	2b08      	cmp	r3, #8
 800161e:	d007      	beq.n	8001630 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d112      	bne.n	800164c <HAL_RCC_OscConfig+0x68>
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	025b      	lsls	r3, r3, #9
 800162c:	429a      	cmp	r2, r3
 800162e:	d10d      	bne.n	800164c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	4bc1      	ldr	r3, [pc, #772]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	029b      	lsls	r3, r3, #10
 8001638:	4013      	ands	r3, r2
 800163a:	d100      	bne.n	800163e <HAL_RCC_OscConfig+0x5a>
 800163c:	e06b      	b.n	8001716 <HAL_RCC_OscConfig+0x132>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d167      	bne.n	8001716 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	f000 fb85 	bl	8001d56 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	025b      	lsls	r3, r3, #9
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_RCC_OscConfig+0x84>
 8001658:	4bb7      	ldr	r3, [pc, #732]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4bb6      	ldr	r3, [pc, #728]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	0249      	lsls	r1, r1, #9
 8001662:	430a      	orrs	r2, r1
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e027      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	23a0      	movs	r3, #160	; 0xa0
 800166e:	02db      	lsls	r3, r3, #11
 8001670:	429a      	cmp	r2, r3
 8001672:	d10e      	bne.n	8001692 <HAL_RCC_OscConfig+0xae>
 8001674:	4bb0      	ldr	r3, [pc, #704]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4baf      	ldr	r3, [pc, #700]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 800167a:	2180      	movs	r1, #128	; 0x80
 800167c:	02c9      	lsls	r1, r1, #11
 800167e:	430a      	orrs	r2, r1
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	4bad      	ldr	r3, [pc, #692]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4bac      	ldr	r3, [pc, #688]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	0249      	lsls	r1, r1, #9
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e012      	b.n	80016b8 <HAL_RCC_OscConfig+0xd4>
 8001692:	4ba9      	ldr	r3, [pc, #676]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4ba8      	ldr	r3, [pc, #672]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001698:	49a8      	ldr	r1, [pc, #672]	; (800193c <HAL_RCC_OscConfig+0x358>)
 800169a:	400a      	ands	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	4ba6      	ldr	r3, [pc, #664]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	025b      	lsls	r3, r3, #9
 80016a6:	4013      	ands	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4ba2      	ldr	r3, [pc, #648]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4ba1      	ldr	r3, [pc, #644]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80016b2:	49a3      	ldr	r1, [pc, #652]	; (8001940 <HAL_RCC_OscConfig+0x35c>)
 80016b4:	400a      	ands	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d015      	beq.n	80016ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fcf0 	bl	80010a4 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016c8:	e009      	b.n	80016de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ca:	f7ff fceb 	bl	80010a4 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d902      	bls.n	80016de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	f000 fb3c 	bl	8001d56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016de:	4b96      	ldr	r3, [pc, #600]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	029b      	lsls	r3, r3, #10
 80016e6:	4013      	ands	r3, r2
 80016e8:	d0ef      	beq.n	80016ca <HAL_RCC_OscConfig+0xe6>
 80016ea:	e015      	b.n	8001718 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fcda 	bl	80010a4 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f6:	f7ff fcd5 	bl	80010a4 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b64      	cmp	r3, #100	; 0x64
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e326      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001708:	4b8b      	ldr	r3, [pc, #556]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	029b      	lsls	r3, r3, #10
 8001710:	4013      	ands	r3, r2
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x112>
 8001714:	e000      	b.n	8001718 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2202      	movs	r2, #2
 800171e:	4013      	ands	r3, r2
 8001720:	d100      	bne.n	8001724 <HAL_RCC_OscConfig+0x140>
 8001722:	e08b      	b.n	800183c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d005      	beq.n	800173c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d13e      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1d0>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d13b      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800173c:	4b7e      	ldr	r3, [pc, #504]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2204      	movs	r2, #4
 8001742:	4013      	ands	r3, r2
 8001744:	d004      	beq.n	8001750 <HAL_RCC_OscConfig+0x16c>
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e302      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	4b79      	ldr	r3, [pc, #484]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a7b      	ldr	r2, [pc, #492]	; (8001944 <HAL_RCC_OscConfig+0x360>)
 8001756:	4013      	ands	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	021a      	lsls	r2, r3, #8
 8001760:	4b75      	ldr	r3, [pc, #468]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001762:	430a      	orrs	r2, r1
 8001764:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001766:	4b74      	ldr	r3, [pc, #464]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2209      	movs	r2, #9
 800176c:	4393      	bics	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	4b71      	ldr	r3, [pc, #452]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001778:	f000 fc40 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 800177c:	0001      	movs	r1, r0
 800177e:	4b6e      	ldr	r3, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	220f      	movs	r2, #15
 8001786:	4013      	ands	r3, r2
 8001788:	4a6f      	ldr	r2, [pc, #444]	; (8001948 <HAL_RCC_OscConfig+0x364>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	000a      	movs	r2, r1
 800178e:	40da      	lsrs	r2, r3
 8001790:	4b6e      	ldr	r3, [pc, #440]	; (800194c <HAL_RCC_OscConfig+0x368>)
 8001792:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001794:	4b6e      	ldr	r3, [pc, #440]	; (8001950 <HAL_RCC_OscConfig+0x36c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2513      	movs	r5, #19
 800179a:	197c      	adds	r4, r7, r5
 800179c:	0018      	movs	r0, r3
 800179e:	f7ff fb3b 	bl	8000e18 <HAL_InitTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80017a6:	197b      	adds	r3, r7, r5
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d046      	beq.n	800183c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80017ae:	197b      	adds	r3, r7, r5
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	e2d0      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d027      	beq.n	800180a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2209      	movs	r2, #9
 80017c0:	4393      	bics	r3, r2
 80017c2:	0019      	movs	r1, r3
 80017c4:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fc6a 	bl	80010a4 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fc65 	bl	80010a4 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e2b6      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2204      	movs	r2, #4
 80017ee:	4013      	ands	r3, r2
 80017f0:	d0f1      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	4b51      	ldr	r3, [pc, #324]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a53      	ldr	r2, [pc, #332]	; (8001944 <HAL_RCC_OscConfig+0x360>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	021a      	lsls	r2, r3, #8
 8001802:	4b4d      	ldr	r3, [pc, #308]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	e018      	b.n	800183c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180a:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b4a      	ldr	r3, [pc, #296]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001810:	2101      	movs	r1, #1
 8001812:	438a      	bics	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff fc45 	bl	80010a4 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff fc40 	bl	80010a4 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e291      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2204      	movs	r2, #4
 8001838:	4013      	ands	r3, r2
 800183a:	d1f1      	bne.n	8001820 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2210      	movs	r2, #16
 8001842:	4013      	ands	r3, r2
 8001844:	d100      	bne.n	8001848 <HAL_RCC_OscConfig+0x264>
 8001846:	e0a1      	b.n	800198c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d140      	bne.n	80018d0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d005      	beq.n	8001866 <HAL_RCC_OscConfig+0x282>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e277      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a3a      	ldr	r2, [pc, #232]	; (8001954 <HAL_RCC_OscConfig+0x370>)
 800186c:	4013      	ands	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	0a19      	lsrs	r1, r3, #8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	061a      	lsls	r2, r3, #24
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 800188a:	430a      	orrs	r2, r1
 800188c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	0b5b      	lsrs	r3, r3, #13
 8001894:	3301      	adds	r3, #1
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	0212      	lsls	r2, r2, #8
 800189a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	210f      	movs	r1, #15
 80018a4:	400b      	ands	r3, r1
 80018a6:	4928      	ldr	r1, [pc, #160]	; (8001948 <HAL_RCC_OscConfig+0x364>)
 80018a8:	5ccb      	ldrb	r3, [r1, r3]
 80018aa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <HAL_RCC_OscConfig+0x368>)
 80018ae:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x36c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2513      	movs	r5, #19
 80018b6:	197c      	adds	r4, r7, r5
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff faad 	bl	8000e18 <HAL_InitTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018c2:	197b      	adds	r3, r7, r5
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d060      	beq.n	800198c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80018ca:	197b      	adds	r3, r7, r5
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	e242      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d03f      	beq.n	8001958 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	0049      	lsls	r1, r1, #1
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff fbdd 	bl	80010a4 <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f0:	f7ff fbd8 	bl	80010a4 <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e229      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_RCC_OscConfig+0x370>)
 8001914:	4013      	ands	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 800191e:	430a      	orrs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	0a19      	lsrs	r1, r3, #8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	061a      	lsls	r2, r3, #24
 8001930:	4b01      	ldr	r3, [pc, #4]	; (8001938 <HAL_RCC_OscConfig+0x354>)
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	e029      	b.n	800198c <HAL_RCC_OscConfig+0x3a8>
 8001938:	40021000 	.word	0x40021000
 800193c:	fffeffff 	.word	0xfffeffff
 8001940:	fffbffff 	.word	0xfffbffff
 8001944:	ffffe0ff 	.word	0xffffe0ff
 8001948:	08004f28 	.word	0x08004f28
 800194c:	20000008 	.word	0x20000008
 8001950:	2000000c 	.word	0x2000000c
 8001954:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001958:	4bbd      	ldr	r3, [pc, #756]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4bbc      	ldr	r3, [pc, #752]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 800195e:	49bd      	ldr	r1, [pc, #756]	; (8001c54 <HAL_RCC_OscConfig+0x670>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fb9e 	bl	80010a4 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800196e:	f7ff fb99 	bl	80010a4 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1ea      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001980:	4bb3      	ldr	r3, [pc, #716]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4013      	ands	r3, r2
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2208      	movs	r2, #8
 8001992:	4013      	ands	r3, r2
 8001994:	d036      	beq.n	8001a04 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d019      	beq.n	80019d2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4bac      	ldr	r3, [pc, #688]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 80019a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a2:	4bab      	ldr	r3, [pc, #684]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	430a      	orrs	r2, r1
 80019a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7ff fb7b 	bl	80010a4 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff fb76 	bl	80010a4 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e1c7      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019c6:	4ba2      	ldr	r3, [pc, #648]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 80019c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ca:	2202      	movs	r2, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	d0f1      	beq.n	80019b4 <HAL_RCC_OscConfig+0x3d0>
 80019d0:	e018      	b.n	8001a04 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d2:	4b9f      	ldr	r3, [pc, #636]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 80019d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d6:	4b9e      	ldr	r3, [pc, #632]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 80019d8:	2101      	movs	r1, #1
 80019da:	438a      	bics	r2, r1
 80019dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019de:	f7ff fb61 	bl	80010a4 <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff fb5c 	bl	80010a4 <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1ad      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019fa:	4b95      	ldr	r3, [pc, #596]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019fe:	2202      	movs	r2, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d1f1      	bne.n	80019e8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2204      	movs	r2, #4
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d100      	bne.n	8001a10 <HAL_RCC_OscConfig+0x42c>
 8001a0e:	e0ae      	b.n	8001b6e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a10:	2027      	movs	r0, #39	; 0x27
 8001a12:	183b      	adds	r3, r7, r0
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a18:	4b8d      	ldr	r3, [pc, #564]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	055b      	lsls	r3, r3, #21
 8001a20:	4013      	ands	r3, r2
 8001a22:	d109      	bne.n	8001a38 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	4b8a      	ldr	r3, [pc, #552]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a28:	4b89      	ldr	r3, [pc, #548]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0549      	lsls	r1, r1, #21
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a32:	183b      	adds	r3, r7, r0
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	4b87      	ldr	r3, [pc, #540]	; (8001c58 <HAL_RCC_OscConfig+0x674>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d11a      	bne.n	8001a7a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a44:	4b84      	ldr	r3, [pc, #528]	; (8001c58 <HAL_RCC_OscConfig+0x674>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b83      	ldr	r3, [pc, #524]	; (8001c58 <HAL_RCC_OscConfig+0x674>)
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	0049      	lsls	r1, r1, #1
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fb27 	bl	80010a4 <HAL_GetTick>
 8001a56:	0003      	movs	r3, r0
 8001a58:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7ff fb22 	bl	80010a4 <HAL_GetTick>
 8001a60:	0002      	movs	r2, r0
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e173      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x674>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4b2>
 8001a86:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a8a:	4b71      	ldr	r3, [pc, #452]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	0049      	lsls	r1, r1, #1
 8001a90:	430a      	orrs	r2, r1
 8001a92:	651a      	str	r2, [r3, #80]	; 0x50
 8001a94:	e031      	b.n	8001afa <HAL_RCC_OscConfig+0x516>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4d4>
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aa2:	4b6b      	ldr	r3, [pc, #428]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001aa4:	496b      	ldr	r1, [pc, #428]	; (8001c54 <HAL_RCC_OscConfig+0x670>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	651a      	str	r2, [r3, #80]	; 0x50
 8001aaa:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aae:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001ab0:	496a      	ldr	r1, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0x678>)
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ab6:	e020      	b.n	8001afa <HAL_RCC_OscConfig+0x516>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	23a0      	movs	r3, #160	; 0xa0
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d10e      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x4fe>
 8001ac4:	4b62      	ldr	r3, [pc, #392]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001ac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac8:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	00c9      	lsls	r1, r1, #3
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ad6:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	0049      	lsls	r1, r1, #1
 8001adc:	430a      	orrs	r2, r1
 8001ade:	651a      	str	r2, [r3, #80]	; 0x50
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x516>
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001ae8:	495a      	ldr	r1, [pc, #360]	; (8001c54 <HAL_RCC_OscConfig+0x670>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	651a      	str	r2, [r3, #80]	; 0x50
 8001aee:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af2:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001af4:	4959      	ldr	r1, [pc, #356]	; (8001c5c <HAL_RCC_OscConfig+0x678>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d015      	beq.n	8001b2e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff facf 	bl	80010a4 <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b0a:	e009      	b.n	8001b20 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7ff faca 	bl	80010a4 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_RCC_OscConfig+0x67c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e11a      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b20:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d0ef      	beq.n	8001b0c <HAL_RCC_OscConfig+0x528>
 8001b2c:	e014      	b.n	8001b58 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fab9 	bl	80010a4 <HAL_GetTick>
 8001b32:	0003      	movs	r3, r0
 8001b34:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b36:	e009      	b.n	8001b4c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff fab4 	bl	80010a4 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	4a47      	ldr	r2, [pc, #284]	; (8001c60 <HAL_RCC_OscConfig+0x67c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e104      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001b4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	d1ef      	bne.n	8001b38 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b58:	2327      	movs	r3, #39	; 0x27
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d105      	bne.n	8001b6e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001b68:	493e      	ldr	r1, [pc, #248]	; (8001c64 <HAL_RCC_OscConfig+0x680>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2220      	movs	r2, #32
 8001b74:	4013      	ands	r3, r2
 8001b76:	d049      	beq.n	8001c0c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d026      	beq.n	8001bce <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	430a      	orrs	r2, r1
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34
 8001b98:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <HAL_RCC_OscConfig+0x684>)
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <HAL_RCC_OscConfig+0x684>)
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	0189      	lsls	r1, r1, #6
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fa7d 	bl	80010a4 <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb0:	f7ff fa78 	bl	80010a4 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0c9      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d0f1      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x5cc>
 8001bcc:	e01e      	b.n	8001c0c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	438a      	bics	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_RCC_OscConfig+0x684>)
 8001bdc:	6a1a      	ldr	r2, [r3, #32]
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCC_OscConfig+0x684>)
 8001be0:	4922      	ldr	r1, [pc, #136]	; (8001c6c <HAL_RCC_OscConfig+0x688>)
 8001be2:	400a      	ands	r2, r1
 8001be4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff fa5d 	bl	80010a4 <HAL_GetTick>
 8001bea:	0003      	movs	r3, r0
 8001bec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bf0:	f7ff fa58 	bl	80010a4 <HAL_GetTick>
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0a9      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2202      	movs	r2, #2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d1f1      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d100      	bne.n	8001c16 <HAL_RCC_OscConfig+0x632>
 8001c14:	e09e      	b.n	8001d54 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x63a>
 8001c1c:	e077      	b.n	8001d0e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d158      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_OscConfig+0x66c>)
 8001c2c:	4910      	ldr	r1, [pc, #64]	; (8001c70 <HAL_RCC_OscConfig+0x68c>)
 8001c2e:	400a      	ands	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff fa37 	bl	80010a4 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c3a:	e01b      	b.n	8001c74 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff fa32 	bl	80010a4 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d914      	bls.n	8001c74 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e083      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40021000 	.word	0x40021000
 8001c54:	fffffeff 	.word	0xfffffeff
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	fffffbff 	.word	0xfffffbff
 8001c60:	00001388 	.word	0x00001388
 8001c64:	efffffff 	.word	0xefffffff
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	ffffdfff 	.word	0xffffdfff
 8001c70:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_RCC_OscConfig+0x77c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	049b      	lsls	r3, r3, #18
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d1dd      	bne.n	8001c3c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c80:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_RCC_OscConfig+0x77c>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4a37      	ldr	r2, [pc, #220]	; (8001d64 <HAL_RCC_OscConfig+0x780>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_RCC_OscConfig+0x77c>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCC_OscConfig+0x77c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <HAL_RCC_OscConfig+0x77c>)
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	0449      	lsls	r1, r1, #17
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff f9f9 	bl	80010a4 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff f9f4 	bl	80010a4 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e045      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cca:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_RCC_OscConfig+0x77c>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	049b      	lsls	r3, r3, #18
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x6d4>
 8001cd6:	e03d      	b.n	8001d54 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HAL_RCC_OscConfig+0x77c>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_RCC_OscConfig+0x77c>)
 8001cde:	4922      	ldr	r1, [pc, #136]	; (8001d68 <HAL_RCC_OscConfig+0x784>)
 8001ce0:	400a      	ands	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f9de 	bl	80010a4 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cee:	f7ff f9d9 	bl	80010a4 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e02a      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_RCC_OscConfig+0x77c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	049b      	lsls	r3, r3, #18
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x70a>
 8001d0c:	e022      	b.n	8001d54 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e01d      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_RCC_OscConfig+0x77c>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	025b      	lsls	r3, r3, #9
 8001d26:	401a      	ands	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d10f      	bne.n	8001d50 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	23f0      	movs	r3, #240	; 0xf0
 8001d34:	039b      	lsls	r3, r3, #14
 8001d36:	401a      	ands	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	23c0      	movs	r3, #192	; 0xc0
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	401a      	ands	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b00a      	add	sp, #40	; 0x28
 8001d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	40021000 	.word	0x40021000
 8001d64:	ff02ffff 	.word	0xff02ffff
 8001d68:	feffffff 	.word	0xfeffffff

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e128      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b96      	ldr	r3, [pc, #600]	; (8001fdc <HAL_RCC_ClockConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d91e      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b93      	ldr	r3, [pc, #588]	; (8001fdc <HAL_RCC_ClockConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2201      	movs	r2, #1
 8001d94:	4393      	bics	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	4b90      	ldr	r3, [pc, #576]	; (8001fdc <HAL_RCC_ClockConfig+0x270>)
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001da0:	f7ff f980 	bl	80010a4 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da8:	e009      	b.n	8001dbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001daa:	f7ff f97b 	bl	80010a4 <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4a8a      	ldr	r2, [pc, #552]	; (8001fe0 <HAL_RCC_ClockConfig+0x274>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e109      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b87      	ldr	r3, [pc, #540]	; (8001fdc <HAL_RCC_ClockConfig+0x270>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d1ee      	bne.n	8001daa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d009      	beq.n	8001dea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd6:	4b83      	ldr	r3, [pc, #524]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	22f0      	movs	r2, #240	; 0xf0
 8001ddc:	4393      	bics	r3, r2
 8001dde:	0019      	movs	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	4b7f      	ldr	r3, [pc, #508]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001de6:	430a      	orrs	r2, r1
 8001de8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d100      	bne.n	8001df6 <HAL_RCC_ClockConfig+0x8a>
 8001df4:	e089      	b.n	8001f0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dfe:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	029b      	lsls	r3, r3, #10
 8001e06:	4013      	ands	r3, r2
 8001e08:	d120      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e1      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e16:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	049b      	lsls	r3, r3, #18
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d114      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0d5      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d106      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2204      	movs	r2, #4
 8001e34:	4013      	ands	r3, r2
 8001e36:	d109      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0ca      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e3c:	4b69      	ldr	r3, [pc, #420]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0c2      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4c:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2203      	movs	r2, #3
 8001e52:	4393      	bics	r3, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e60:	f7ff f920 	bl	80010a4 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d111      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e70:	e009      	b.n	8001e86 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e72:	f7ff f917 	bl	80010a4 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_RCC_ClockConfig+0x274>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0a5      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e86:	4b57      	ldr	r3, [pc, #348]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d1ef      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x106>
 8001e92:	e03a      	b.n	8001f0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d111      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e9c:	e009      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9e:	f7ff f901 	bl	80010a4 <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	4a4d      	ldr	r2, [pc, #308]	; (8001fe0 <HAL_RCC_ClockConfig+0x274>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e08f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb2:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d1ef      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x132>
 8001ebe:	e024      	b.n	8001f0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d11b      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec8:	e009      	b.n	8001ede <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eca:	f7ff f8eb 	bl	80010a4 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	4a42      	ldr	r2, [pc, #264]	; (8001fe0 <HAL_RCC_ClockConfig+0x274>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e079      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ede:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d1ef      	bne.n	8001eca <HAL_RCC_ClockConfig+0x15e>
 8001eea:	e00e      	b.n	8001f0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7ff f8da 	bl	80010a4 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	4a3a      	ldr	r2, [pc, #232]	; (8001fe0 <HAL_RCC_ClockConfig+0x274>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e068      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f00:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	220c      	movs	r2, #12
 8001f06:	4013      	ands	r3, r2
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0a:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_RCC_ClockConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d21e      	bcs.n	8001f56 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCC_ClockConfig+0x270>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4393      	bics	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_RCC_ClockConfig+0x270>)
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f2a:	f7ff f8bb 	bl	80010a4 <HAL_GetTick>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	e009      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f34:	f7ff f8b6 	bl	80010a4 <HAL_GetTick>
 8001f38:	0002      	movs	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <HAL_RCC_ClockConfig+0x274>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e044      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_RCC_ClockConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d1ee      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f60:	4b20      	ldr	r3, [pc, #128]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <HAL_RCC_ClockConfig+0x27c>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	0019      	movs	r1, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2208      	movs	r2, #8
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d00a      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <HAL_RCC_ClockConfig+0x280>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	00da      	lsls	r2, r3, #3
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f94:	f000 f832 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001f98:	0001      	movs	r1, r0
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <HAL_RCC_ClockConfig+0x284>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	000a      	movs	r2, r1
 8001faa:	40da      	lsrs	r2, r3
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_RCC_ClockConfig+0x288>)
 8001fae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_RCC_ClockConfig+0x28c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	250b      	movs	r5, #11
 8001fb6:	197c      	adds	r4, r7, r5
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7fe ff2d 	bl	8000e18 <HAL_InitTick>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001fc2:	197b      	adds	r3, r7, r5
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001fca:	197b      	adds	r3, r7, r5
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b004      	add	sp, #16
 8001fd8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	00001388 	.word	0x00001388
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	fffff8ff 	.word	0xfffff8ff
 8001fec:	ffffc7ff 	.word	0xffffc7ff
 8001ff0:	08004f28 	.word	0x08004f28
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	2000000c 	.word	0x2000000c

08001ffc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b5b0      	push	{r4, r5, r7, lr}
 8001ffe:	b08e      	sub	sp, #56	; 0x38
 8002000:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002002:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_GetSysClockFreq+0x138>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800200a:	230c      	movs	r3, #12
 800200c:	4013      	ands	r3, r2
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d014      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x40>
 8002012:	d900      	bls.n	8002016 <HAL_RCC_GetSysClockFreq+0x1a>
 8002014:	e07b      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x112>
 8002016:	2b04      	cmp	r3, #4
 8002018:	d002      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x24>
 800201a:	2b08      	cmp	r3, #8
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0x3a>
 800201e:	e076      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002020:	4b44      	ldr	r3, [pc, #272]	; (8002134 <HAL_RCC_GetSysClockFreq+0x138>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2210      	movs	r2, #16
 8002026:	4013      	ands	r3, r2
 8002028:	d002      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800202a:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCC_GetSysClockFreq+0x13c>)
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800202e:	e07c      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002030:	4b42      	ldr	r3, [pc, #264]	; (800213c <HAL_RCC_GetSysClockFreq+0x140>)
 8002032:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002034:	e079      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002036:	4b42      	ldr	r3, [pc, #264]	; (8002140 <HAL_RCC_GetSysClockFreq+0x144>)
 8002038:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800203a:	e076      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	0c9a      	lsrs	r2, r3, #18
 8002040:	230f      	movs	r3, #15
 8002042:	401a      	ands	r2, r3
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_GetSysClockFreq+0x148>)
 8002046:	5c9b      	ldrb	r3, [r3, r2]
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	0d9a      	lsrs	r2, r3, #22
 800204e:	2303      	movs	r3, #3
 8002050:	4013      	ands	r3, r2
 8002052:	3301      	adds	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002056:	4b37      	ldr	r3, [pc, #220]	; (8002134 <HAL_RCC_GetSysClockFreq+0x138>)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	4013      	ands	r3, r2
 8002060:	d01a      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	4a35      	ldr	r2, [pc, #212]	; (8002140 <HAL_RCC_GetSysClockFreq+0x144>)
 800206c:	2300      	movs	r3, #0
 800206e:	69b8      	ldr	r0, [r7, #24]
 8002070:	69f9      	ldr	r1, [r7, #28]
 8002072:	f7fe f9e9 	bl	8000448 <__aeabi_lmul>
 8002076:	0002      	movs	r2, r0
 8002078:	000b      	movs	r3, r1
 800207a:	0010      	movs	r0, r2
 800207c:	0019      	movs	r1, r3
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f7fe f9bd 	bl	8000408 <__aeabi_uldivmod>
 800208e:	0002      	movs	r2, r0
 8002090:	000b      	movs	r3, r1
 8002092:	0013      	movs	r3, r2
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
 8002096:	e037      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002098:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_RCC_GetSysClockFreq+0x138>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2210      	movs	r2, #16
 800209e:	4013      	ands	r3, r2
 80020a0:	d01a      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	4a23      	ldr	r2, [pc, #140]	; (8002138 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020ac:	2300      	movs	r3, #0
 80020ae:	68b8      	ldr	r0, [r7, #8]
 80020b0:	68f9      	ldr	r1, [r7, #12]
 80020b2:	f7fe f9c9 	bl	8000448 <__aeabi_lmul>
 80020b6:	0002      	movs	r2, r0
 80020b8:	000b      	movs	r3, r1
 80020ba:	0010      	movs	r0, r2
 80020bc:	0019      	movs	r1, r3
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f7fe f99d 	bl	8000408 <__aeabi_uldivmod>
 80020ce:	0002      	movs	r2, r0
 80020d0:	000b      	movs	r3, r1
 80020d2:	0013      	movs	r3, r2
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
 80020d6:	e017      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	0018      	movs	r0, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	0019      	movs	r1, r3
 80020e0:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_RCC_GetSysClockFreq+0x140>)
 80020e2:	2300      	movs	r3, #0
 80020e4:	f7fe f9b0 	bl	8000448 <__aeabi_lmul>
 80020e8:	0002      	movs	r2, r0
 80020ea:	000b      	movs	r3, r1
 80020ec:	0010      	movs	r0, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	001c      	movs	r4, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	001d      	movs	r5, r3
 80020f8:	0022      	movs	r2, r4
 80020fa:	002b      	movs	r3, r5
 80020fc:	f7fe f984 	bl	8000408 <__aeabi_uldivmod>
 8002100:	0002      	movs	r2, r0
 8002102:	000b      	movs	r3, r1
 8002104:	0013      	movs	r3, r2
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800210c:	e00d      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_GetSysClockFreq+0x138>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	0b5b      	lsrs	r3, r3, #13
 8002114:	2207      	movs	r2, #7
 8002116:	4013      	ands	r3, r2
 8002118:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	3301      	adds	r3, #1
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	0212      	lsls	r2, r2, #8
 8002122:	409a      	lsls	r2, r3
 8002124:	0013      	movs	r3, r2
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002128:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b00e      	add	sp, #56	; 0x38
 8002132:	bdb0      	pop	{r4, r5, r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	003d0900 	.word	0x003d0900
 800213c:	00f42400 	.word	0x00f42400
 8002140:	007a1200 	.word	0x007a1200
 8002144:	08004f40 	.word	0x08004f40

08002148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_RCC_GetHCLKFreq+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	20000008 	.word	0x20000008

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002160:	f7ff fff2 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002164:	0001      	movs	r1, r0
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	2207      	movs	r2, #7
 800216e:	4013      	ands	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	40d9      	lsrs	r1, r3
 8002176:	000b      	movs	r3, r1
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	40021000 	.word	0x40021000
 8002184:	08004f38 	.word	0x08004f38

08002188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800218c:	f7ff ffdc 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002190:	0001      	movs	r1, r0
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	0adb      	lsrs	r3, r3, #11
 8002198:	2207      	movs	r2, #7
 800219a:	4013      	ands	r3, r2
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	40d9      	lsrs	r1, r3
 80021a2:	000b      	movs	r3, r1
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08004f38 	.word	0x08004f38

080021b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	220f      	movs	r2, #15
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_RCC_GetClockConfig+0x5c>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2203      	movs	r2, #3
 80021ca:	401a      	ands	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_RCC_GetClockConfig+0x5c>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	22f0      	movs	r2, #240	; 0xf0
 80021d6:	401a      	ands	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_RCC_GetClockConfig+0x5c>)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	23e0      	movs	r3, #224	; 0xe0
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	401a      	ands	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_GetClockConfig+0x5c>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	23e0      	movs	r3, #224	; 0xe0
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	401a      	ands	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_GetClockConfig+0x60>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2201      	movs	r2, #1
 8002200:	401a      	ands	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	601a      	str	r2, [r3, #0]
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	40021000 	.word	0x40021000
 8002214:	40022000 	.word	0x40022000

08002218 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002220:	2317      	movs	r3, #23
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2220      	movs	r2, #32
 800222e:	4013      	ands	r3, r2
 8002230:	d106      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	4013      	ands	r3, r2
 800223c:	d100      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800223e:	e0d9      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002240:	4b9c      	ldr	r3, [pc, #624]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	055b      	lsls	r3, r3, #21
 8002248:	4013      	ands	r3, r2
 800224a:	d10a      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b99      	ldr	r3, [pc, #612]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800224e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002250:	4b98      	ldr	r3, [pc, #608]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0549      	lsls	r1, r1, #21
 8002256:	430a      	orrs	r2, r1
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800225a:	2317      	movs	r3, #23
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b95      	ldr	r3, [pc, #596]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4013      	ands	r3, r2
 800226c:	d11a      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226e:	4b92      	ldr	r3, [pc, #584]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	0049      	lsls	r1, r1, #1
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227c:	f7fe ff12 	bl	80010a4 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	e008      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7fe ff0d 	bl	80010a4 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	; 0x64
 8002292:	d901      	bls.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e108      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b87      	ldr	r3, [pc, #540]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4013      	ands	r3, r2
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80022a4:	4b83      	ldr	r3, [pc, #524]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	23c0      	movs	r3, #192	; 0xc0
 80022aa:	039b      	lsls	r3, r3, #14
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	23c0      	movs	r3, #192	; 0xc0
 80022b6:	039b      	lsls	r3, r3, #14
 80022b8:	4013      	ands	r3, r2
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d107      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	23c0      	movs	r3, #192	; 0xc0
 80022c6:	039b      	lsls	r3, r3, #14
 80022c8:	4013      	ands	r3, r2
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d013      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	23c0      	movs	r3, #192	; 0xc0
 80022d6:	029b      	lsls	r3, r3, #10
 80022d8:	401a      	ands	r2, r3
 80022da:	23c0      	movs	r3, #192	; 0xc0
 80022dc:	029b      	lsls	r3, r3, #10
 80022de:	429a      	cmp	r2, r3
 80022e0:	d10a      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80022e2:	4b74      	ldr	r3, [pc, #464]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	029b      	lsls	r3, r3, #10
 80022ea:	401a      	ands	r2, r3
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	029b      	lsls	r3, r3, #10
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d101      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0d8      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80022f8:	4b6e      	ldr	r3, [pc, #440]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022fc:	23c0      	movs	r3, #192	; 0xc0
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d049      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	23c0      	movs	r3, #192	; 0xc0
 8002310:	029b      	lsls	r3, r3, #10
 8002312:	4013      	ands	r3, r2
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	429a      	cmp	r2, r3
 8002318:	d004      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2220      	movs	r2, #32
 8002320:	4013      	ands	r3, r2
 8002322:	d10d      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	23c0      	movs	r3, #192	; 0xc0
 800232a:	029b      	lsls	r3, r3, #10
 800232c:	4013      	ands	r3, r2
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d034      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	4013      	ands	r3, r2
 800233e:	d02e      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002340:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002346:	4013      	ands	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800234a:	4b5a      	ldr	r3, [pc, #360]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800234c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800234e:	4b59      	ldr	r3, [pc, #356]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	0309      	lsls	r1, r1, #12
 8002354:	430a      	orrs	r2, r1
 8002356:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002358:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800235a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235c:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800235e:	4958      	ldr	r1, [pc, #352]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002360:	400a      	ands	r2, r1
 8002362:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4013      	ands	r3, r2
 8002372:	d014      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe fe96 	bl	80010a4 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800237c:	e009      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7fe fe91 	bl	80010a4 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	4a4e      	ldr	r2, [pc, #312]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e08b      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002392:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002394:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4013      	ands	r3, r2
 800239c:	d0ef      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	23c0      	movs	r3, #192	; 0xc0
 80023a4:	029b      	lsls	r3, r3, #10
 80023a6:	401a      	ands	r2, r3
 80023a8:	23c0      	movs	r3, #192	; 0xc0
 80023aa:	029b      	lsls	r3, r3, #10
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d10c      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a44      	ldr	r2, [pc, #272]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	0019      	movs	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	039b      	lsls	r3, r3, #14
 80023c2:	401a      	ands	r2, r3
 80023c4:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	23c0      	movs	r3, #192	; 0xc0
 80023d4:	029b      	lsls	r3, r3, #10
 80023d6:	401a      	ands	r2, r3
 80023d8:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023de:	2317      	movs	r3, #23
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e8:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023ee:	4937      	ldr	r1, [pc, #220]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2201      	movs	r2, #1
 80023fa:	4013      	ands	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	2203      	movs	r2, #3
 8002404:	4393      	bics	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800240e:	430a      	orrs	r2, r1
 8002410:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2202      	movs	r2, #2
 8002418:	4013      	ands	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800241c:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	220c      	movs	r2, #12
 8002422:	4393      	bics	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800242c:	430a      	orrs	r2, r1
 800242e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2204      	movs	r2, #4
 8002436:	4013      	ands	r3, r2
 8002438:	d009      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695a      	ldr	r2, [r3, #20]
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800244a:	430a      	orrs	r2, r1
 800244c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2208      	movs	r2, #8
 8002454:	4013      	ands	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800245e:	4013      	ands	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002468:	430a      	orrs	r2, r1
 800246a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	4013      	ands	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002486:	430a      	orrs	r2, r1
 8002488:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	4013      	ands	r3, r2
 8002492:	d009      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800249a:	4013      	ands	r3, r2
 800249c:	0019      	movs	r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024a4:	430a      	orrs	r2, r1
 80024a6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b006      	add	sp, #24
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
 80024bc:	fffcffff 	.word	0xfffcffff
 80024c0:	fff7ffff 	.word	0xfff7ffff
 80024c4:	00001388 	.word	0x00001388
 80024c8:	ffcfffff 	.word	0xffcfffff
 80024cc:	efffffff 	.word	0xefffffff
 80024d0:	fffff3ff 	.word	0xfffff3ff
 80024d4:	ffffcfff 	.word	0xffffcfff
 80024d8:	fbffffff 	.word	0xfbffffff
 80024dc:	fff3ffff 	.word	0xfff3ffff

080024e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e032      	b.n	8002558 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2239      	movs	r2, #57	; 0x39
 80024f6:	5c9b      	ldrb	r3, [r3, r2]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d107      	bne.n	800250e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2238      	movs	r2, #56	; 0x38
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f829 	bl	8002560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2239      	movs	r2, #57	; 0x39
 8002512:	2102      	movs	r1, #2
 8002514:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3304      	adds	r3, #4
 800251e:	0019      	movs	r1, r3
 8002520:	0010      	movs	r0, r2
 8002522:	f000 f979 	bl	8002818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	223e      	movs	r2, #62	; 0x3e
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	223a      	movs	r2, #58	; 0x3a
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	223b      	movs	r2, #59	; 0x3b
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	223c      	movs	r2, #60	; 0x3c
 8002542:	2101      	movs	r1, #1
 8002544:	5499      	strb	r1, [r3, r2]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	223d      	movs	r2, #61	; 0x3d
 800254a:	2101      	movs	r1, #1
 800254c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2239      	movs	r2, #57	; 0x39
 8002552:	2101      	movs	r1, #1
 8002554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2239      	movs	r2, #57	; 0x39
 800257c:	5c9b      	ldrb	r3, [r3, r2]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d001      	beq.n	8002588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e036      	b.n	80025f6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2239      	movs	r2, #57	; 0x39
 800258c:	2102      	movs	r1, #2
 800258e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2101      	movs	r1, #1
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	05db      	lsls	r3, r3, #23
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d009      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0x50>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a13      	ldr	r2, [pc, #76]	; (8002600 <HAL_TIM_Base_Start_IT+0x90>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d004      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0x50>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a12      	ldr	r2, [pc, #72]	; (8002604 <HAL_TIM_Base_Start_IT+0x94>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d111      	bne.n	80025e4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2207      	movs	r2, #7
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d010      	beq.n	80025f4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e2:	e007      	b.n	80025f4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2101      	movs	r1, #1
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b004      	add	sp, #16
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	40010800 	.word	0x40010800
 8002604:	40011400 	.word	0x40011400

08002608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2202      	movs	r2, #2
 8002618:	4013      	ands	r3, r2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d124      	bne.n	8002668 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2202      	movs	r2, #2
 8002626:	4013      	ands	r3, r2
 8002628:	2b02      	cmp	r3, #2
 800262a:	d11d      	bne.n	8002668 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2203      	movs	r2, #3
 8002632:	4252      	negs	r2, r2
 8002634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2203      	movs	r2, #3
 8002644:	4013      	ands	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 f8cc 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 8002650:	e007      	b.n	8002662 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	0018      	movs	r0, r3
 8002656:	f000 f8bf 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 f8cb 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2204      	movs	r2, #4
 8002670:	4013      	ands	r3, r2
 8002672:	2b04      	cmp	r3, #4
 8002674:	d125      	bne.n	80026c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2204      	movs	r2, #4
 800267e:	4013      	ands	r3, r2
 8002680:	2b04      	cmp	r3, #4
 8002682:	d11e      	bne.n	80026c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2205      	movs	r2, #5
 800268a:	4252      	negs	r2, r2
 800268c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2202      	movs	r2, #2
 8002692:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	23c0      	movs	r3, #192	; 0xc0
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	d004      	beq.n	80026ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 f89f 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 80026aa:	e007      	b.n	80026bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f892 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 f89e 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	2208      	movs	r2, #8
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d124      	bne.n	800271a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2208      	movs	r2, #8
 80026d8:	4013      	ands	r3, r2
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d11d      	bne.n	800271a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2209      	movs	r2, #9
 80026e4:	4252      	negs	r2, r2
 80026e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2204      	movs	r2, #4
 80026ec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2203      	movs	r2, #3
 80026f6:	4013      	ands	r3, r2
 80026f8:	d004      	beq.n	8002704 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f873 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 8002702:	e007      	b.n	8002714 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f866 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0018      	movs	r0, r3
 8002710:	f000 f872 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2210      	movs	r2, #16
 8002722:	4013      	ands	r3, r2
 8002724:	2b10      	cmp	r3, #16
 8002726:	d125      	bne.n	8002774 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2210      	movs	r2, #16
 8002730:	4013      	ands	r3, r2
 8002732:	2b10      	cmp	r3, #16
 8002734:	d11e      	bne.n	8002774 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2211      	movs	r2, #17
 800273c:	4252      	negs	r2, r2
 800273e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2208      	movs	r2, #8
 8002744:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	23c0      	movs	r3, #192	; 0xc0
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4013      	ands	r3, r2
 8002752:	d004      	beq.n	800275e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 f846 	bl	80027e8 <HAL_TIM_IC_CaptureCallback>
 800275c:	e007      	b.n	800276e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0018      	movs	r0, r3
 8002762:	f000 f839 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f000 f845 	bl	80027f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2201      	movs	r2, #1
 800277c:	4013      	ands	r3, r2
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10f      	bne.n	80027a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	4013      	ands	r3, r2
 800278c:	2b01      	cmp	r3, #1
 800278e:	d108      	bne.n	80027a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2202      	movs	r2, #2
 8002796:	4252      	negs	r2, r2
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f7fe fa5b 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2240      	movs	r2, #64	; 0x40
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b40      	cmp	r3, #64	; 0x40
 80027ae:	d10f      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d108      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2241      	movs	r2, #65	; 0x41
 80027c4:	4252      	negs	r2, r2
 80027c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 f81c 	bl	8002808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002810:	46c0      	nop			; (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}

08002818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	05db      	lsls	r3, r3, #23
 800282e:	429a      	cmp	r2, r3
 8002830:	d007      	beq.n	8002842 <TIM_Base_SetConfig+0x2a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <TIM_Base_SetConfig+0x9c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d003      	beq.n	8002842 <TIM_Base_SetConfig+0x2a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <TIM_Base_SetConfig+0xa0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2270      	movs	r2, #112	; 0x70
 8002846:	4393      	bics	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	05db      	lsls	r3, r3, #23
 800285a:	429a      	cmp	r2, r3
 800285c:	d007      	beq.n	800286e <TIM_Base_SetConfig+0x56>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <TIM_Base_SetConfig+0x9c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d003      	beq.n	800286e <TIM_Base_SetConfig+0x56>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <TIM_Base_SetConfig+0xa0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d108      	bne.n	8002880 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4a12      	ldr	r2, [pc, #72]	; (80028bc <TIM_Base_SetConfig+0xa4>)
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	4393      	bics	r3, r2
 8002886:	001a      	movs	r2, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	615a      	str	r2, [r3, #20]
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40010800 	.word	0x40010800
 80028b8:	40011400 	.word	0x40011400
 80028bc:	fffffcff 	.word	0xfffffcff

080028c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e044      	b.n	800295c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2274      	movs	r2, #116	; 0x74
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe fa53 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2224      	movs	r2, #36	; 0x24
 80028ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	438a      	bics	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0018      	movs	r0, r3
 8002904:	f000 f9c6 	bl	8002c94 <UART_SetConfig>
 8002908:	0003      	movs	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e024      	b.n	800295c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fc59 	bl	80031d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	490d      	ldr	r1, [pc, #52]	; (8002964 <HAL_UART_Init+0xa4>)
 800292e:	400a      	ands	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	212a      	movs	r1, #42	; 0x2a
 800293e:	438a      	bics	r2, r1
 8002940:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2101      	movs	r1, #1
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0018      	movs	r0, r3
 8002956:	f000 fcf1 	bl	800333c <UART_CheckIdleState>
 800295a:	0003      	movs	r3, r0
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}
 8002964:	ffffb7ff 	.word	0xffffb7ff

08002968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	1dbb      	adds	r3, r7, #6
 8002976:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297c:	2b20      	cmp	r3, #32
 800297e:	d000      	beq.n	8002982 <HAL_UART_Transmit+0x1a>
 8002980:	e095      	b.n	8002aae <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_UART_Transmit+0x28>
 8002988:	1dbb      	adds	r3, r7, #6
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e08d      	b.n	8002ab0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	429a      	cmp	r2, r3
 800299e:	d109      	bne.n	80029b4 <HAL_UART_Transmit+0x4c>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2201      	movs	r2, #1
 80029ac:	4013      	ands	r3, r2
 80029ae:	d001      	beq.n	80029b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e07d      	b.n	8002ab0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2274      	movs	r2, #116	; 0x74
 80029b8:	5c9b      	ldrb	r3, [r3, r2]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Transmit+0x5a>
 80029be:	2302      	movs	r3, #2
 80029c0:	e076      	b.n	8002ab0 <HAL_UART_Transmit+0x148>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2274      	movs	r2, #116	; 0x74
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	2100      	movs	r1, #0
 80029d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2221      	movs	r2, #33	; 0x21
 80029d6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029d8:	f7fe fb64 	bl	80010a4 <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1dba      	adds	r2, r7, #6
 80029e4:	2150      	movs	r1, #80	; 0x50
 80029e6:	8812      	ldrh	r2, [r2, #0]
 80029e8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1dba      	adds	r2, r7, #6
 80029ee:	2152      	movs	r1, #82	; 0x52
 80029f0:	8812      	ldrh	r2, [r2, #0]
 80029f2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	015b      	lsls	r3, r3, #5
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d108      	bne.n	8002a12 <HAL_UART_Transmit+0xaa>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d104      	bne.n	8002a12 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	e003      	b.n	8002a1a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2274      	movs	r2, #116	; 0x74
 8002a1e:	2100      	movs	r1, #0
 8002a20:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002a22:	e02c      	b.n	8002a7e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	f000 fccb 	bl	80033cc <UART_WaitOnFlagUntilTimeout>
 8002a36:	1e03      	subs	r3, r0, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e038      	b.n	8002ab0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	001a      	movs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	05d2      	lsls	r2, r2, #23
 8002a50:	0dd2      	lsrs	r2, r2, #23
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	3302      	adds	r3, #2
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	e007      	b.n	8002a6c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	781a      	ldrb	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2252      	movs	r2, #82	; 0x52
 8002a70:	5a9b      	ldrh	r3, [r3, r2]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b299      	uxth	r1, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2252      	movs	r2, #82	; 0x52
 8002a7c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2252      	movs	r2, #82	; 0x52
 8002a82:	5a9b      	ldrh	r3, [r3, r2]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1cc      	bne.n	8002a24 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	0013      	movs	r3, r2
 8002a94:	2200      	movs	r2, #0
 8002a96:	2140      	movs	r1, #64	; 0x40
 8002a98:	f000 fc98 	bl	80033cc <UART_WaitOnFlagUntilTimeout>
 8002a9c:	1e03      	subs	r3, r0, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e005      	b.n	8002ab0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b008      	add	sp, #32
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	1dbb      	adds	r3, r7, #6
 8002ac6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d000      	beq.n	8002ad2 <HAL_UART_Receive+0x1a>
 8002ad0:	e0d9      	b.n	8002c86 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_UART_Receive+0x28>
 8002ad8:	1dbb      	adds	r3, r7, #6
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0d1      	b.n	8002c88 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	015b      	lsls	r3, r3, #5
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d109      	bne.n	8002b04 <HAL_UART_Receive+0x4c>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2201      	movs	r2, #1
 8002afc:	4013      	ands	r3, r2
 8002afe:	d001      	beq.n	8002b04 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0c1      	b.n	8002c88 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2274      	movs	r2, #116	; 0x74
 8002b08:	5c9b      	ldrb	r3, [r3, r2]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Receive+0x5a>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e0ba      	b.n	8002c88 <HAL_UART_Receive+0x1d0>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2274      	movs	r2, #116	; 0x74
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2222      	movs	r2, #34	; 0x22
 8002b26:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b2e:	f7fe fab9 	bl	80010a4 <HAL_GetTick>
 8002b32:	0003      	movs	r3, r0
 8002b34:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1dba      	adds	r2, r7, #6
 8002b3a:	2158      	movs	r1, #88	; 0x58
 8002b3c:	8812      	ldrh	r2, [r2, #0]
 8002b3e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1dba      	adds	r2, r7, #6
 8002b44:	215a      	movs	r1, #90	; 0x5a
 8002b46:	8812      	ldrh	r2, [r2, #0]
 8002b48:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	015b      	lsls	r3, r3, #5
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10d      	bne.n	8002b72 <HAL_UART_Receive+0xba>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <HAL_UART_Receive+0xb0>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	225c      	movs	r2, #92	; 0x5c
 8002b62:	494b      	ldr	r1, [pc, #300]	; (8002c90 <HAL_UART_Receive+0x1d8>)
 8002b64:	5299      	strh	r1, [r3, r2]
 8002b66:	e02e      	b.n	8002bc6 <HAL_UART_Receive+0x10e>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	225c      	movs	r2, #92	; 0x5c
 8002b6c:	21ff      	movs	r1, #255	; 0xff
 8002b6e:	5299      	strh	r1, [r3, r2]
 8002b70:	e029      	b.n	8002bc6 <HAL_UART_Receive+0x10e>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <HAL_UART_Receive+0xde>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <HAL_UART_Receive+0xd4>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	225c      	movs	r2, #92	; 0x5c
 8002b86:	21ff      	movs	r1, #255	; 0xff
 8002b88:	5299      	strh	r1, [r3, r2]
 8002b8a:	e01c      	b.n	8002bc6 <HAL_UART_Receive+0x10e>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	225c      	movs	r2, #92	; 0x5c
 8002b90:	217f      	movs	r1, #127	; 0x7f
 8002b92:	5299      	strh	r1, [r3, r2]
 8002b94:	e017      	b.n	8002bc6 <HAL_UART_Receive+0x10e>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	055b      	lsls	r3, r3, #21
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d10d      	bne.n	8002bbe <HAL_UART_Receive+0x106>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_UART_Receive+0xfc>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	225c      	movs	r2, #92	; 0x5c
 8002bae:	217f      	movs	r1, #127	; 0x7f
 8002bb0:	5299      	strh	r1, [r3, r2]
 8002bb2:	e008      	b.n	8002bc6 <HAL_UART_Receive+0x10e>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	225c      	movs	r2, #92	; 0x5c
 8002bb8:	213f      	movs	r1, #63	; 0x3f
 8002bba:	5299      	strh	r1, [r3, r2]
 8002bbc:	e003      	b.n	8002bc6 <HAL_UART_Receive+0x10e>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	225c      	movs	r2, #92	; 0x5c
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002bc6:	2312      	movs	r3, #18
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	215c      	movs	r1, #92	; 0x5c
 8002bce:	5a52      	ldrh	r2, [r2, r1]
 8002bd0:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	015b      	lsls	r3, r3, #5
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d108      	bne.n	8002bf0 <HAL_UART_Receive+0x138>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	e003      	b.n	8002bf8 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2274      	movs	r2, #116	; 0x74
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c00:	e036      	b.n	8002c70 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2120      	movs	r1, #32
 8002c10:	f000 fbdc 	bl	80033cc <UART_WaitOnFlagUntilTimeout>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e035      	b.n	8002c88 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10e      	bne.n	8002c40 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2212      	movs	r2, #18
 8002c2c:	18ba      	adds	r2, r7, r2
 8002c2e:	8812      	ldrh	r2, [r2, #0]
 8002c30:	4013      	ands	r3, r2
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	e00e      	b.n	8002c5e <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2212      	movs	r2, #18
 8002c4a:	18ba      	adds	r2, r7, r2
 8002c4c:	8812      	ldrh	r2, [r2, #0]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	4013      	ands	r3, r2
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	225a      	movs	r2, #90	; 0x5a
 8002c62:	5a9b      	ldrh	r3, [r3, r2]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b299      	uxth	r1, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	225a      	movs	r2, #90	; 0x5a
 8002c6e:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	225a      	movs	r2, #90	; 0x5a
 8002c74:	5a9b      	ldrh	r3, [r3, r2]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1c2      	bne.n	8002c02 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e000      	b.n	8002c88 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
  }
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b008      	add	sp, #32
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	000001ff 	.word	0x000001ff

08002c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c94:	b5b0      	push	{r4, r5, r7, lr}
 8002c96:	b08e      	sub	sp, #56	; 0x38
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c9c:	231a      	movs	r3, #26
 8002c9e:	2218      	movs	r2, #24
 8002ca0:	4694      	mov	ip, r2
 8002ca2:	44bc      	add	ip, r7
 8002ca4:	4463      	add	r3, ip
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4ac1      	ldr	r2, [pc, #772]	; (8002fd0 <UART_SetConfig+0x33c>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4abd      	ldr	r2, [pc, #756]	; (8002fd4 <UART_SetConfig+0x340>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4ab7      	ldr	r2, [pc, #732]	; (8002fd8 <UART_SetConfig+0x344>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d06:	4313      	orrs	r3, r2
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4ab2      	ldr	r2, [pc, #712]	; (8002fdc <UART_SetConfig+0x348>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4aae      	ldr	r2, [pc, #696]	; (8002fe0 <UART_SetConfig+0x34c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d136      	bne.n	8002d98 <UART_SetConfig+0x104>
 8002d2a:	4bae      	ldr	r3, [pc, #696]	; (8002fe4 <UART_SetConfig+0x350>)
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2e:	2203      	movs	r2, #3
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d020      	beq.n	8002d78 <UART_SetConfig+0xe4>
 8002d36:	d827      	bhi.n	8002d88 <UART_SetConfig+0xf4>
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d00d      	beq.n	8002d58 <UART_SetConfig+0xc4>
 8002d3c:	d824      	bhi.n	8002d88 <UART_SetConfig+0xf4>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <UART_SetConfig+0xb4>
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d010      	beq.n	8002d68 <UART_SetConfig+0xd4>
 8002d46:	e01f      	b.n	8002d88 <UART_SetConfig+0xf4>
 8002d48:	231b      	movs	r3, #27
 8002d4a:	2218      	movs	r2, #24
 8002d4c:	4694      	mov	ip, r2
 8002d4e:	44bc      	add	ip, r7
 8002d50:	4463      	add	r3, ip
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e0ab      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002d58:	231b      	movs	r3, #27
 8002d5a:	2218      	movs	r2, #24
 8002d5c:	4694      	mov	ip, r2
 8002d5e:	44bc      	add	ip, r7
 8002d60:	4463      	add	r3, ip
 8002d62:	2202      	movs	r2, #2
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e0a3      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002d68:	231b      	movs	r3, #27
 8002d6a:	2218      	movs	r2, #24
 8002d6c:	4694      	mov	ip, r2
 8002d6e:	44bc      	add	ip, r7
 8002d70:	4463      	add	r3, ip
 8002d72:	2204      	movs	r2, #4
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	e09b      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002d78:	231b      	movs	r3, #27
 8002d7a:	2218      	movs	r2, #24
 8002d7c:	4694      	mov	ip, r2
 8002d7e:	44bc      	add	ip, r7
 8002d80:	4463      	add	r3, ip
 8002d82:	2208      	movs	r2, #8
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e093      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002d88:	231b      	movs	r3, #27
 8002d8a:	2218      	movs	r2, #24
 8002d8c:	4694      	mov	ip, r2
 8002d8e:	44bc      	add	ip, r7
 8002d90:	4463      	add	r3, ip
 8002d92:	2210      	movs	r2, #16
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	e08b      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a92      	ldr	r2, [pc, #584]	; (8002fe8 <UART_SetConfig+0x354>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d136      	bne.n	8002e10 <UART_SetConfig+0x17c>
 8002da2:	4b90      	ldr	r3, [pc, #576]	; (8002fe4 <UART_SetConfig+0x350>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	220c      	movs	r2, #12
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d020      	beq.n	8002df0 <UART_SetConfig+0x15c>
 8002dae:	d827      	bhi.n	8002e00 <UART_SetConfig+0x16c>
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d00d      	beq.n	8002dd0 <UART_SetConfig+0x13c>
 8002db4:	d824      	bhi.n	8002e00 <UART_SetConfig+0x16c>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <UART_SetConfig+0x12c>
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d010      	beq.n	8002de0 <UART_SetConfig+0x14c>
 8002dbe:	e01f      	b.n	8002e00 <UART_SetConfig+0x16c>
 8002dc0:	231b      	movs	r3, #27
 8002dc2:	2218      	movs	r2, #24
 8002dc4:	4694      	mov	ip, r2
 8002dc6:	44bc      	add	ip, r7
 8002dc8:	4463      	add	r3, ip
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e06f      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002dd0:	231b      	movs	r3, #27
 8002dd2:	2218      	movs	r2, #24
 8002dd4:	4694      	mov	ip, r2
 8002dd6:	44bc      	add	ip, r7
 8002dd8:	4463      	add	r3, ip
 8002dda:	2202      	movs	r2, #2
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e067      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002de0:	231b      	movs	r3, #27
 8002de2:	2218      	movs	r2, #24
 8002de4:	4694      	mov	ip, r2
 8002de6:	44bc      	add	ip, r7
 8002de8:	4463      	add	r3, ip
 8002dea:	2204      	movs	r2, #4
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e05f      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002df0:	231b      	movs	r3, #27
 8002df2:	2218      	movs	r2, #24
 8002df4:	4694      	mov	ip, r2
 8002df6:	44bc      	add	ip, r7
 8002df8:	4463      	add	r3, ip
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	e057      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002e00:	231b      	movs	r3, #27
 8002e02:	2218      	movs	r2, #24
 8002e04:	4694      	mov	ip, r2
 8002e06:	44bc      	add	ip, r7
 8002e08:	4463      	add	r3, ip
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e04f      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a70      	ldr	r2, [pc, #448]	; (8002fd8 <UART_SetConfig+0x344>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d143      	bne.n	8002ea2 <UART_SetConfig+0x20e>
 8002e1a:	4b72      	ldr	r3, [pc, #456]	; (8002fe4 <UART_SetConfig+0x350>)
 8002e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e1e:	23c0      	movs	r3, #192	; 0xc0
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	4013      	ands	r3, r2
 8002e24:	22c0      	movs	r2, #192	; 0xc0
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d02a      	beq.n	8002e82 <UART_SetConfig+0x1ee>
 8002e2c:	22c0      	movs	r2, #192	; 0xc0
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d82e      	bhi.n	8002e92 <UART_SetConfig+0x1fe>
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d012      	beq.n	8002e62 <UART_SetConfig+0x1ce>
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d826      	bhi.n	8002e92 <UART_SetConfig+0x1fe>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <UART_SetConfig+0x1be>
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	00d2      	lsls	r2, r2, #3
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d010      	beq.n	8002e72 <UART_SetConfig+0x1de>
 8002e50:	e01f      	b.n	8002e92 <UART_SetConfig+0x1fe>
 8002e52:	231b      	movs	r3, #27
 8002e54:	2218      	movs	r2, #24
 8002e56:	4694      	mov	ip, r2
 8002e58:	44bc      	add	ip, r7
 8002e5a:	4463      	add	r3, ip
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	e026      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002e62:	231b      	movs	r3, #27
 8002e64:	2218      	movs	r2, #24
 8002e66:	4694      	mov	ip, r2
 8002e68:	44bc      	add	ip, r7
 8002e6a:	4463      	add	r3, ip
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e01e      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002e72:	231b      	movs	r3, #27
 8002e74:	2218      	movs	r2, #24
 8002e76:	4694      	mov	ip, r2
 8002e78:	44bc      	add	ip, r7
 8002e7a:	4463      	add	r3, ip
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e016      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002e82:	231b      	movs	r3, #27
 8002e84:	2218      	movs	r2, #24
 8002e86:	4694      	mov	ip, r2
 8002e88:	44bc      	add	ip, r7
 8002e8a:	4463      	add	r3, ip
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e00e      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002e92:	231b      	movs	r3, #27
 8002e94:	2218      	movs	r2, #24
 8002e96:	4694      	mov	ip, r2
 8002e98:	44bc      	add	ip, r7
 8002e9a:	4463      	add	r3, ip
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e006      	b.n	8002eb0 <UART_SetConfig+0x21c>
 8002ea2:	231b      	movs	r3, #27
 8002ea4:	2218      	movs	r2, #24
 8002ea6:	4694      	mov	ip, r2
 8002ea8:	44bc      	add	ip, r7
 8002eaa:	4463      	add	r3, ip
 8002eac:	2210      	movs	r2, #16
 8002eae:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <UART_SetConfig+0x344>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d000      	beq.n	8002ebc <UART_SetConfig+0x228>
 8002eba:	e09b      	b.n	8002ff4 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ebc:	231b      	movs	r3, #27
 8002ebe:	2218      	movs	r2, #24
 8002ec0:	4694      	mov	ip, r2
 8002ec2:	44bc      	add	ip, r7
 8002ec4:	4463      	add	r3, ip
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d01d      	beq.n	8002f08 <UART_SetConfig+0x274>
 8002ecc:	dc20      	bgt.n	8002f10 <UART_SetConfig+0x27c>
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d015      	beq.n	8002efe <UART_SetConfig+0x26a>
 8002ed2:	dc1d      	bgt.n	8002f10 <UART_SetConfig+0x27c>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <UART_SetConfig+0x24a>
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d005      	beq.n	8002ee8 <UART_SetConfig+0x254>
 8002edc:	e018      	b.n	8002f10 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ede:	f7ff f93d 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ee6:	e01d      	b.n	8002f24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee8:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <UART_SetConfig+0x350>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2210      	movs	r2, #16
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d002      	beq.n	8002ef8 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ef2:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <UART_SetConfig+0x358>)
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ef6:	e015      	b.n	8002f24 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <UART_SetConfig+0x35c>)
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002efc:	e012      	b.n	8002f24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002efe:	f7ff f87d 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8002f02:	0003      	movs	r3, r0
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f06:	e00d      	b.n	8002f24 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f0e:	e009      	b.n	8002f24 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f14:	231a      	movs	r3, #26
 8002f16:	2218      	movs	r2, #24
 8002f18:	4694      	mov	ip, r2
 8002f1a:	44bc      	add	ip, r7
 8002f1c:	4463      	add	r3, ip
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
        break;
 8002f22:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d100      	bne.n	8002f2c <UART_SetConfig+0x298>
 8002f2a:	e139      	b.n	80031a0 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	0013      	movs	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	189b      	adds	r3, r3, r2
 8002f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d305      	bcc.n	8002f48 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d907      	bls.n	8002f58 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002f48:	231a      	movs	r3, #26
 8002f4a:	2218      	movs	r2, #24
 8002f4c:	4694      	mov	ip, r2
 8002f4e:	44bc      	add	ip, r7
 8002f50:	4463      	add	r3, ip
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	e123      	b.n	80031a0 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	6939      	ldr	r1, [r7, #16]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	000b      	movs	r3, r1
 8002f66:	0e1b      	lsrs	r3, r3, #24
 8002f68:	0010      	movs	r0, r2
 8002f6a:	0205      	lsls	r5, r0, #8
 8002f6c:	431d      	orrs	r5, r3
 8002f6e:	000b      	movs	r3, r1
 8002f70:	021c      	lsls	r4, r3, #8
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68b8      	ldr	r0, [r7, #8]
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	1900      	adds	r0, r0, r4
 8002f84:	4169      	adcs	r1, r5
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f7fd fa38 	bl	8000408 <__aeabi_uldivmod>
 8002f98:	0002      	movs	r2, r0
 8002f9a:	000b      	movs	r3, r1
 8002f9c:	0013      	movs	r3, r2
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa2:	23c0      	movs	r3, #192	; 0xc0
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d309      	bcc.n	8002fbe <UART_SetConfig+0x32a>
 8002faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	035b      	lsls	r3, r3, #13
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d204      	bcs.n	8002fbe <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fba:	60da      	str	r2, [r3, #12]
 8002fbc:	e0f0      	b.n	80031a0 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002fbe:	231a      	movs	r3, #26
 8002fc0:	2218      	movs	r2, #24
 8002fc2:	4694      	mov	ip, r2
 8002fc4:	44bc      	add	ip, r7
 8002fc6:	4463      	add	r3, ip
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e0e8      	b.n	80031a0 <UART_SetConfig+0x50c>
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	efff69f3 	.word	0xefff69f3
 8002fd4:	ffffcfff 	.word	0xffffcfff
 8002fd8:	40004800 	.word	0x40004800
 8002fdc:	fffff4ff 	.word	0xfffff4ff
 8002fe0:	40013800 	.word	0x40013800
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40004400 	.word	0x40004400
 8002fec:	003d0900 	.word	0x003d0900
 8002ff0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d000      	beq.n	8003002 <UART_SetConfig+0x36e>
 8003000:	e074      	b.n	80030ec <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003002:	231b      	movs	r3, #27
 8003004:	2218      	movs	r2, #24
 8003006:	4694      	mov	ip, r2
 8003008:	44bc      	add	ip, r7
 800300a:	4463      	add	r3, ip
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b08      	cmp	r3, #8
 8003010:	d822      	bhi.n	8003058 <UART_SetConfig+0x3c4>
 8003012:	009a      	lsls	r2, r3, #2
 8003014:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <UART_SetConfig+0x52c>)
 8003016:	18d3      	adds	r3, r2, r3
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800301c:	f7ff f89e 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8003020:	0003      	movs	r3, r0
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003024:	e022      	b.n	800306c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003026:	f7ff f8af 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 800302a:	0003      	movs	r3, r0
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800302e:	e01d      	b.n	800306c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003030:	4b64      	ldr	r3, [pc, #400]	; (80031c4 <UART_SetConfig+0x530>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2210      	movs	r2, #16
 8003036:	4013      	ands	r3, r2
 8003038:	d002      	beq.n	8003040 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800303a:	4b63      	ldr	r3, [pc, #396]	; (80031c8 <UART_SetConfig+0x534>)
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800303e:	e015      	b.n	800306c <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8003040:	4b62      	ldr	r3, [pc, #392]	; (80031cc <UART_SetConfig+0x538>)
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003044:	e012      	b.n	800306c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003046:	f7fe ffd9 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 800304a:	0003      	movs	r3, r0
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800304e:	e00d      	b.n	800306c <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003056:	e009      	b.n	800306c <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800305c:	231a      	movs	r3, #26
 800305e:	2218      	movs	r2, #24
 8003060:	4694      	mov	ip, r2
 8003062:	44bc      	add	ip, r7
 8003064:	4463      	add	r3, ip
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
        break;
 800306a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d100      	bne.n	8003074 <UART_SetConfig+0x3e0>
 8003072:	e095      	b.n	80031a0 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	005a      	lsls	r2, r3, #1
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	18d2      	adds	r2, r2, r3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	0019      	movs	r1, r3
 8003086:	0010      	movs	r0, r2
 8003088:	f7fd f848 	bl	800011c <__udivsi3>
 800308c:	0003      	movs	r3, r0
 800308e:	b29b      	uxth	r3, r3
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d921      	bls.n	80030dc <UART_SetConfig+0x448>
 8003098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	025b      	lsls	r3, r3, #9
 800309e:	429a      	cmp	r2, r3
 80030a0:	d21c      	bcs.n	80030dc <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	200e      	movs	r0, #14
 80030a8:	2418      	movs	r4, #24
 80030aa:	193b      	adds	r3, r7, r4
 80030ac:	181b      	adds	r3, r3, r0
 80030ae:	210f      	movs	r1, #15
 80030b0:	438a      	bics	r2, r1
 80030b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2207      	movs	r2, #7
 80030bc:	4013      	ands	r3, r2
 80030be:	b299      	uxth	r1, r3
 80030c0:	193b      	adds	r3, r7, r4
 80030c2:	181b      	adds	r3, r3, r0
 80030c4:	193a      	adds	r2, r7, r4
 80030c6:	1812      	adds	r2, r2, r0
 80030c8:	8812      	ldrh	r2, [r2, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	193a      	adds	r2, r7, r4
 80030d4:	1812      	adds	r2, r2, r0
 80030d6:	8812      	ldrh	r2, [r2, #0]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	e061      	b.n	80031a0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80030dc:	231a      	movs	r3, #26
 80030de:	2218      	movs	r2, #24
 80030e0:	4694      	mov	ip, r2
 80030e2:	44bc      	add	ip, r7
 80030e4:	4463      	add	r3, ip
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e059      	b.n	80031a0 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030ec:	231b      	movs	r3, #27
 80030ee:	2218      	movs	r2, #24
 80030f0:	4694      	mov	ip, r2
 80030f2:	44bc      	add	ip, r7
 80030f4:	4463      	add	r3, ip
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d822      	bhi.n	8003142 <UART_SetConfig+0x4ae>
 80030fc:	009a      	lsls	r2, r3, #2
 80030fe:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <UART_SetConfig+0x53c>)
 8003100:	18d3      	adds	r3, r2, r3
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003106:	f7ff f829 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 800310a:	0003      	movs	r3, r0
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800310e:	e022      	b.n	8003156 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003110:	f7ff f83a 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 8003114:	0003      	movs	r3, r0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003118:	e01d      	b.n	8003156 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800311a:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <UART_SetConfig+0x530>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2210      	movs	r2, #16
 8003120:	4013      	ands	r3, r2
 8003122:	d002      	beq.n	800312a <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003124:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <UART_SetConfig+0x534>)
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003128:	e015      	b.n	8003156 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800312a:	4b28      	ldr	r3, [pc, #160]	; (80031cc <UART_SetConfig+0x538>)
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800312e:	e012      	b.n	8003156 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003130:	f7fe ff64 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8003134:	0003      	movs	r3, r0
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003138:	e00d      	b.n	8003156 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003140:	e009      	b.n	8003156 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003146:	231a      	movs	r3, #26
 8003148:	2218      	movs	r2, #24
 800314a:	4694      	mov	ip, r2
 800314c:	44bc      	add	ip, r7
 800314e:	4463      	add	r3, ip
 8003150:	2201      	movs	r2, #1
 8003152:	701a      	strb	r2, [r3, #0]
        break;
 8003154:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d021      	beq.n	80031a0 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	085a      	lsrs	r2, r3, #1
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	18d2      	adds	r2, r2, r3
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	0019      	movs	r1, r3
 800316c:	0010      	movs	r0, r2
 800316e:	f7fc ffd5 	bl	800011c <__udivsi3>
 8003172:	0003      	movs	r3, r0
 8003174:	b29b      	uxth	r3, r3
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	2b0f      	cmp	r3, #15
 800317c:	d909      	bls.n	8003192 <UART_SetConfig+0x4fe>
 800317e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	025b      	lsls	r3, r3, #9
 8003184:	429a      	cmp	r2, r3
 8003186:	d204      	bcs.n	8003192 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	e006      	b.n	80031a0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003192:	231a      	movs	r3, #26
 8003194:	2218      	movs	r2, #24
 8003196:	4694      	mov	ip, r2
 8003198:	44bc      	add	ip, r7
 800319a:	4463      	add	r3, ip
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2200      	movs	r2, #0
 80031a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2200      	movs	r2, #0
 80031aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031ac:	231a      	movs	r3, #26
 80031ae:	2218      	movs	r2, #24
 80031b0:	4694      	mov	ip, r2
 80031b2:	44bc      	add	ip, r7
 80031b4:	4463      	add	r3, ip
 80031b6:	781b      	ldrb	r3, [r3, #0]
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b00e      	add	sp, #56	; 0x38
 80031be:	bdb0      	pop	{r4, r5, r7, pc}
 80031c0:	08004f4c 	.word	0x08004f4c
 80031c4:	40021000 	.word	0x40021000
 80031c8:	003d0900 	.word	0x003d0900
 80031cc:	00f42400 	.word	0x00f42400
 80031d0:	08004f70 	.word	0x08004f70

080031d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2201      	movs	r2, #1
 80031e2:	4013      	ands	r3, r2
 80031e4:	d00b      	beq.n	80031fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a4a      	ldr	r2, [pc, #296]	; (8003318 <UART_AdvFeatureConfig+0x144>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	0019      	movs	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2202      	movs	r2, #2
 8003204:	4013      	ands	r3, r2
 8003206:	d00b      	beq.n	8003220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4a43      	ldr	r2, [pc, #268]	; (800331c <UART_AdvFeatureConfig+0x148>)
 8003210:	4013      	ands	r3, r2
 8003212:	0019      	movs	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	2204      	movs	r2, #4
 8003226:	4013      	ands	r3, r2
 8003228:	d00b      	beq.n	8003242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4a3b      	ldr	r2, [pc, #236]	; (8003320 <UART_AdvFeatureConfig+0x14c>)
 8003232:	4013      	ands	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2208      	movs	r2, #8
 8003248:	4013      	ands	r3, r2
 800324a:	d00b      	beq.n	8003264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a34      	ldr	r2, [pc, #208]	; (8003324 <UART_AdvFeatureConfig+0x150>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	2210      	movs	r2, #16
 800326a:	4013      	ands	r3, r2
 800326c:	d00b      	beq.n	8003286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <UART_AdvFeatureConfig+0x154>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2220      	movs	r2, #32
 800328c:	4013      	ands	r3, r2
 800328e:	d00b      	beq.n	80032a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	4a25      	ldr	r2, [pc, #148]	; (800332c <UART_AdvFeatureConfig+0x158>)
 8003298:	4013      	ands	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2240      	movs	r2, #64	; 0x40
 80032ae:	4013      	ands	r3, r2
 80032b0:	d01d      	beq.n	80032ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <UART_AdvFeatureConfig+0x15c>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	035b      	lsls	r3, r3, #13
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d10b      	bne.n	80032ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a15      	ldr	r2, [pc, #84]	; (8003334 <UART_AdvFeatureConfig+0x160>)
 80032de:	4013      	ands	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	2280      	movs	r2, #128	; 0x80
 80032f4:	4013      	ands	r3, r2
 80032f6:	d00b      	beq.n	8003310 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <UART_AdvFeatureConfig+0x164>)
 8003300:	4013      	ands	r3, r2
 8003302:	0019      	movs	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }
}
 8003310:	46c0      	nop			; (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}
 8003318:	fffdffff 	.word	0xfffdffff
 800331c:	fffeffff 	.word	0xfffeffff
 8003320:	fffbffff 	.word	0xfffbffff
 8003324:	ffff7fff 	.word	0xffff7fff
 8003328:	ffffefff 	.word	0xffffefff
 800332c:	ffffdfff 	.word	0xffffdfff
 8003330:	ffefffff 	.word	0xffefffff
 8003334:	ff9fffff 	.word	0xff9fffff
 8003338:	fff7ffff 	.word	0xfff7ffff

0800333c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af02      	add	r7, sp, #8
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	2100      	movs	r1, #0
 800334a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800334c:	f7fd feaa 	bl	80010a4 <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2208      	movs	r2, #8
 800335c:	4013      	ands	r3, r2
 800335e:	2b08      	cmp	r3, #8
 8003360:	d10c      	bne.n	800337c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	0391      	lsls	r1, r2, #14
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <UART_CheckIdleState+0x8c>)
 800336c:	9200      	str	r2, [sp, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	f000 f82c 	bl	80033cc <UART_WaitOnFlagUntilTimeout>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d001      	beq.n	800337c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e021      	b.n	80033c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2204      	movs	r2, #4
 8003384:	4013      	ands	r3, r2
 8003386:	2b04      	cmp	r3, #4
 8003388:	d10c      	bne.n	80033a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	03d1      	lsls	r1, r2, #15
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4a0d      	ldr	r2, [pc, #52]	; (80033c8 <UART_CheckIdleState+0x8c>)
 8003394:	9200      	str	r2, [sp, #0]
 8003396:	2200      	movs	r2, #0
 8003398:	f000 f818 	bl	80033cc <UART_WaitOnFlagUntilTimeout>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d001      	beq.n	80033a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e00d      	b.n	80033c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2274      	movs	r2, #116	; 0x74
 80033ba:	2100      	movs	r1, #0
 80033bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b004      	add	sp, #16
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	01ffffff 	.word	0x01ffffff

080033cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033dc:	e05e      	b.n	800349c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3301      	adds	r3, #1
 80033e2:	d05b      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e4:	f7fd fe5e 	bl	80010a4 <HAL_GetTick>
 80033e8:	0002      	movs	r2, r0
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d302      	bcc.n	80033fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d11b      	bne.n	8003432 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	492f      	ldr	r1, [pc, #188]	; (80034c4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003406:	400a      	ands	r2, r1
 8003408:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	438a      	bics	r2, r1
 8003418:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2274      	movs	r2, #116	; 0x74
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e044      	b.n	80034bc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2204      	movs	r2, #4
 800343a:	4013      	ands	r3, r2
 800343c:	d02e      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	401a      	ands	r2, r3
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	429a      	cmp	r2, r3
 8003450:	d124      	bne.n	800349c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	0112      	lsls	r2, r2, #4
 800345a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4917      	ldr	r1, [pc, #92]	; (80034c4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2101      	movs	r1, #1
 8003478:	438a      	bics	r2, r1
 800347a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	2120      	movs	r1, #32
 800348e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2274      	movs	r2, #116	; 0x74
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e00f      	b.n	80034bc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	4013      	ands	r3, r2
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	425a      	negs	r2, r3
 80034ac:	4153      	adcs	r3, r2
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	001a      	movs	r2, r3
 80034b2:	1dfb      	adds	r3, r7, #7
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d091      	beq.n	80033de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b004      	add	sp, #16
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	fffffe5f 	.word	0xfffffe5f

080034c8 <TM1638_SetMultipleDisplayRegister>:
 ==================================================================================
 */

static void
TM1638_SetMultipleDisplayRegister(const uint8_t *DigitData, uint8_t StartAddr, uint8_t Count)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	0008      	movs	r0, r1
 80034d2:	0011      	movs	r1, r2
 80034d4:	1cfb      	adds	r3, r7, #3
 80034d6:	1c02      	adds	r2, r0, #0
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	1cbb      	adds	r3, r7, #2
 80034dc:	1c0a      	adds	r2, r1, #0
 80034de:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DataInstructionSet | WriteDataToRegister |
 80034e0:	240f      	movs	r4, #15
 80034e2:	193b      	adds	r3, r7, r4
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	701a      	strb	r2, [r3, #0]
                 AutoAddressAdd | NormalMode;

  TM1638_Platform_Start();
 80034e8:	f000 f962 	bl	80037b0 <TM1638_Platform_Start>
  TM1638_Platform_WriteBytes(&Data, 1);
 80034ec:	193b      	adds	r3, r7, r4
 80034ee:	2101      	movs	r1, #1
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 f96d 	bl	80037d0 <TM1638_Platform_WriteBytes>
  TM1638_Platform_Stop();
 80034f6:	f000 f94b 	bl	8003790 <TM1638_Platform_Stop>

  Data = AddressInstructionSet | StartAddr;
 80034fa:	1cfb      	adds	r3, r7, #3
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2240      	movs	r2, #64	; 0x40
 8003500:	4252      	negs	r2, r2
 8003502:	4313      	orrs	r3, r2
 8003504:	b2da      	uxtb	r2, r3
 8003506:	193b      	adds	r3, r7, r4
 8003508:	701a      	strb	r2, [r3, #0]

  TM1638_Platform_Start();
 800350a:	f000 f951 	bl	80037b0 <TM1638_Platform_Start>
  TM1638_Platform_WriteBytes(&Data, 1);
 800350e:	193b      	adds	r3, r7, r4
 8003510:	2101      	movs	r1, #1
 8003512:	0018      	movs	r0, r3
 8003514:	f000 f95c 	bl	80037d0 <TM1638_Platform_WriteBytes>
  TM1638_Platform_WriteBytes(DigitData, Count);
 8003518:	1cbb      	adds	r3, r7, #2
 800351a:	781a      	ldrb	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f000 f955 	bl	80037d0 <TM1638_Platform_WriteBytes>
  TM1638_Platform_Stop();
 8003526:	f000 f933 	bl	8003790 <TM1638_Platform_Stop>
}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	46bd      	mov	sp, r7
 800352e:	b005      	add	sp, #20
 8003530:	bd90      	pop	{r4, r7, pc}

08003532 <TM1638_Init>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Init(void)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	af00      	add	r7, sp, #0
  return TM1638_Platform_Init();
 8003536:	f000 f8d5 	bl	80036e4 <TM1638_Platform_Init>
 800353a:	0003      	movs	r3, r0
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <TM1638_ConfigDisplay>:
 *         - TM1638_OK: Operation was successful
 *         - TM1638_FAIL: Operation failed
 */
TM1638_Result_t
TM1638_ConfigDisplay(uint8_t Brightness, uint8_t DisplayState)
{
 8003542:	b590      	push	{r4, r7, lr}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	0002      	movs	r2, r0
 800354a:	1dfb      	adds	r3, r7, #7
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	1dbb      	adds	r3, r7, #6
 8003550:	1c0a      	adds	r2, r1, #0
 8003552:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DisplayControlInstructionSet;
 8003554:	210f      	movs	r1, #15
 8003556:	187b      	adds	r3, r7, r1
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	701a      	strb	r2, [r3, #0]
  Data |= Brightness & 0x07;
 800355c:	1dfb      	adds	r3, r7, #7
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b25b      	sxtb	r3, r3
 8003562:	2207      	movs	r2, #7
 8003564:	4013      	ands	r3, r2
 8003566:	b25a      	sxtb	r2, r3
 8003568:	187b      	adds	r3, r7, r1
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b25b      	sxtb	r3, r3
 800356e:	4313      	orrs	r3, r2
 8003570:	b25b      	sxtb	r3, r3
 8003572:	b2da      	uxtb	r2, r3
 8003574:	187b      	adds	r3, r7, r1
 8003576:	701a      	strb	r2, [r3, #0]
  Data |= (DisplayState) ? (ShowTurnOn) : (ShowTurnOff);
 8003578:	1dbb      	adds	r3, r7, #6
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <TM1638_ConfigDisplay+0x42>
 8003580:	2308      	movs	r3, #8
 8003582:	e000      	b.n	8003586 <TM1638_ConfigDisplay+0x44>
 8003584:	2300      	movs	r3, #0
 8003586:	210f      	movs	r1, #15
 8003588:	187a      	adds	r2, r7, r1
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	b252      	sxtb	r2, r2
 800358e:	4313      	orrs	r3, r2
 8003590:	b25b      	sxtb	r3, r3
 8003592:	b2da      	uxtb	r2, r3
 8003594:	000c      	movs	r4, r1
 8003596:	187b      	adds	r3, r7, r1
 8003598:	701a      	strb	r2, [r3, #0]

  TM1638_Platform_Start();
 800359a:	f000 f909 	bl	80037b0 <TM1638_Platform_Start>
  TM1638_Platform_WriteBytes(&Data, 1);
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	2101      	movs	r1, #1
 80035a2:	0018      	movs	r0, r3
 80035a4:	f000 f914 	bl	80037d0 <TM1638_Platform_WriteBytes>
  TM1638_Platform_Stop();
 80035a8:	f000 f8f2 	bl	8003790 <TM1638_Platform_Stop>

  return TM1638_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b005      	add	sp, #20
 80035b4:	bd90      	pop	{r4, r7, pc}

080035b6 <TM1638_SetSingleDigit>:
 *         - TM1638_OK: Operation was successful
 *         - TM1638_FAIL: Operation failed
 */
TM1638_Result_t
TM1638_SetSingleDigit(uint8_t DigitData, uint8_t DigitPos)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	0002      	movs	r2, r0
 80035be:	1dfb      	adds	r3, r7, #7
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	1dbb      	adds	r3, r7, #6
 80035c4:	1c0a      	adds	r2, r1, #0
 80035c6:	701a      	strb	r2, [r3, #0]
#if (TM1638SegType)
  TM1638_SetMultipleDigit(&DigitData, DigitPos, 1);
#else
  TM1638_SetMultipleDisplayRegister(DigitPos, 1, &DigitData);
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	0018      	movs	r0, r3
 80035ce:	1dfb      	adds	r3, r7, #7
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	001a      	movs	r2, r3
 80035d4:	2101      	movs	r1, #1
 80035d6:	f7ff ff77 	bl	80034c8 <TM1638_SetMultipleDisplayRegister>
#endif

  return TM1638_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <TM1638_SetSingleDigit_HEX>:
 *         - TM1638_OK: Operation was successful
 *         - TM1638_FAIL: Operation failed
 */
TM1638_Result_t
TM1638_SetSingleDigit_HEX(uint8_t DigitData, uint8_t DigitPos)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	0002      	movs	r2, r0
 80035ec:	1dfb      	adds	r3, r7, #7
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	1dbb      	adds	r3, r7, #6
 80035f2:	1c0a      	adds	r2, r1, #0
 80035f4:	701a      	strb	r2, [r3, #0]
  uint8_t DigitDataHEX = 0;
 80035f6:	200f      	movs	r0, #15
 80035f8:	183b      	adds	r3, r7, r0
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
  uint8_t DecimalPoint = DigitData & 0x80;
 80035fe:	240e      	movs	r4, #14
 8003600:	193b      	adds	r3, r7, r4
 8003602:	1dfa      	adds	r2, r7, #7
 8003604:	7812      	ldrb	r2, [r2, #0]
 8003606:	217f      	movs	r1, #127	; 0x7f
 8003608:	438a      	bics	r2, r1
 800360a:	701a      	strb	r2, [r3, #0]

  DigitData &= 0x7F;
 800360c:	1dfb      	adds	r3, r7, #7
 800360e:	1dfa      	adds	r2, r7, #7
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	217f      	movs	r1, #127	; 0x7f
 8003614:	400a      	ands	r2, r1
 8003616:	701a      	strb	r2, [r3, #0]

  if (DigitData >= 0 && DigitData <= 15)
 8003618:	1dfb      	adds	r3, r7, #7
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d809      	bhi.n	8003634 <TM1638_SetSingleDigit_HEX+0x50>
  {
    DigitDataHEX = HexTo7Seg[DigitData] | DecimalPoint;
 8003620:	1dfb      	adds	r3, r7, #7
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <TM1638_SetSingleDigit_HEX+0xf8>)
 8003626:	5cd1      	ldrb	r1, [r2, r3]
 8003628:	183b      	adds	r3, r7, r0
 800362a:	193a      	adds	r2, r7, r4
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e044      	b.n	80036be <TM1638_SetSingleDigit_HEX+0xda>
  }
  else
  {
    switch (DigitData)
 8003634:	1dfb      	adds	r3, r7, #7
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	3b41      	subs	r3, #65	; 0x41
 800363a:	2b25      	cmp	r3, #37	; 0x25
 800363c:	d83a      	bhi.n	80036b4 <TM1638_SetSingleDigit_HEX+0xd0>
 800363e:	009a      	lsls	r2, r3, #2
 8003640:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <TM1638_SetSingleDigit_HEX+0xfc>)
 8003642:	18d3      	adds	r3, r2, r3
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	469f      	mov	pc, r3
    {
    case 'A':
    case 'a':
      DigitDataHEX = HexTo7Seg[0x0A] | DecimalPoint;
 8003648:	2177      	movs	r1, #119	; 0x77
 800364a:	230f      	movs	r3, #15
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	220e      	movs	r2, #14
 8003650:	18ba      	adds	r2, r7, r2
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	701a      	strb	r2, [r3, #0]
      break;
 8003658:	e031      	b.n	80036be <TM1638_SetSingleDigit_HEX+0xda>

    case 'B':
    case 'b':
      DigitDataHEX = HexTo7Seg[0x0B] | DecimalPoint;
 800365a:	217c      	movs	r1, #124	; 0x7c
 800365c:	230f      	movs	r3, #15
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	220e      	movs	r2, #14
 8003662:	18ba      	adds	r2, r7, r2
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	701a      	strb	r2, [r3, #0]
      break;
 800366a:	e028      	b.n	80036be <TM1638_SetSingleDigit_HEX+0xda>

    case 'C':
    case 'c':
      DigitDataHEX = HexTo7Seg[0x0C] | DecimalPoint;
 800366c:	2139      	movs	r1, #57	; 0x39
 800366e:	230f      	movs	r3, #15
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	220e      	movs	r2, #14
 8003674:	18ba      	adds	r2, r7, r2
 8003676:	7812      	ldrb	r2, [r2, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	701a      	strb	r2, [r3, #0]
      break;
 800367c:	e01f      	b.n	80036be <TM1638_SetSingleDigit_HEX+0xda>

    case 'D':
    case 'd':
      DigitDataHEX = HexTo7Seg[0x0D] | DecimalPoint;
 800367e:	215e      	movs	r1, #94	; 0x5e
 8003680:	230f      	movs	r3, #15
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	220e      	movs	r2, #14
 8003686:	18ba      	adds	r2, r7, r2
 8003688:	7812      	ldrb	r2, [r2, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	701a      	strb	r2, [r3, #0]
      break;
 800368e:	e016      	b.n	80036be <TM1638_SetSingleDigit_HEX+0xda>

    case 'E':
    case 'e':
      DigitDataHEX = HexTo7Seg[0x0E] | DecimalPoint;
 8003690:	2179      	movs	r1, #121	; 0x79
 8003692:	230f      	movs	r3, #15
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	220e      	movs	r2, #14
 8003698:	18ba      	adds	r2, r7, r2
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	701a      	strb	r2, [r3, #0]
      break;
 80036a0:	e00d      	b.n	80036be <TM1638_SetSingleDigit_HEX+0xda>

    case 'F':
    case 'f':
      DigitDataHEX = HexTo7Seg[0x0F] | DecimalPoint;
 80036a2:	2171      	movs	r1, #113	; 0x71
 80036a4:	230f      	movs	r3, #15
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	220e      	movs	r2, #14
 80036aa:	18ba      	adds	r2, r7, r2
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e004      	b.n	80036be <TM1638_SetSingleDigit_HEX+0xda>

    default:
      DigitDataHEX = 0;
 80036b4:	230f      	movs	r3, #15
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
      break;
 80036bc:	46c0      	nop			; (mov r8, r8)
    }
  }

  return TM1638_SetSingleDigit(DigitDataHEX, DigitPos);
 80036be:	1dbb      	adds	r3, r7, #6
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	230f      	movs	r3, #15
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	0011      	movs	r1, r2
 80036ca:	0018      	movs	r0, r3
 80036cc:	f7ff ff73 	bl	80035b6 <TM1638_SetSingleDigit>
 80036d0:	0003      	movs	r3, r0
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b005      	add	sp, #20
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	08004f94 	.word	0x08004f94
 80036e0:	08004fa4 	.word	0x08004fa4

080036e4 <TM1638_Platform_Init>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  TM1638_CLK_OUTPUT();
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <TM1638_Platform_Init+0xa4>)
 80036ea:	2280      	movs	r2, #128	; 0x80
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	4b26      	ldr	r3, [pc, #152]	; (8003788 <TM1638_Platform_Init+0xa4>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <TM1638_Platform_Init+0xa4>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	4b23      	ldr	r3, [pc, #140]	; (8003788 <TM1638_Platform_Init+0xa4>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	4b21      	ldr	r3, [pc, #132]	; (8003788 <TM1638_Platform_Init+0xa4>)
 8003702:	4a22      	ldr	r2, [pc, #136]	; (800378c <TM1638_Platform_Init+0xa8>)
 8003704:	0019      	movs	r1, r3
 8003706:	0010      	movs	r0, r2
 8003708:	f7fd fd84 	bl	8001214 <HAL_GPIO_Init>
  TM1638_STB_OUTPUT();
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <TM1638_Platform_Init+0xa4>)
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	0052      	lsls	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <TM1638_Platform_Init+0xa4>)
 8003716:	2201      	movs	r2, #1
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <TM1638_Platform_Init+0xa4>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <TM1638_Platform_Init+0xa4>)
 8003722:	2200      	movs	r2, #0
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	4b18      	ldr	r3, [pc, #96]	; (8003788 <TM1638_Platform_Init+0xa4>)
 8003728:	4a18      	ldr	r2, [pc, #96]	; (800378c <TM1638_Platform_Init+0xa8>)
 800372a:	0019      	movs	r1, r3
 800372c:	0010      	movs	r0, r2
 800372e:	f7fd fd71 	bl	8001214 <HAL_GPIO_Init>
  TM1638_DIO_OUTPUT();
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <TM1638_Platform_Init+0xa4>)
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	0092      	lsls	r2, r2, #2
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	4b13      	ldr	r3, [pc, #76]	; (8003788 <TM1638_Platform_Init+0xa4>)
 800373c:	2201      	movs	r2, #1
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <TM1638_Platform_Init+0xa4>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <TM1638_Platform_Init+0xa4>)
 8003748:	2200      	movs	r2, #0
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <TM1638_Platform_Init+0xa4>)
 800374e:	4a0f      	ldr	r2, [pc, #60]	; (800378c <TM1638_Platform_Init+0xa8>)
 8003750:	0019      	movs	r1, r3
 8003752:	0010      	movs	r0, r2
 8003754:	f7fd fd5e 	bl	8001214 <HAL_GPIO_Init>

  TM1638_CLK_HIGH();
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <TM1638_Platform_Init+0xa8>)
 800375a:	2201      	movs	r2, #1
 800375c:	2180      	movs	r1, #128	; 0x80
 800375e:	0018      	movs	r0, r3
 8003760:	f7fd feeb 	bl	800153a <HAL_GPIO_WritePin>
  TM1638_STB_HIGH();
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4808      	ldr	r0, [pc, #32]	; (800378c <TM1638_Platform_Init+0xa8>)
 800376a:	2201      	movs	r2, #1
 800376c:	0019      	movs	r1, r3
 800376e:	f7fd fee4 	bl	800153a <HAL_GPIO_WritePin>
  TM1638_DIO_HIGH();
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4805      	ldr	r0, [pc, #20]	; (800378c <TM1638_Platform_Init+0xa8>)
 8003778:	2201      	movs	r2, #1
 800377a:	0019      	movs	r1, r3
 800377c:	f7fd fedd 	bl	800153a <HAL_GPIO_WritePin>

  return TM1638_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	200000a8 	.word	0x200000a8
 800378c:	50000400 	.word	0x50000400

08003790 <TM1638_Platform_Stop>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_Stop(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  TM1638_STB_HIGH();
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4804      	ldr	r0, [pc, #16]	; (80037ac <TM1638_Platform_Stop+0x1c>)
 800379a:	2201      	movs	r2, #1
 800379c:	0019      	movs	r1, r3
 800379e:	f7fd fecc 	bl	800153a <HAL_GPIO_WritePin>

  // TM1638_DelayUs(TM1638TM1638_DelayUs);

  return TM1638_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	50000400 	.word	0x50000400

080037b0 <TM1638_Platform_Start>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_Start(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  TM1638_STB_LOW();
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4804      	ldr	r0, [pc, #16]	; (80037cc <TM1638_Platform_Start+0x1c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	0019      	movs	r1, r3
 80037be:	f7fd febc 	bl	800153a <HAL_GPIO_WritePin>

  return TM1638_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	50000400 	.word	0x50000400

080037d0 <TM1638_Platform_WriteBytes>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_WriteBytes(const uint8_t *Data, uint8_t NumOfBytes)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	000a      	movs	r2, r1
 80037da:	1cfb      	adds	r3, r7, #3
 80037dc:	701a      	strb	r2, [r3, #0]
  uint8_t i, j, Buff;

  TM1638_DIO_OUTPUT();
 80037de:	4b40      	ldr	r3, [pc, #256]	; (80038e0 <TM1638_Platform_WriteBytes+0x110>)
 80037e0:	2280      	movs	r2, #128	; 0x80
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <TM1638_Platform_WriteBytes+0x110>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	4b3c      	ldr	r3, [pc, #240]	; (80038e0 <TM1638_Platform_WriteBytes+0x110>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <TM1638_Platform_WriteBytes+0x110>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	60da      	str	r2, [r3, #12]
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <TM1638_Platform_WriteBytes+0x110>)
 80037fa:	4a3a      	ldr	r2, [pc, #232]	; (80038e4 <TM1638_Platform_WriteBytes+0x114>)
 80037fc:	0019      	movs	r1, r3
 80037fe:	0010      	movs	r0, r2
 8003800:	f7fd fd08 	bl	8001214 <HAL_GPIO_Init>

  for (j = 0; j < NumOfBytes; j++)
 8003804:	2316      	movs	r3, #22
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e05b      	b.n	80038c6 <TM1638_Platform_WriteBytes+0xf6>
  {
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 800380e:	2317      	movs	r3, #23
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	2316      	movs	r3, #22
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	18d2      	adds	r2, r2, r3
 8003820:	2315      	movs	r3, #21
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e042      	b.n	80038b0 <TM1638_Platform_WriteBytes+0xe0>
    {
      TM1638_CLK_LOW();
 800382a:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <TM1638_Platform_WriteBytes+0x114>)
 800382c:	2200      	movs	r2, #0
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	0018      	movs	r0, r3
 8003832:	f7fd fe82 	bl	800153a <HAL_GPIO_WritePin>
      TM1638_DelayUs(TM1638TM1638_DelayUs);
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	e002      	b.n	8003842 <TM1638_Platform_WriteBytes+0x72>
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	3301      	adds	r3, #1
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	23fa      	movs	r3, #250	; 0xfa
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	429a      	cmp	r2, r3
 800384a:	d3f7      	bcc.n	800383c <TM1638_Platform_WriteBytes+0x6c>

      if (Buff & 0x01)
 800384c:	2315      	movs	r3, #21
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2201      	movs	r2, #1
 8003854:	4013      	ands	r3, r2
 8003856:	d007      	beq.n	8003868 <TM1638_Platform_WriteBytes+0x98>
        TM1638_DIO_HIGH();
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4821      	ldr	r0, [pc, #132]	; (80038e4 <TM1638_Platform_WriteBytes+0x114>)
 800385e:	2201      	movs	r2, #1
 8003860:	0019      	movs	r1, r3
 8003862:	f7fd fe6a 	bl	800153a <HAL_GPIO_WritePin>
 8003866:	e006      	b.n	8003876 <TM1638_Platform_WriteBytes+0xa6>
      else
        TM1638_DIO_LOW();
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	481d      	ldr	r0, [pc, #116]	; (80038e4 <TM1638_Platform_WriteBytes+0x114>)
 800386e:	2200      	movs	r2, #0
 8003870:	0019      	movs	r1, r3
 8003872:	f7fd fe62 	bl	800153a <HAL_GPIO_WritePin>

      TM1638_CLK_HIGH();
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <TM1638_Platform_WriteBytes+0x114>)
 8003878:	2201      	movs	r2, #1
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	0018      	movs	r0, r3
 800387e:	f7fd fe5c 	bl	800153a <HAL_GPIO_WritePin>
      TM1638_DelayUs(TM1638TM1638_DelayUs);
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e002      	b.n	800388e <TM1638_Platform_WriteBytes+0xbe>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3301      	adds	r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	23fa      	movs	r3, #250	; 0xfa
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	429a      	cmp	r2, r3
 8003896:	d3f7      	bcc.n	8003888 <TM1638_Platform_WriteBytes+0xb8>
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 8003898:	2217      	movs	r2, #23
 800389a:	18bb      	adds	r3, r7, r2
 800389c:	18ba      	adds	r2, r7, r2
 800389e:	7812      	ldrb	r2, [r2, #0]
 80038a0:	3201      	adds	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	2215      	movs	r2, #21
 80038a6:	18bb      	adds	r3, r7, r2
 80038a8:	18ba      	adds	r2, r7, r2
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	0852      	lsrs	r2, r2, #1
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	2317      	movs	r3, #23
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b07      	cmp	r3, #7
 80038b8:	d9b7      	bls.n	800382a <TM1638_Platform_WriteBytes+0x5a>
  for (j = 0; j < NumOfBytes; j++)
 80038ba:	2116      	movs	r1, #22
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	3201      	adds	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	2316      	movs	r3, #22
 80038c8:	18fa      	adds	r2, r7, r3
 80038ca:	1cfb      	adds	r3, r7, #3
 80038cc:	7812      	ldrb	r2, [r2, #0]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d39c      	bcc.n	800380e <TM1638_Platform_WriteBytes+0x3e>
    }
  }

  return TM1638_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	b006      	add	sp, #24
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	200000a8 	.word	0x200000a8
 80038e4:	50000400 	.word	0x50000400

080038e8 <__errno>:
 80038e8:	4b01      	ldr	r3, [pc, #4]	; (80038f0 <__errno+0x8>)
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	4770      	bx	lr
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	20000014 	.word	0x20000014

080038f4 <__libc_init_array>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	2600      	movs	r6, #0
 80038f8:	4d0c      	ldr	r5, [pc, #48]	; (800392c <__libc_init_array+0x38>)
 80038fa:	4c0d      	ldr	r4, [pc, #52]	; (8003930 <__libc_init_array+0x3c>)
 80038fc:	1b64      	subs	r4, r4, r5
 80038fe:	10a4      	asrs	r4, r4, #2
 8003900:	42a6      	cmp	r6, r4
 8003902:	d109      	bne.n	8003918 <__libc_init_array+0x24>
 8003904:	2600      	movs	r6, #0
 8003906:	f001 fad9 	bl	8004ebc <_init>
 800390a:	4d0a      	ldr	r5, [pc, #40]	; (8003934 <__libc_init_array+0x40>)
 800390c:	4c0a      	ldr	r4, [pc, #40]	; (8003938 <__libc_init_array+0x44>)
 800390e:	1b64      	subs	r4, r4, r5
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	42a6      	cmp	r6, r4
 8003914:	d105      	bne.n	8003922 <__libc_init_array+0x2e>
 8003916:	bd70      	pop	{r4, r5, r6, pc}
 8003918:	00b3      	lsls	r3, r6, #2
 800391a:	58eb      	ldr	r3, [r5, r3]
 800391c:	4798      	blx	r3
 800391e:	3601      	adds	r6, #1
 8003920:	e7ee      	b.n	8003900 <__libc_init_array+0xc>
 8003922:	00b3      	lsls	r3, r6, #2
 8003924:	58eb      	ldr	r3, [r5, r3]
 8003926:	4798      	blx	r3
 8003928:	3601      	adds	r6, #1
 800392a:	e7f2      	b.n	8003912 <__libc_init_array+0x1e>
 800392c:	080050dc 	.word	0x080050dc
 8003930:	080050dc 	.word	0x080050dc
 8003934:	080050dc 	.word	0x080050dc
 8003938:	080050e0 	.word	0x080050e0

0800393c <memset>:
 800393c:	0003      	movs	r3, r0
 800393e:	1882      	adds	r2, r0, r2
 8003940:	4293      	cmp	r3, r2
 8003942:	d100      	bne.n	8003946 <memset+0xa>
 8003944:	4770      	bx	lr
 8003946:	7019      	strb	r1, [r3, #0]
 8003948:	3301      	adds	r3, #1
 800394a:	e7f9      	b.n	8003940 <memset+0x4>

0800394c <iprintf>:
 800394c:	b40f      	push	{r0, r1, r2, r3}
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <iprintf+0x30>)
 8003950:	b513      	push	{r0, r1, r4, lr}
 8003952:	681c      	ldr	r4, [r3, #0]
 8003954:	2c00      	cmp	r4, #0
 8003956:	d005      	beq.n	8003964 <iprintf+0x18>
 8003958:	69a3      	ldr	r3, [r4, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <iprintf+0x18>
 800395e:	0020      	movs	r0, r4
 8003960:	f000 fb6e 	bl	8004040 <__sinit>
 8003964:	ab05      	add	r3, sp, #20
 8003966:	0020      	movs	r0, r4
 8003968:	9a04      	ldr	r2, [sp, #16]
 800396a:	68a1      	ldr	r1, [r4, #8]
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	f000 feb3 	bl	80046d8 <_vfiprintf_r>
 8003972:	bc16      	pop	{r1, r2, r4}
 8003974:	bc08      	pop	{r3}
 8003976:	b004      	add	sp, #16
 8003978:	4718      	bx	r3
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	20000014 	.word	0x20000014

08003980 <_puts_r>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	0005      	movs	r5, r0
 8003984:	000e      	movs	r6, r1
 8003986:	2800      	cmp	r0, #0
 8003988:	d004      	beq.n	8003994 <_puts_r+0x14>
 800398a:	6983      	ldr	r3, [r0, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <_puts_r+0x14>
 8003990:	f000 fb56 	bl	8004040 <__sinit>
 8003994:	69ab      	ldr	r3, [r5, #24]
 8003996:	68ac      	ldr	r4, [r5, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d102      	bne.n	80039a2 <_puts_r+0x22>
 800399c:	0028      	movs	r0, r5
 800399e:	f000 fb4f 	bl	8004040 <__sinit>
 80039a2:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <_puts_r+0xd8>)
 80039a4:	429c      	cmp	r4, r3
 80039a6:	d122      	bne.n	80039ee <_puts_r+0x6e>
 80039a8:	686c      	ldr	r4, [r5, #4]
 80039aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039ac:	07db      	lsls	r3, r3, #31
 80039ae:	d405      	bmi.n	80039bc <_puts_r+0x3c>
 80039b0:	89a3      	ldrh	r3, [r4, #12]
 80039b2:	059b      	lsls	r3, r3, #22
 80039b4:	d402      	bmi.n	80039bc <_puts_r+0x3c>
 80039b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039b8:	f000 fbe3 	bl	8004182 <__retarget_lock_acquire_recursive>
 80039bc:	89a3      	ldrh	r3, [r4, #12]
 80039be:	071b      	lsls	r3, r3, #28
 80039c0:	d502      	bpl.n	80039c8 <_puts_r+0x48>
 80039c2:	6923      	ldr	r3, [r4, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d129      	bne.n	8003a1c <_puts_r+0x9c>
 80039c8:	0021      	movs	r1, r4
 80039ca:	0028      	movs	r0, r5
 80039cc:	f000 f992 	bl	8003cf4 <__swsetup_r>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d023      	beq.n	8003a1c <_puts_r+0x9c>
 80039d4:	2501      	movs	r5, #1
 80039d6:	426d      	negs	r5, r5
 80039d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039da:	07db      	lsls	r3, r3, #31
 80039dc:	d405      	bmi.n	80039ea <_puts_r+0x6a>
 80039de:	89a3      	ldrh	r3, [r4, #12]
 80039e0:	059b      	lsls	r3, r3, #22
 80039e2:	d402      	bmi.n	80039ea <_puts_r+0x6a>
 80039e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039e6:	f000 fbcd 	bl	8004184 <__retarget_lock_release_recursive>
 80039ea:	0028      	movs	r0, r5
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
 80039ee:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <_puts_r+0xdc>)
 80039f0:	429c      	cmp	r4, r3
 80039f2:	d101      	bne.n	80039f8 <_puts_r+0x78>
 80039f4:	68ac      	ldr	r4, [r5, #8]
 80039f6:	e7d8      	b.n	80039aa <_puts_r+0x2a>
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <_puts_r+0xe0>)
 80039fa:	429c      	cmp	r4, r3
 80039fc:	d1d5      	bne.n	80039aa <_puts_r+0x2a>
 80039fe:	68ec      	ldr	r4, [r5, #12]
 8003a00:	e7d3      	b.n	80039aa <_puts_r+0x2a>
 8003a02:	3601      	adds	r6, #1
 8003a04:	60a3      	str	r3, [r4, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da04      	bge.n	8003a14 <_puts_r+0x94>
 8003a0a:	69a2      	ldr	r2, [r4, #24]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	dc16      	bgt.n	8003a3e <_puts_r+0xbe>
 8003a10:	290a      	cmp	r1, #10
 8003a12:	d014      	beq.n	8003a3e <_puts_r+0xbe>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	6022      	str	r2, [r4, #0]
 8003a1a:	7019      	strb	r1, [r3, #0]
 8003a1c:	68a3      	ldr	r3, [r4, #8]
 8003a1e:	7831      	ldrb	r1, [r6, #0]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	2900      	cmp	r1, #0
 8003a24:	d1ed      	bne.n	8003a02 <_puts_r+0x82>
 8003a26:	60a3      	str	r3, [r4, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da0f      	bge.n	8003a4c <_puts_r+0xcc>
 8003a2c:	0028      	movs	r0, r5
 8003a2e:	0022      	movs	r2, r4
 8003a30:	310a      	adds	r1, #10
 8003a32:	f000 f909 	bl	8003c48 <__swbuf_r>
 8003a36:	250a      	movs	r5, #10
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d1cd      	bne.n	80039d8 <_puts_r+0x58>
 8003a3c:	e7ca      	b.n	80039d4 <_puts_r+0x54>
 8003a3e:	0022      	movs	r2, r4
 8003a40:	0028      	movs	r0, r5
 8003a42:	f000 f901 	bl	8003c48 <__swbuf_r>
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	d1e8      	bne.n	8003a1c <_puts_r+0x9c>
 8003a4a:	e7c3      	b.n	80039d4 <_puts_r+0x54>
 8003a4c:	250a      	movs	r5, #10
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	6022      	str	r2, [r4, #0]
 8003a54:	701d      	strb	r5, [r3, #0]
 8003a56:	e7bf      	b.n	80039d8 <_puts_r+0x58>
 8003a58:	08005060 	.word	0x08005060
 8003a5c:	08005080 	.word	0x08005080
 8003a60:	08005040 	.word	0x08005040

08003a64 <puts>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <puts+0x10>)
 8003a68:	0001      	movs	r1, r0
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	f7ff ff88 	bl	8003980 <_puts_r>
 8003a70:	bd10      	pop	{r4, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	20000014 	.word	0x20000014

08003a78 <setvbuf>:
 8003a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7a:	001d      	movs	r5, r3
 8003a7c:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <setvbuf+0x17c>)
 8003a7e:	b085      	sub	sp, #20
 8003a80:	681e      	ldr	r6, [r3, #0]
 8003a82:	0004      	movs	r4, r0
 8003a84:	000f      	movs	r7, r1
 8003a86:	9200      	str	r2, [sp, #0]
 8003a88:	2e00      	cmp	r6, #0
 8003a8a:	d005      	beq.n	8003a98 <setvbuf+0x20>
 8003a8c:	69b3      	ldr	r3, [r6, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d102      	bne.n	8003a98 <setvbuf+0x20>
 8003a92:	0030      	movs	r0, r6
 8003a94:	f000 fad4 	bl	8004040 <__sinit>
 8003a98:	4b57      	ldr	r3, [pc, #348]	; (8003bf8 <setvbuf+0x180>)
 8003a9a:	429c      	cmp	r4, r3
 8003a9c:	d161      	bne.n	8003b62 <setvbuf+0xea>
 8003a9e:	6874      	ldr	r4, [r6, #4]
 8003aa0:	9b00      	ldr	r3, [sp, #0]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d005      	beq.n	8003ab2 <setvbuf+0x3a>
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d900      	bls.n	8003aac <setvbuf+0x34>
 8003aaa:	e09d      	b.n	8003be8 <setvbuf+0x170>
 8003aac:	2d00      	cmp	r5, #0
 8003aae:	da00      	bge.n	8003ab2 <setvbuf+0x3a>
 8003ab0:	e09a      	b.n	8003be8 <setvbuf+0x170>
 8003ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ab4:	07db      	lsls	r3, r3, #31
 8003ab6:	d405      	bmi.n	8003ac4 <setvbuf+0x4c>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	059b      	lsls	r3, r3, #22
 8003abc:	d402      	bmi.n	8003ac4 <setvbuf+0x4c>
 8003abe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac0:	f000 fb5f 	bl	8004182 <__retarget_lock_acquire_recursive>
 8003ac4:	0021      	movs	r1, r4
 8003ac6:	0030      	movs	r0, r6
 8003ac8:	f000 fa18 	bl	8003efc <_fflush_r>
 8003acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ace:	2900      	cmp	r1, #0
 8003ad0:	d008      	beq.n	8003ae4 <setvbuf+0x6c>
 8003ad2:	0023      	movs	r3, r4
 8003ad4:	3344      	adds	r3, #68	; 0x44
 8003ad6:	4299      	cmp	r1, r3
 8003ad8:	d002      	beq.n	8003ae0 <setvbuf+0x68>
 8003ada:	0030      	movs	r0, r6
 8003adc:	f000 fbca 	bl	8004274 <_free_r>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6363      	str	r3, [r4, #52]	; 0x34
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61a3      	str	r3, [r4, #24]
 8003ae8:	6063      	str	r3, [r4, #4]
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	d503      	bpl.n	8003af8 <setvbuf+0x80>
 8003af0:	0030      	movs	r0, r6
 8003af2:	6921      	ldr	r1, [r4, #16]
 8003af4:	f000 fbbe 	bl	8004274 <_free_r>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	4a40      	ldr	r2, [pc, #256]	; (8003bfc <setvbuf+0x184>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	81a3      	strh	r3, [r4, #12]
 8003b00:	9b00      	ldr	r3, [sp, #0]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d100      	bne.n	8003b08 <setvbuf+0x90>
 8003b06:	e069      	b.n	8003bdc <setvbuf+0x164>
 8003b08:	ab03      	add	r3, sp, #12
 8003b0a:	0021      	movs	r1, r4
 8003b0c:	0030      	movs	r0, r6
 8003b0e:	aa02      	add	r2, sp, #8
 8003b10:	f000 fb3a 	bl	8004188 <__swhatbuf_r>
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	4303      	orrs	r3, r0
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	2d00      	cmp	r5, #0
 8003b1c:	d12b      	bne.n	8003b76 <setvbuf+0xfe>
 8003b1e:	9d02      	ldr	r5, [sp, #8]
 8003b20:	0028      	movs	r0, r5
 8003b22:	f000 fb9d 	bl	8004260 <malloc>
 8003b26:	1e07      	subs	r7, r0, #0
 8003b28:	d153      	bne.n	8003bd2 <setvbuf+0x15a>
 8003b2a:	9b02      	ldr	r3, [sp, #8]
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	42ab      	cmp	r3, r5
 8003b30:	d149      	bne.n	8003bc6 <setvbuf+0x14e>
 8003b32:	2501      	movs	r5, #1
 8003b34:	426d      	negs	r5, r5
 8003b36:	2302      	movs	r3, #2
 8003b38:	89a2      	ldrh	r2, [r4, #12]
 8003b3a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60a2      	str	r2, [r4, #8]
 8003b42:	0022      	movs	r2, r4
 8003b44:	3247      	adds	r2, #71	; 0x47
 8003b46:	6022      	str	r2, [r4, #0]
 8003b48:	6122      	str	r2, [r4, #16]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	b21b      	sxth	r3, r3
 8003b4e:	81a3      	strh	r3, [r4, #12]
 8003b50:	6162      	str	r2, [r4, #20]
 8003b52:	4211      	tst	r1, r2
 8003b54:	d134      	bne.n	8003bc0 <setvbuf+0x148>
 8003b56:	059b      	lsls	r3, r3, #22
 8003b58:	d432      	bmi.n	8003bc0 <setvbuf+0x148>
 8003b5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b5c:	f000 fb12 	bl	8004184 <__retarget_lock_release_recursive>
 8003b60:	e02e      	b.n	8003bc0 <setvbuf+0x148>
 8003b62:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <setvbuf+0x188>)
 8003b64:	429c      	cmp	r4, r3
 8003b66:	d101      	bne.n	8003b6c <setvbuf+0xf4>
 8003b68:	68b4      	ldr	r4, [r6, #8]
 8003b6a:	e799      	b.n	8003aa0 <setvbuf+0x28>
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <setvbuf+0x18c>)
 8003b6e:	429c      	cmp	r4, r3
 8003b70:	d196      	bne.n	8003aa0 <setvbuf+0x28>
 8003b72:	68f4      	ldr	r4, [r6, #12]
 8003b74:	e794      	b.n	8003aa0 <setvbuf+0x28>
 8003b76:	2f00      	cmp	r7, #0
 8003b78:	d0d2      	beq.n	8003b20 <setvbuf+0xa8>
 8003b7a:	69b3      	ldr	r3, [r6, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <setvbuf+0x10e>
 8003b80:	0030      	movs	r0, r6
 8003b82:	f000 fa5d 	bl	8004040 <__sinit>
 8003b86:	9b00      	ldr	r3, [sp, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d102      	bne.n	8003b92 <setvbuf+0x11a>
 8003b8c:	89a2      	ldrh	r2, [r4, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	89a2      	ldrh	r2, [r4, #12]
 8003b94:	2308      	movs	r3, #8
 8003b96:	0011      	movs	r1, r2
 8003b98:	6027      	str	r7, [r4, #0]
 8003b9a:	6127      	str	r7, [r4, #16]
 8003b9c:	6165      	str	r5, [r4, #20]
 8003b9e:	4019      	ands	r1, r3
 8003ba0:	421a      	tst	r2, r3
 8003ba2:	d01f      	beq.n	8003be4 <setvbuf+0x16c>
 8003ba4:	07d3      	lsls	r3, r2, #31
 8003ba6:	d51b      	bpl.n	8003be0 <setvbuf+0x168>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	426d      	negs	r5, r5
 8003bac:	60a3      	str	r3, [r4, #8]
 8003bae:	61a5      	str	r5, [r4, #24]
 8003bb0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	000d      	movs	r5, r1
 8003bb6:	401d      	ands	r5, r3
 8003bb8:	4219      	tst	r1, r3
 8003bba:	d118      	bne.n	8003bee <setvbuf+0x176>
 8003bbc:	0593      	lsls	r3, r2, #22
 8003bbe:	d5cc      	bpl.n	8003b5a <setvbuf+0xe2>
 8003bc0:	0028      	movs	r0, r5
 8003bc2:	b005      	add	sp, #20
 8003bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc6:	9801      	ldr	r0, [sp, #4]
 8003bc8:	f000 fb4a 	bl	8004260 <malloc>
 8003bcc:	9d01      	ldr	r5, [sp, #4]
 8003bce:	1e07      	subs	r7, r0, #0
 8003bd0:	d0af      	beq.n	8003b32 <setvbuf+0xba>
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	89a2      	ldrh	r2, [r4, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	e7ce      	b.n	8003b7a <setvbuf+0x102>
 8003bdc:	2500      	movs	r5, #0
 8003bde:	e7aa      	b.n	8003b36 <setvbuf+0xbe>
 8003be0:	60a5      	str	r5, [r4, #8]
 8003be2:	e7e5      	b.n	8003bb0 <setvbuf+0x138>
 8003be4:	60a1      	str	r1, [r4, #8]
 8003be6:	e7e3      	b.n	8003bb0 <setvbuf+0x138>
 8003be8:	2501      	movs	r5, #1
 8003bea:	426d      	negs	r5, r5
 8003bec:	e7e8      	b.n	8003bc0 <setvbuf+0x148>
 8003bee:	2500      	movs	r5, #0
 8003bf0:	e7e6      	b.n	8003bc0 <setvbuf+0x148>
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	20000014 	.word	0x20000014
 8003bf8:	08005060 	.word	0x08005060
 8003bfc:	fffff35c 	.word	0xfffff35c
 8003c00:	08005080 	.word	0x08005080
 8003c04:	08005040 	.word	0x08005040

08003c08 <siprintf>:
 8003c08:	b40e      	push	{r1, r2, r3}
 8003c0a:	b500      	push	{lr}
 8003c0c:	490b      	ldr	r1, [pc, #44]	; (8003c3c <siprintf+0x34>)
 8003c0e:	b09c      	sub	sp, #112	; 0x70
 8003c10:	ab1d      	add	r3, sp, #116	; 0x74
 8003c12:	9002      	str	r0, [sp, #8]
 8003c14:	9006      	str	r0, [sp, #24]
 8003c16:	9107      	str	r1, [sp, #28]
 8003c18:	9104      	str	r1, [sp, #16]
 8003c1a:	4809      	ldr	r0, [pc, #36]	; (8003c40 <siprintf+0x38>)
 8003c1c:	4909      	ldr	r1, [pc, #36]	; (8003c44 <siprintf+0x3c>)
 8003c1e:	cb04      	ldmia	r3!, {r2}
 8003c20:	9105      	str	r1, [sp, #20]
 8003c22:	6800      	ldr	r0, [r0, #0]
 8003c24:	a902      	add	r1, sp, #8
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	f000 fc2e 	bl	8004488 <_svfiprintf_r>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9a02      	ldr	r2, [sp, #8]
 8003c30:	7013      	strb	r3, [r2, #0]
 8003c32:	b01c      	add	sp, #112	; 0x70
 8003c34:	bc08      	pop	{r3}
 8003c36:	b003      	add	sp, #12
 8003c38:	4718      	bx	r3
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	7fffffff 	.word	0x7fffffff
 8003c40:	20000014 	.word	0x20000014
 8003c44:	ffff0208 	.word	0xffff0208

08003c48 <__swbuf_r>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	0005      	movs	r5, r0
 8003c4c:	000e      	movs	r6, r1
 8003c4e:	0014      	movs	r4, r2
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d004      	beq.n	8003c5e <__swbuf_r+0x16>
 8003c54:	6983      	ldr	r3, [r0, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <__swbuf_r+0x16>
 8003c5a:	f000 f9f1 	bl	8004040 <__sinit>
 8003c5e:	4b22      	ldr	r3, [pc, #136]	; (8003ce8 <__swbuf_r+0xa0>)
 8003c60:	429c      	cmp	r4, r3
 8003c62:	d12e      	bne.n	8003cc2 <__swbuf_r+0x7a>
 8003c64:	686c      	ldr	r4, [r5, #4]
 8003c66:	69a3      	ldr	r3, [r4, #24]
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	071b      	lsls	r3, r3, #28
 8003c6e:	d532      	bpl.n	8003cd6 <__swbuf_r+0x8e>
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d02f      	beq.n	8003cd6 <__swbuf_r+0x8e>
 8003c76:	6823      	ldr	r3, [r4, #0]
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	b2f7      	uxtb	r7, r6
 8003c7c:	1a98      	subs	r0, r3, r2
 8003c7e:	6963      	ldr	r3, [r4, #20]
 8003c80:	b2f6      	uxtb	r6, r6
 8003c82:	4283      	cmp	r3, r0
 8003c84:	dc05      	bgt.n	8003c92 <__swbuf_r+0x4a>
 8003c86:	0021      	movs	r1, r4
 8003c88:	0028      	movs	r0, r5
 8003c8a:	f000 f937 	bl	8003efc <_fflush_r>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d127      	bne.n	8003ce2 <__swbuf_r+0x9a>
 8003c92:	68a3      	ldr	r3, [r4, #8]
 8003c94:	3001      	adds	r0, #1
 8003c96:	3b01      	subs	r3, #1
 8003c98:	60a3      	str	r3, [r4, #8]
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	6022      	str	r2, [r4, #0]
 8003ca0:	701f      	strb	r7, [r3, #0]
 8003ca2:	6963      	ldr	r3, [r4, #20]
 8003ca4:	4283      	cmp	r3, r0
 8003ca6:	d004      	beq.n	8003cb2 <__swbuf_r+0x6a>
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	07db      	lsls	r3, r3, #31
 8003cac:	d507      	bpl.n	8003cbe <__swbuf_r+0x76>
 8003cae:	2e0a      	cmp	r6, #10
 8003cb0:	d105      	bne.n	8003cbe <__swbuf_r+0x76>
 8003cb2:	0021      	movs	r1, r4
 8003cb4:	0028      	movs	r0, r5
 8003cb6:	f000 f921 	bl	8003efc <_fflush_r>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d111      	bne.n	8003ce2 <__swbuf_r+0x9a>
 8003cbe:	0030      	movs	r0, r6
 8003cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <__swbuf_r+0xa4>)
 8003cc4:	429c      	cmp	r4, r3
 8003cc6:	d101      	bne.n	8003ccc <__swbuf_r+0x84>
 8003cc8:	68ac      	ldr	r4, [r5, #8]
 8003cca:	e7cc      	b.n	8003c66 <__swbuf_r+0x1e>
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <__swbuf_r+0xa8>)
 8003cce:	429c      	cmp	r4, r3
 8003cd0:	d1c9      	bne.n	8003c66 <__swbuf_r+0x1e>
 8003cd2:	68ec      	ldr	r4, [r5, #12]
 8003cd4:	e7c7      	b.n	8003c66 <__swbuf_r+0x1e>
 8003cd6:	0021      	movs	r1, r4
 8003cd8:	0028      	movs	r0, r5
 8003cda:	f000 f80b 	bl	8003cf4 <__swsetup_r>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d0c9      	beq.n	8003c76 <__swbuf_r+0x2e>
 8003ce2:	2601      	movs	r6, #1
 8003ce4:	4276      	negs	r6, r6
 8003ce6:	e7ea      	b.n	8003cbe <__swbuf_r+0x76>
 8003ce8:	08005060 	.word	0x08005060
 8003cec:	08005080 	.word	0x08005080
 8003cf0:	08005040 	.word	0x08005040

08003cf4 <__swsetup_r>:
 8003cf4:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <__swsetup_r+0xe0>)
 8003cf6:	b570      	push	{r4, r5, r6, lr}
 8003cf8:	681d      	ldr	r5, [r3, #0]
 8003cfa:	0006      	movs	r6, r0
 8003cfc:	000c      	movs	r4, r1
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	d005      	beq.n	8003d0e <__swsetup_r+0x1a>
 8003d02:	69ab      	ldr	r3, [r5, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <__swsetup_r+0x1a>
 8003d08:	0028      	movs	r0, r5
 8003d0a:	f000 f999 	bl	8004040 <__sinit>
 8003d0e:	4b32      	ldr	r3, [pc, #200]	; (8003dd8 <__swsetup_r+0xe4>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	d10f      	bne.n	8003d34 <__swsetup_r+0x40>
 8003d14:	686c      	ldr	r4, [r5, #4]
 8003d16:	230c      	movs	r3, #12
 8003d18:	5ee2      	ldrsh	r2, [r4, r3]
 8003d1a:	b293      	uxth	r3, r2
 8003d1c:	0711      	lsls	r1, r2, #28
 8003d1e:	d42d      	bmi.n	8003d7c <__swsetup_r+0x88>
 8003d20:	06d9      	lsls	r1, r3, #27
 8003d22:	d411      	bmi.n	8003d48 <__swsetup_r+0x54>
 8003d24:	2309      	movs	r3, #9
 8003d26:	2001      	movs	r0, #1
 8003d28:	6033      	str	r3, [r6, #0]
 8003d2a:	3337      	adds	r3, #55	; 0x37
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	81a3      	strh	r3, [r4, #12]
 8003d30:	4240      	negs	r0, r0
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <__swsetup_r+0xe8>)
 8003d36:	429c      	cmp	r4, r3
 8003d38:	d101      	bne.n	8003d3e <__swsetup_r+0x4a>
 8003d3a:	68ac      	ldr	r4, [r5, #8]
 8003d3c:	e7eb      	b.n	8003d16 <__swsetup_r+0x22>
 8003d3e:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <__swsetup_r+0xec>)
 8003d40:	429c      	cmp	r4, r3
 8003d42:	d1e8      	bne.n	8003d16 <__swsetup_r+0x22>
 8003d44:	68ec      	ldr	r4, [r5, #12]
 8003d46:	e7e6      	b.n	8003d16 <__swsetup_r+0x22>
 8003d48:	075b      	lsls	r3, r3, #29
 8003d4a:	d513      	bpl.n	8003d74 <__swsetup_r+0x80>
 8003d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d4e:	2900      	cmp	r1, #0
 8003d50:	d008      	beq.n	8003d64 <__swsetup_r+0x70>
 8003d52:	0023      	movs	r3, r4
 8003d54:	3344      	adds	r3, #68	; 0x44
 8003d56:	4299      	cmp	r1, r3
 8003d58:	d002      	beq.n	8003d60 <__swsetup_r+0x6c>
 8003d5a:	0030      	movs	r0, r6
 8003d5c:	f000 fa8a 	bl	8004274 <_free_r>
 8003d60:	2300      	movs	r3, #0
 8003d62:	6363      	str	r3, [r4, #52]	; 0x34
 8003d64:	2224      	movs	r2, #36	; 0x24
 8003d66:	89a3      	ldrh	r3, [r4, #12]
 8003d68:	4393      	bics	r3, r2
 8003d6a:	81a3      	strh	r3, [r4, #12]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6063      	str	r3, [r4, #4]
 8003d70:	6923      	ldr	r3, [r4, #16]
 8003d72:	6023      	str	r3, [r4, #0]
 8003d74:	2308      	movs	r3, #8
 8003d76:	89a2      	ldrh	r2, [r4, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	81a3      	strh	r3, [r4, #12]
 8003d7c:	6923      	ldr	r3, [r4, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10b      	bne.n	8003d9a <__swsetup_r+0xa6>
 8003d82:	21a0      	movs	r1, #160	; 0xa0
 8003d84:	2280      	movs	r2, #128	; 0x80
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	0089      	lsls	r1, r1, #2
 8003d8a:	0092      	lsls	r2, r2, #2
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <__swsetup_r+0xa6>
 8003d92:	0021      	movs	r1, r4
 8003d94:	0030      	movs	r0, r6
 8003d96:	f000 fa1f 	bl	80041d8 <__smakebuf_r>
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	5ea3      	ldrsh	r3, [r4, r2]
 8003d9e:	2001      	movs	r0, #1
 8003da0:	001a      	movs	r2, r3
 8003da2:	b299      	uxth	r1, r3
 8003da4:	4002      	ands	r2, r0
 8003da6:	4203      	tst	r3, r0
 8003da8:	d00f      	beq.n	8003dca <__swsetup_r+0xd6>
 8003daa:	2200      	movs	r2, #0
 8003dac:	60a2      	str	r2, [r4, #8]
 8003dae:	6962      	ldr	r2, [r4, #20]
 8003db0:	4252      	negs	r2, r2
 8003db2:	61a2      	str	r2, [r4, #24]
 8003db4:	2000      	movs	r0, #0
 8003db6:	6922      	ldr	r2, [r4, #16]
 8003db8:	4282      	cmp	r2, r0
 8003dba:	d1ba      	bne.n	8003d32 <__swsetup_r+0x3e>
 8003dbc:	060a      	lsls	r2, r1, #24
 8003dbe:	d5b8      	bpl.n	8003d32 <__swsetup_r+0x3e>
 8003dc0:	2240      	movs	r2, #64	; 0x40
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	81a3      	strh	r3, [r4, #12]
 8003dc6:	3801      	subs	r0, #1
 8003dc8:	e7b3      	b.n	8003d32 <__swsetup_r+0x3e>
 8003dca:	0788      	lsls	r0, r1, #30
 8003dcc:	d400      	bmi.n	8003dd0 <__swsetup_r+0xdc>
 8003dce:	6962      	ldr	r2, [r4, #20]
 8003dd0:	60a2      	str	r2, [r4, #8]
 8003dd2:	e7ef      	b.n	8003db4 <__swsetup_r+0xc0>
 8003dd4:	20000014 	.word	0x20000014
 8003dd8:	08005060 	.word	0x08005060
 8003ddc:	08005080 	.word	0x08005080
 8003de0:	08005040 	.word	0x08005040

08003de4 <__sflush_r>:
 8003de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003de6:	898b      	ldrh	r3, [r1, #12]
 8003de8:	0005      	movs	r5, r0
 8003dea:	000c      	movs	r4, r1
 8003dec:	071a      	lsls	r2, r3, #28
 8003dee:	d45f      	bmi.n	8003eb0 <__sflush_r+0xcc>
 8003df0:	684a      	ldr	r2, [r1, #4]
 8003df2:	2a00      	cmp	r2, #0
 8003df4:	dc04      	bgt.n	8003e00 <__sflush_r+0x1c>
 8003df6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003df8:	2a00      	cmp	r2, #0
 8003dfa:	dc01      	bgt.n	8003e00 <__sflush_r+0x1c>
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e02:	2f00      	cmp	r7, #0
 8003e04:	d0fa      	beq.n	8003dfc <__sflush_r+0x18>
 8003e06:	2200      	movs	r2, #0
 8003e08:	2180      	movs	r1, #128	; 0x80
 8003e0a:	682e      	ldr	r6, [r5, #0]
 8003e0c:	602a      	str	r2, [r5, #0]
 8003e0e:	001a      	movs	r2, r3
 8003e10:	0149      	lsls	r1, r1, #5
 8003e12:	400a      	ands	r2, r1
 8003e14:	420b      	tst	r3, r1
 8003e16:	d034      	beq.n	8003e82 <__sflush_r+0x9e>
 8003e18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	075b      	lsls	r3, r3, #29
 8003e1e:	d506      	bpl.n	8003e2e <__sflush_r+0x4a>
 8003e20:	6863      	ldr	r3, [r4, #4]
 8003e22:	1ac0      	subs	r0, r0, r3
 8003e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <__sflush_r+0x4a>
 8003e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e2c:	1ac0      	subs	r0, r0, r3
 8003e2e:	0002      	movs	r2, r0
 8003e30:	6a21      	ldr	r1, [r4, #32]
 8003e32:	2300      	movs	r3, #0
 8003e34:	0028      	movs	r0, r5
 8003e36:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e38:	47b8      	blx	r7
 8003e3a:	89a1      	ldrh	r1, [r4, #12]
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d106      	bne.n	8003e4e <__sflush_r+0x6a>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	2b1d      	cmp	r3, #29
 8003e44:	d831      	bhi.n	8003eaa <__sflush_r+0xc6>
 8003e46:	4a2c      	ldr	r2, [pc, #176]	; (8003ef8 <__sflush_r+0x114>)
 8003e48:	40da      	lsrs	r2, r3
 8003e4a:	07d3      	lsls	r3, r2, #31
 8003e4c:	d52d      	bpl.n	8003eaa <__sflush_r+0xc6>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	6063      	str	r3, [r4, #4]
 8003e52:	6923      	ldr	r3, [r4, #16]
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	04cb      	lsls	r3, r1, #19
 8003e58:	d505      	bpl.n	8003e66 <__sflush_r+0x82>
 8003e5a:	1c43      	adds	r3, r0, #1
 8003e5c:	d102      	bne.n	8003e64 <__sflush_r+0x80>
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d100      	bne.n	8003e66 <__sflush_r+0x82>
 8003e64:	6560      	str	r0, [r4, #84]	; 0x54
 8003e66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e68:	602e      	str	r6, [r5, #0]
 8003e6a:	2900      	cmp	r1, #0
 8003e6c:	d0c6      	beq.n	8003dfc <__sflush_r+0x18>
 8003e6e:	0023      	movs	r3, r4
 8003e70:	3344      	adds	r3, #68	; 0x44
 8003e72:	4299      	cmp	r1, r3
 8003e74:	d002      	beq.n	8003e7c <__sflush_r+0x98>
 8003e76:	0028      	movs	r0, r5
 8003e78:	f000 f9fc 	bl	8004274 <_free_r>
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	6360      	str	r0, [r4, #52]	; 0x34
 8003e80:	e7bd      	b.n	8003dfe <__sflush_r+0x1a>
 8003e82:	2301      	movs	r3, #1
 8003e84:	0028      	movs	r0, r5
 8003e86:	6a21      	ldr	r1, [r4, #32]
 8003e88:	47b8      	blx	r7
 8003e8a:	1c43      	adds	r3, r0, #1
 8003e8c:	d1c5      	bne.n	8003e1a <__sflush_r+0x36>
 8003e8e:	682b      	ldr	r3, [r5, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0c2      	beq.n	8003e1a <__sflush_r+0x36>
 8003e94:	2b1d      	cmp	r3, #29
 8003e96:	d001      	beq.n	8003e9c <__sflush_r+0xb8>
 8003e98:	2b16      	cmp	r3, #22
 8003e9a:	d101      	bne.n	8003ea0 <__sflush_r+0xbc>
 8003e9c:	602e      	str	r6, [r5, #0]
 8003e9e:	e7ad      	b.n	8003dfc <__sflush_r+0x18>
 8003ea0:	2340      	movs	r3, #64	; 0x40
 8003ea2:	89a2      	ldrh	r2, [r4, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	e7a9      	b.n	8003dfe <__sflush_r+0x1a>
 8003eaa:	2340      	movs	r3, #64	; 0x40
 8003eac:	430b      	orrs	r3, r1
 8003eae:	e7fa      	b.n	8003ea6 <__sflush_r+0xc2>
 8003eb0:	690f      	ldr	r7, [r1, #16]
 8003eb2:	2f00      	cmp	r7, #0
 8003eb4:	d0a2      	beq.n	8003dfc <__sflush_r+0x18>
 8003eb6:	680a      	ldr	r2, [r1, #0]
 8003eb8:	600f      	str	r7, [r1, #0]
 8003eba:	1bd2      	subs	r2, r2, r7
 8003ebc:	9201      	str	r2, [sp, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	079b      	lsls	r3, r3, #30
 8003ec2:	d100      	bne.n	8003ec6 <__sflush_r+0xe2>
 8003ec4:	694a      	ldr	r2, [r1, #20]
 8003ec6:	60a2      	str	r2, [r4, #8]
 8003ec8:	9b01      	ldr	r3, [sp, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	dc00      	bgt.n	8003ed0 <__sflush_r+0xec>
 8003ece:	e795      	b.n	8003dfc <__sflush_r+0x18>
 8003ed0:	003a      	movs	r2, r7
 8003ed2:	0028      	movs	r0, r5
 8003ed4:	9b01      	ldr	r3, [sp, #4]
 8003ed6:	6a21      	ldr	r1, [r4, #32]
 8003ed8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003eda:	47b0      	blx	r6
 8003edc:	2800      	cmp	r0, #0
 8003ede:	dc06      	bgt.n	8003eee <__sflush_r+0x10a>
 8003ee0:	2340      	movs	r3, #64	; 0x40
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	89a2      	ldrh	r2, [r4, #12]
 8003ee6:	4240      	negs	r0, r0
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	81a3      	strh	r3, [r4, #12]
 8003eec:	e787      	b.n	8003dfe <__sflush_r+0x1a>
 8003eee:	9b01      	ldr	r3, [sp, #4]
 8003ef0:	183f      	adds	r7, r7, r0
 8003ef2:	1a1b      	subs	r3, r3, r0
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	e7e7      	b.n	8003ec8 <__sflush_r+0xe4>
 8003ef8:	20400001 	.word	0x20400001

08003efc <_fflush_r>:
 8003efc:	690b      	ldr	r3, [r1, #16]
 8003efe:	b570      	push	{r4, r5, r6, lr}
 8003f00:	0005      	movs	r5, r0
 8003f02:	000c      	movs	r4, r1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <_fflush_r+0x12>
 8003f08:	2500      	movs	r5, #0
 8003f0a:	0028      	movs	r0, r5
 8003f0c:	bd70      	pop	{r4, r5, r6, pc}
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d004      	beq.n	8003f1c <_fflush_r+0x20>
 8003f12:	6983      	ldr	r3, [r0, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <_fflush_r+0x20>
 8003f18:	f000 f892 	bl	8004040 <__sinit>
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <_fflush_r+0x74>)
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	d11b      	bne.n	8003f5a <_fflush_r+0x5e>
 8003f22:	686c      	ldr	r4, [r5, #4]
 8003f24:	220c      	movs	r2, #12
 8003f26:	5ea3      	ldrsh	r3, [r4, r2]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ed      	beq.n	8003f08 <_fflush_r+0xc>
 8003f2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f2e:	07d2      	lsls	r2, r2, #31
 8003f30:	d404      	bmi.n	8003f3c <_fflush_r+0x40>
 8003f32:	059b      	lsls	r3, r3, #22
 8003f34:	d402      	bmi.n	8003f3c <_fflush_r+0x40>
 8003f36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f38:	f000 f923 	bl	8004182 <__retarget_lock_acquire_recursive>
 8003f3c:	0028      	movs	r0, r5
 8003f3e:	0021      	movs	r1, r4
 8003f40:	f7ff ff50 	bl	8003de4 <__sflush_r>
 8003f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f46:	0005      	movs	r5, r0
 8003f48:	07db      	lsls	r3, r3, #31
 8003f4a:	d4de      	bmi.n	8003f0a <_fflush_r+0xe>
 8003f4c:	89a3      	ldrh	r3, [r4, #12]
 8003f4e:	059b      	lsls	r3, r3, #22
 8003f50:	d4db      	bmi.n	8003f0a <_fflush_r+0xe>
 8003f52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f54:	f000 f916 	bl	8004184 <__retarget_lock_release_recursive>
 8003f58:	e7d7      	b.n	8003f0a <_fflush_r+0xe>
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <_fflush_r+0x78>)
 8003f5c:	429c      	cmp	r4, r3
 8003f5e:	d101      	bne.n	8003f64 <_fflush_r+0x68>
 8003f60:	68ac      	ldr	r4, [r5, #8]
 8003f62:	e7df      	b.n	8003f24 <_fflush_r+0x28>
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <_fflush_r+0x7c>)
 8003f66:	429c      	cmp	r4, r3
 8003f68:	d1dc      	bne.n	8003f24 <_fflush_r+0x28>
 8003f6a:	68ec      	ldr	r4, [r5, #12]
 8003f6c:	e7da      	b.n	8003f24 <_fflush_r+0x28>
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	08005060 	.word	0x08005060
 8003f74:	08005080 	.word	0x08005080
 8003f78:	08005040 	.word	0x08005040

08003f7c <std>:
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	b510      	push	{r4, lr}
 8003f80:	0004      	movs	r4, r0
 8003f82:	6003      	str	r3, [r0, #0]
 8003f84:	6043      	str	r3, [r0, #4]
 8003f86:	6083      	str	r3, [r0, #8]
 8003f88:	8181      	strh	r1, [r0, #12]
 8003f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003f8c:	0019      	movs	r1, r3
 8003f8e:	81c2      	strh	r2, [r0, #14]
 8003f90:	6103      	str	r3, [r0, #16]
 8003f92:	6143      	str	r3, [r0, #20]
 8003f94:	6183      	str	r3, [r0, #24]
 8003f96:	2208      	movs	r2, #8
 8003f98:	305c      	adds	r0, #92	; 0x5c
 8003f9a:	f7ff fccf 	bl	800393c <memset>
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <std+0x38>)
 8003fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <std+0x3c>)
 8003fa4:	6224      	str	r4, [r4, #32]
 8003fa6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <std+0x40>)
 8003faa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <std+0x44>)
 8003fae:	6323      	str	r3, [r4, #48]	; 0x30
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	08004c75 	.word	0x08004c75
 8003fb8:	08004c9d 	.word	0x08004c9d
 8003fbc:	08004cd5 	.word	0x08004cd5
 8003fc0:	08004d01 	.word	0x08004d01

08003fc4 <_cleanup_r>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	4902      	ldr	r1, [pc, #8]	; (8003fd0 <_cleanup_r+0xc>)
 8003fc8:	f000 f8ba 	bl	8004140 <_fwalk_reent>
 8003fcc:	bd10      	pop	{r4, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	08003efd 	.word	0x08003efd

08003fd4 <__sfmoreglue>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	2568      	movs	r5, #104	; 0x68
 8003fd8:	1e4a      	subs	r2, r1, #1
 8003fda:	4355      	muls	r5, r2
 8003fdc:	000e      	movs	r6, r1
 8003fde:	0029      	movs	r1, r5
 8003fe0:	3174      	adds	r1, #116	; 0x74
 8003fe2:	f000 f991 	bl	8004308 <_malloc_r>
 8003fe6:	1e04      	subs	r4, r0, #0
 8003fe8:	d008      	beq.n	8003ffc <__sfmoreglue+0x28>
 8003fea:	2100      	movs	r1, #0
 8003fec:	002a      	movs	r2, r5
 8003fee:	6001      	str	r1, [r0, #0]
 8003ff0:	6046      	str	r6, [r0, #4]
 8003ff2:	300c      	adds	r0, #12
 8003ff4:	60a0      	str	r0, [r4, #8]
 8003ff6:	3268      	adds	r2, #104	; 0x68
 8003ff8:	f7ff fca0 	bl	800393c <memset>
 8003ffc:	0020      	movs	r0, r4
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}

08004000 <__sfp_lock_acquire>:
 8004000:	b510      	push	{r4, lr}
 8004002:	4802      	ldr	r0, [pc, #8]	; (800400c <__sfp_lock_acquire+0xc>)
 8004004:	f000 f8bd 	bl	8004182 <__retarget_lock_acquire_recursive>
 8004008:	bd10      	pop	{r4, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	200001e4 	.word	0x200001e4

08004010 <__sfp_lock_release>:
 8004010:	b510      	push	{r4, lr}
 8004012:	4802      	ldr	r0, [pc, #8]	; (800401c <__sfp_lock_release+0xc>)
 8004014:	f000 f8b6 	bl	8004184 <__retarget_lock_release_recursive>
 8004018:	bd10      	pop	{r4, pc}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	200001e4 	.word	0x200001e4

08004020 <__sinit_lock_acquire>:
 8004020:	b510      	push	{r4, lr}
 8004022:	4802      	ldr	r0, [pc, #8]	; (800402c <__sinit_lock_acquire+0xc>)
 8004024:	f000 f8ad 	bl	8004182 <__retarget_lock_acquire_recursive>
 8004028:	bd10      	pop	{r4, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	200001df 	.word	0x200001df

08004030 <__sinit_lock_release>:
 8004030:	b510      	push	{r4, lr}
 8004032:	4802      	ldr	r0, [pc, #8]	; (800403c <__sinit_lock_release+0xc>)
 8004034:	f000 f8a6 	bl	8004184 <__retarget_lock_release_recursive>
 8004038:	bd10      	pop	{r4, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	200001df 	.word	0x200001df

08004040 <__sinit>:
 8004040:	b513      	push	{r0, r1, r4, lr}
 8004042:	0004      	movs	r4, r0
 8004044:	f7ff ffec 	bl	8004020 <__sinit_lock_acquire>
 8004048:	69a3      	ldr	r3, [r4, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <__sinit+0x14>
 800404e:	f7ff ffef 	bl	8004030 <__sinit_lock_release>
 8004052:	bd13      	pop	{r0, r1, r4, pc}
 8004054:	64a3      	str	r3, [r4, #72]	; 0x48
 8004056:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004058:	6523      	str	r3, [r4, #80]	; 0x50
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <__sinit+0x68>)
 800405c:	4a13      	ldr	r2, [pc, #76]	; (80040ac <__sinit+0x6c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	62a2      	str	r2, [r4, #40]	; 0x28
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	42a3      	cmp	r3, r4
 8004066:	d101      	bne.n	800406c <__sinit+0x2c>
 8004068:	2301      	movs	r3, #1
 800406a:	61a3      	str	r3, [r4, #24]
 800406c:	0020      	movs	r0, r4
 800406e:	f000 f81f 	bl	80040b0 <__sfp>
 8004072:	6060      	str	r0, [r4, #4]
 8004074:	0020      	movs	r0, r4
 8004076:	f000 f81b 	bl	80040b0 <__sfp>
 800407a:	60a0      	str	r0, [r4, #8]
 800407c:	0020      	movs	r0, r4
 800407e:	f000 f817 	bl	80040b0 <__sfp>
 8004082:	2200      	movs	r2, #0
 8004084:	2104      	movs	r1, #4
 8004086:	60e0      	str	r0, [r4, #12]
 8004088:	6860      	ldr	r0, [r4, #4]
 800408a:	f7ff ff77 	bl	8003f7c <std>
 800408e:	2201      	movs	r2, #1
 8004090:	2109      	movs	r1, #9
 8004092:	68a0      	ldr	r0, [r4, #8]
 8004094:	f7ff ff72 	bl	8003f7c <std>
 8004098:	2202      	movs	r2, #2
 800409a:	2112      	movs	r1, #18
 800409c:	68e0      	ldr	r0, [r4, #12]
 800409e:	f7ff ff6d 	bl	8003f7c <std>
 80040a2:	2301      	movs	r3, #1
 80040a4:	61a3      	str	r3, [r4, #24]
 80040a6:	e7d2      	b.n	800404e <__sinit+0xe>
 80040a8:	0800503c 	.word	0x0800503c
 80040ac:	08003fc5 	.word	0x08003fc5

080040b0 <__sfp>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	0007      	movs	r7, r0
 80040b4:	f7ff ffa4 	bl	8004000 <__sfp_lock_acquire>
 80040b8:	4b1f      	ldr	r3, [pc, #124]	; (8004138 <__sfp+0x88>)
 80040ba:	681e      	ldr	r6, [r3, #0]
 80040bc:	69b3      	ldr	r3, [r6, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <__sfp+0x18>
 80040c2:	0030      	movs	r0, r6
 80040c4:	f7ff ffbc 	bl	8004040 <__sinit>
 80040c8:	3648      	adds	r6, #72	; 0x48
 80040ca:	68b4      	ldr	r4, [r6, #8]
 80040cc:	6873      	ldr	r3, [r6, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	d504      	bpl.n	80040dc <__sfp+0x2c>
 80040d2:	6833      	ldr	r3, [r6, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d022      	beq.n	800411e <__sfp+0x6e>
 80040d8:	6836      	ldr	r6, [r6, #0]
 80040da:	e7f6      	b.n	80040ca <__sfp+0x1a>
 80040dc:	220c      	movs	r2, #12
 80040de:	5ea5      	ldrsh	r5, [r4, r2]
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	d11a      	bne.n	800411a <__sfp+0x6a>
 80040e4:	0020      	movs	r0, r4
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <__sfp+0x8c>)
 80040e8:	3058      	adds	r0, #88	; 0x58
 80040ea:	60e3      	str	r3, [r4, #12]
 80040ec:	6665      	str	r5, [r4, #100]	; 0x64
 80040ee:	f000 f847 	bl	8004180 <__retarget_lock_init_recursive>
 80040f2:	f7ff ff8d 	bl	8004010 <__sfp_lock_release>
 80040f6:	0020      	movs	r0, r4
 80040f8:	2208      	movs	r2, #8
 80040fa:	0029      	movs	r1, r5
 80040fc:	6025      	str	r5, [r4, #0]
 80040fe:	60a5      	str	r5, [r4, #8]
 8004100:	6065      	str	r5, [r4, #4]
 8004102:	6125      	str	r5, [r4, #16]
 8004104:	6165      	str	r5, [r4, #20]
 8004106:	61a5      	str	r5, [r4, #24]
 8004108:	305c      	adds	r0, #92	; 0x5c
 800410a:	f7ff fc17 	bl	800393c <memset>
 800410e:	6365      	str	r5, [r4, #52]	; 0x34
 8004110:	63a5      	str	r5, [r4, #56]	; 0x38
 8004112:	64a5      	str	r5, [r4, #72]	; 0x48
 8004114:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004116:	0020      	movs	r0, r4
 8004118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800411a:	3468      	adds	r4, #104	; 0x68
 800411c:	e7d7      	b.n	80040ce <__sfp+0x1e>
 800411e:	2104      	movs	r1, #4
 8004120:	0038      	movs	r0, r7
 8004122:	f7ff ff57 	bl	8003fd4 <__sfmoreglue>
 8004126:	1e04      	subs	r4, r0, #0
 8004128:	6030      	str	r0, [r6, #0]
 800412a:	d1d5      	bne.n	80040d8 <__sfp+0x28>
 800412c:	f7ff ff70 	bl	8004010 <__sfp_lock_release>
 8004130:	230c      	movs	r3, #12
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	e7ef      	b.n	8004116 <__sfp+0x66>
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	0800503c 	.word	0x0800503c
 800413c:	ffff0001 	.word	0xffff0001

08004140 <_fwalk_reent>:
 8004140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004142:	0004      	movs	r4, r0
 8004144:	0006      	movs	r6, r0
 8004146:	2700      	movs	r7, #0
 8004148:	9101      	str	r1, [sp, #4]
 800414a:	3448      	adds	r4, #72	; 0x48
 800414c:	6863      	ldr	r3, [r4, #4]
 800414e:	68a5      	ldr	r5, [r4, #8]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	9b00      	ldr	r3, [sp, #0]
 8004154:	3b01      	subs	r3, #1
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	d504      	bpl.n	8004164 <_fwalk_reent+0x24>
 800415a:	6824      	ldr	r4, [r4, #0]
 800415c:	2c00      	cmp	r4, #0
 800415e:	d1f5      	bne.n	800414c <_fwalk_reent+0xc>
 8004160:	0038      	movs	r0, r7
 8004162:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004164:	89ab      	ldrh	r3, [r5, #12]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d908      	bls.n	800417c <_fwalk_reent+0x3c>
 800416a:	220e      	movs	r2, #14
 800416c:	5eab      	ldrsh	r3, [r5, r2]
 800416e:	3301      	adds	r3, #1
 8004170:	d004      	beq.n	800417c <_fwalk_reent+0x3c>
 8004172:	0029      	movs	r1, r5
 8004174:	0030      	movs	r0, r6
 8004176:	9b01      	ldr	r3, [sp, #4]
 8004178:	4798      	blx	r3
 800417a:	4307      	orrs	r7, r0
 800417c:	3568      	adds	r5, #104	; 0x68
 800417e:	e7e8      	b.n	8004152 <_fwalk_reent+0x12>

08004180 <__retarget_lock_init_recursive>:
 8004180:	4770      	bx	lr

08004182 <__retarget_lock_acquire_recursive>:
 8004182:	4770      	bx	lr

08004184 <__retarget_lock_release_recursive>:
 8004184:	4770      	bx	lr
	...

08004188 <__swhatbuf_r>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	000e      	movs	r6, r1
 800418c:	001d      	movs	r5, r3
 800418e:	230e      	movs	r3, #14
 8004190:	5ec9      	ldrsh	r1, [r1, r3]
 8004192:	0014      	movs	r4, r2
 8004194:	b096      	sub	sp, #88	; 0x58
 8004196:	2900      	cmp	r1, #0
 8004198:	da07      	bge.n	80041aa <__swhatbuf_r+0x22>
 800419a:	2300      	movs	r3, #0
 800419c:	602b      	str	r3, [r5, #0]
 800419e:	89b3      	ldrh	r3, [r6, #12]
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	d411      	bmi.n	80041c8 <__swhatbuf_r+0x40>
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	e00f      	b.n	80041ca <__swhatbuf_r+0x42>
 80041aa:	466a      	mov	r2, sp
 80041ac:	f000 fdd4 	bl	8004d58 <_fstat_r>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	dbf2      	blt.n	800419a <__swhatbuf_r+0x12>
 80041b4:	23f0      	movs	r3, #240	; 0xf0
 80041b6:	9901      	ldr	r1, [sp, #4]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	4019      	ands	r1, r3
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <__swhatbuf_r+0x4c>)
 80041be:	18c9      	adds	r1, r1, r3
 80041c0:	424b      	negs	r3, r1
 80041c2:	4159      	adcs	r1, r3
 80041c4:	6029      	str	r1, [r5, #0]
 80041c6:	e7ed      	b.n	80041a4 <__swhatbuf_r+0x1c>
 80041c8:	2340      	movs	r3, #64	; 0x40
 80041ca:	2000      	movs	r0, #0
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	b016      	add	sp, #88	; 0x58
 80041d0:	bd70      	pop	{r4, r5, r6, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	ffffe000 	.word	0xffffe000

080041d8 <__smakebuf_r>:
 80041d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041da:	2602      	movs	r6, #2
 80041dc:	898b      	ldrh	r3, [r1, #12]
 80041de:	0005      	movs	r5, r0
 80041e0:	000c      	movs	r4, r1
 80041e2:	4233      	tst	r3, r6
 80041e4:	d006      	beq.n	80041f4 <__smakebuf_r+0x1c>
 80041e6:	0023      	movs	r3, r4
 80041e8:	3347      	adds	r3, #71	; 0x47
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	6123      	str	r3, [r4, #16]
 80041ee:	2301      	movs	r3, #1
 80041f0:	6163      	str	r3, [r4, #20]
 80041f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80041f4:	466a      	mov	r2, sp
 80041f6:	ab01      	add	r3, sp, #4
 80041f8:	f7ff ffc6 	bl	8004188 <__swhatbuf_r>
 80041fc:	9900      	ldr	r1, [sp, #0]
 80041fe:	0007      	movs	r7, r0
 8004200:	0028      	movs	r0, r5
 8004202:	f000 f881 	bl	8004308 <_malloc_r>
 8004206:	2800      	cmp	r0, #0
 8004208:	d108      	bne.n	800421c <__smakebuf_r+0x44>
 800420a:	220c      	movs	r2, #12
 800420c:	5ea3      	ldrsh	r3, [r4, r2]
 800420e:	059a      	lsls	r2, r3, #22
 8004210:	d4ef      	bmi.n	80041f2 <__smakebuf_r+0x1a>
 8004212:	2203      	movs	r2, #3
 8004214:	4393      	bics	r3, r2
 8004216:	431e      	orrs	r6, r3
 8004218:	81a6      	strh	r6, [r4, #12]
 800421a:	e7e4      	b.n	80041e6 <__smakebuf_r+0xe>
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <__smakebuf_r+0x84>)
 800421e:	62ab      	str	r3, [r5, #40]	; 0x28
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	89a2      	ldrh	r2, [r4, #12]
 8004224:	6020      	str	r0, [r4, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	9b00      	ldr	r3, [sp, #0]
 800422c:	6120      	str	r0, [r4, #16]
 800422e:	6163      	str	r3, [r4, #20]
 8004230:	9b01      	ldr	r3, [sp, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <__smakebuf_r+0x7a>
 8004236:	0028      	movs	r0, r5
 8004238:	230e      	movs	r3, #14
 800423a:	5ee1      	ldrsh	r1, [r4, r3]
 800423c:	f000 fd9e 	bl	8004d7c <_isatty_r>
 8004240:	2800      	cmp	r0, #0
 8004242:	d006      	beq.n	8004252 <__smakebuf_r+0x7a>
 8004244:	2203      	movs	r2, #3
 8004246:	89a3      	ldrh	r3, [r4, #12]
 8004248:	4393      	bics	r3, r2
 800424a:	001a      	movs	r2, r3
 800424c:	2301      	movs	r3, #1
 800424e:	4313      	orrs	r3, r2
 8004250:	81a3      	strh	r3, [r4, #12]
 8004252:	89a0      	ldrh	r0, [r4, #12]
 8004254:	4307      	orrs	r7, r0
 8004256:	81a7      	strh	r7, [r4, #12]
 8004258:	e7cb      	b.n	80041f2 <__smakebuf_r+0x1a>
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	08003fc5 	.word	0x08003fc5

08004260 <malloc>:
 8004260:	b510      	push	{r4, lr}
 8004262:	4b03      	ldr	r3, [pc, #12]	; (8004270 <malloc+0x10>)
 8004264:	0001      	movs	r1, r0
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	f000 f84e 	bl	8004308 <_malloc_r>
 800426c:	bd10      	pop	{r4, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	20000014 	.word	0x20000014

08004274 <_free_r>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	0005      	movs	r5, r0
 8004278:	2900      	cmp	r1, #0
 800427a:	d010      	beq.n	800429e <_free_r+0x2a>
 800427c:	1f0c      	subs	r4, r1, #4
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	da00      	bge.n	8004286 <_free_r+0x12>
 8004284:	18e4      	adds	r4, r4, r3
 8004286:	0028      	movs	r0, r5
 8004288:	f000 fdc6 	bl	8004e18 <__malloc_lock>
 800428c:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <_free_r+0x90>)
 800428e:	6813      	ldr	r3, [r2, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <_free_r+0x2c>
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	6014      	str	r4, [r2, #0]
 8004298:	0028      	movs	r0, r5
 800429a:	f000 fdc5 	bl	8004e28 <__malloc_unlock>
 800429e:	bd70      	pop	{r4, r5, r6, pc}
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	d908      	bls.n	80042b6 <_free_r+0x42>
 80042a4:	6821      	ldr	r1, [r4, #0]
 80042a6:	1860      	adds	r0, r4, r1
 80042a8:	4283      	cmp	r3, r0
 80042aa:	d1f3      	bne.n	8004294 <_free_r+0x20>
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	1841      	adds	r1, r0, r1
 80042b2:	6021      	str	r1, [r4, #0]
 80042b4:	e7ee      	b.n	8004294 <_free_r+0x20>
 80042b6:	001a      	movs	r2, r3
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <_free_r+0x4e>
 80042be:	42a3      	cmp	r3, r4
 80042c0:	d9f9      	bls.n	80042b6 <_free_r+0x42>
 80042c2:	6811      	ldr	r1, [r2, #0]
 80042c4:	1850      	adds	r0, r2, r1
 80042c6:	42a0      	cmp	r0, r4
 80042c8:	d10b      	bne.n	80042e2 <_free_r+0x6e>
 80042ca:	6820      	ldr	r0, [r4, #0]
 80042cc:	1809      	adds	r1, r1, r0
 80042ce:	1850      	adds	r0, r2, r1
 80042d0:	6011      	str	r1, [r2, #0]
 80042d2:	4283      	cmp	r3, r0
 80042d4:	d1e0      	bne.n	8004298 <_free_r+0x24>
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	1841      	adds	r1, r0, r1
 80042dc:	6011      	str	r1, [r2, #0]
 80042de:	6053      	str	r3, [r2, #4]
 80042e0:	e7da      	b.n	8004298 <_free_r+0x24>
 80042e2:	42a0      	cmp	r0, r4
 80042e4:	d902      	bls.n	80042ec <_free_r+0x78>
 80042e6:	230c      	movs	r3, #12
 80042e8:	602b      	str	r3, [r5, #0]
 80042ea:	e7d5      	b.n	8004298 <_free_r+0x24>
 80042ec:	6821      	ldr	r1, [r4, #0]
 80042ee:	1860      	adds	r0, r4, r1
 80042f0:	4283      	cmp	r3, r0
 80042f2:	d103      	bne.n	80042fc <_free_r+0x88>
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	1841      	adds	r1, r0, r1
 80042fa:	6021      	str	r1, [r4, #0]
 80042fc:	6063      	str	r3, [r4, #4]
 80042fe:	6054      	str	r4, [r2, #4]
 8004300:	e7ca      	b.n	8004298 <_free_r+0x24>
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	200000bc 	.word	0x200000bc

08004308 <_malloc_r>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	2303      	movs	r3, #3
 800430c:	1ccd      	adds	r5, r1, #3
 800430e:	439d      	bics	r5, r3
 8004310:	3508      	adds	r5, #8
 8004312:	0006      	movs	r6, r0
 8004314:	2d0c      	cmp	r5, #12
 8004316:	d21f      	bcs.n	8004358 <_malloc_r+0x50>
 8004318:	250c      	movs	r5, #12
 800431a:	42a9      	cmp	r1, r5
 800431c:	d81e      	bhi.n	800435c <_malloc_r+0x54>
 800431e:	0030      	movs	r0, r6
 8004320:	f000 fd7a 	bl	8004e18 <__malloc_lock>
 8004324:	4925      	ldr	r1, [pc, #148]	; (80043bc <_malloc_r+0xb4>)
 8004326:	680a      	ldr	r2, [r1, #0]
 8004328:	0014      	movs	r4, r2
 800432a:	2c00      	cmp	r4, #0
 800432c:	d11a      	bne.n	8004364 <_malloc_r+0x5c>
 800432e:	4f24      	ldr	r7, [pc, #144]	; (80043c0 <_malloc_r+0xb8>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <_malloc_r+0x38>
 8004336:	0021      	movs	r1, r4
 8004338:	0030      	movs	r0, r6
 800433a:	f000 fc89 	bl	8004c50 <_sbrk_r>
 800433e:	6038      	str	r0, [r7, #0]
 8004340:	0029      	movs	r1, r5
 8004342:	0030      	movs	r0, r6
 8004344:	f000 fc84 	bl	8004c50 <_sbrk_r>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d12b      	bne.n	80043a4 <_malloc_r+0x9c>
 800434c:	230c      	movs	r3, #12
 800434e:	0030      	movs	r0, r6
 8004350:	6033      	str	r3, [r6, #0]
 8004352:	f000 fd69 	bl	8004e28 <__malloc_unlock>
 8004356:	e003      	b.n	8004360 <_malloc_r+0x58>
 8004358:	2d00      	cmp	r5, #0
 800435a:	dade      	bge.n	800431a <_malloc_r+0x12>
 800435c:	230c      	movs	r3, #12
 800435e:	6033      	str	r3, [r6, #0]
 8004360:	2000      	movs	r0, #0
 8004362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	1b5b      	subs	r3, r3, r5
 8004368:	d419      	bmi.n	800439e <_malloc_r+0x96>
 800436a:	2b0b      	cmp	r3, #11
 800436c:	d903      	bls.n	8004376 <_malloc_r+0x6e>
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	18e4      	adds	r4, r4, r3
 8004372:	6025      	str	r5, [r4, #0]
 8004374:	e003      	b.n	800437e <_malloc_r+0x76>
 8004376:	6863      	ldr	r3, [r4, #4]
 8004378:	42a2      	cmp	r2, r4
 800437a:	d10e      	bne.n	800439a <_malloc_r+0x92>
 800437c:	600b      	str	r3, [r1, #0]
 800437e:	0030      	movs	r0, r6
 8004380:	f000 fd52 	bl	8004e28 <__malloc_unlock>
 8004384:	0020      	movs	r0, r4
 8004386:	2207      	movs	r2, #7
 8004388:	300b      	adds	r0, #11
 800438a:	1d23      	adds	r3, r4, #4
 800438c:	4390      	bics	r0, r2
 800438e:	1ac2      	subs	r2, r0, r3
 8004390:	4298      	cmp	r0, r3
 8004392:	d0e6      	beq.n	8004362 <_malloc_r+0x5a>
 8004394:	1a1b      	subs	r3, r3, r0
 8004396:	50a3      	str	r3, [r4, r2]
 8004398:	e7e3      	b.n	8004362 <_malloc_r+0x5a>
 800439a:	6053      	str	r3, [r2, #4]
 800439c:	e7ef      	b.n	800437e <_malloc_r+0x76>
 800439e:	0022      	movs	r2, r4
 80043a0:	6864      	ldr	r4, [r4, #4]
 80043a2:	e7c2      	b.n	800432a <_malloc_r+0x22>
 80043a4:	2303      	movs	r3, #3
 80043a6:	1cc4      	adds	r4, r0, #3
 80043a8:	439c      	bics	r4, r3
 80043aa:	42a0      	cmp	r0, r4
 80043ac:	d0e1      	beq.n	8004372 <_malloc_r+0x6a>
 80043ae:	1a21      	subs	r1, r4, r0
 80043b0:	0030      	movs	r0, r6
 80043b2:	f000 fc4d 	bl	8004c50 <_sbrk_r>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	d1db      	bne.n	8004372 <_malloc_r+0x6a>
 80043ba:	e7c7      	b.n	800434c <_malloc_r+0x44>
 80043bc:	200000bc 	.word	0x200000bc
 80043c0:	200000c0 	.word	0x200000c0

080043c4 <__ssputs_r>:
 80043c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043c6:	688e      	ldr	r6, [r1, #8]
 80043c8:	b085      	sub	sp, #20
 80043ca:	0007      	movs	r7, r0
 80043cc:	000c      	movs	r4, r1
 80043ce:	9203      	str	r2, [sp, #12]
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	429e      	cmp	r6, r3
 80043d4:	d83c      	bhi.n	8004450 <__ssputs_r+0x8c>
 80043d6:	2390      	movs	r3, #144	; 0x90
 80043d8:	898a      	ldrh	r2, [r1, #12]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	421a      	tst	r2, r3
 80043de:	d034      	beq.n	800444a <__ssputs_r+0x86>
 80043e0:	2503      	movs	r5, #3
 80043e2:	6909      	ldr	r1, [r1, #16]
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	1a5b      	subs	r3, r3, r1
 80043e8:	9302      	str	r3, [sp, #8]
 80043ea:	6963      	ldr	r3, [r4, #20]
 80043ec:	9802      	ldr	r0, [sp, #8]
 80043ee:	435d      	muls	r5, r3
 80043f0:	0feb      	lsrs	r3, r5, #31
 80043f2:	195d      	adds	r5, r3, r5
 80043f4:	9b01      	ldr	r3, [sp, #4]
 80043f6:	106d      	asrs	r5, r5, #1
 80043f8:	3301      	adds	r3, #1
 80043fa:	181b      	adds	r3, r3, r0
 80043fc:	42ab      	cmp	r3, r5
 80043fe:	d900      	bls.n	8004402 <__ssputs_r+0x3e>
 8004400:	001d      	movs	r5, r3
 8004402:	0553      	lsls	r3, r2, #21
 8004404:	d532      	bpl.n	800446c <__ssputs_r+0xa8>
 8004406:	0029      	movs	r1, r5
 8004408:	0038      	movs	r0, r7
 800440a:	f7ff ff7d 	bl	8004308 <_malloc_r>
 800440e:	1e06      	subs	r6, r0, #0
 8004410:	d109      	bne.n	8004426 <__ssputs_r+0x62>
 8004412:	230c      	movs	r3, #12
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	2340      	movs	r3, #64	; 0x40
 8004418:	2001      	movs	r0, #1
 800441a:	89a2      	ldrh	r2, [r4, #12]
 800441c:	4240      	negs	r0, r0
 800441e:	4313      	orrs	r3, r2
 8004420:	81a3      	strh	r3, [r4, #12]
 8004422:	b005      	add	sp, #20
 8004424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004426:	9a02      	ldr	r2, [sp, #8]
 8004428:	6921      	ldr	r1, [r4, #16]
 800442a:	f000 fcd8 	bl	8004dde <memcpy>
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	4a14      	ldr	r2, [pc, #80]	; (8004484 <__ssputs_r+0xc0>)
 8004432:	401a      	ands	r2, r3
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	4313      	orrs	r3, r2
 8004438:	81a3      	strh	r3, [r4, #12]
 800443a:	9b02      	ldr	r3, [sp, #8]
 800443c:	6126      	str	r6, [r4, #16]
 800443e:	18f6      	adds	r6, r6, r3
 8004440:	6026      	str	r6, [r4, #0]
 8004442:	6165      	str	r5, [r4, #20]
 8004444:	9e01      	ldr	r6, [sp, #4]
 8004446:	1aed      	subs	r5, r5, r3
 8004448:	60a5      	str	r5, [r4, #8]
 800444a:	9b01      	ldr	r3, [sp, #4]
 800444c:	429e      	cmp	r6, r3
 800444e:	d900      	bls.n	8004452 <__ssputs_r+0x8e>
 8004450:	9e01      	ldr	r6, [sp, #4]
 8004452:	0032      	movs	r2, r6
 8004454:	9903      	ldr	r1, [sp, #12]
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	f000 fcca 	bl	8004df0 <memmove>
 800445c:	68a3      	ldr	r3, [r4, #8]
 800445e:	2000      	movs	r0, #0
 8004460:	1b9b      	subs	r3, r3, r6
 8004462:	60a3      	str	r3, [r4, #8]
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	199e      	adds	r6, r3, r6
 8004468:	6026      	str	r6, [r4, #0]
 800446a:	e7da      	b.n	8004422 <__ssputs_r+0x5e>
 800446c:	002a      	movs	r2, r5
 800446e:	0038      	movs	r0, r7
 8004470:	f000 fce2 	bl	8004e38 <_realloc_r>
 8004474:	1e06      	subs	r6, r0, #0
 8004476:	d1e0      	bne.n	800443a <__ssputs_r+0x76>
 8004478:	0038      	movs	r0, r7
 800447a:	6921      	ldr	r1, [r4, #16]
 800447c:	f7ff fefa 	bl	8004274 <_free_r>
 8004480:	e7c7      	b.n	8004412 <__ssputs_r+0x4e>
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	fffffb7f 	.word	0xfffffb7f

08004488 <_svfiprintf_r>:
 8004488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448a:	b0a1      	sub	sp, #132	; 0x84
 800448c:	9003      	str	r0, [sp, #12]
 800448e:	001d      	movs	r5, r3
 8004490:	898b      	ldrh	r3, [r1, #12]
 8004492:	000f      	movs	r7, r1
 8004494:	0016      	movs	r6, r2
 8004496:	061b      	lsls	r3, r3, #24
 8004498:	d511      	bpl.n	80044be <_svfiprintf_r+0x36>
 800449a:	690b      	ldr	r3, [r1, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10e      	bne.n	80044be <_svfiprintf_r+0x36>
 80044a0:	2140      	movs	r1, #64	; 0x40
 80044a2:	f7ff ff31 	bl	8004308 <_malloc_r>
 80044a6:	6038      	str	r0, [r7, #0]
 80044a8:	6138      	str	r0, [r7, #16]
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d105      	bne.n	80044ba <_svfiprintf_r+0x32>
 80044ae:	230c      	movs	r3, #12
 80044b0:	9a03      	ldr	r2, [sp, #12]
 80044b2:	3801      	subs	r0, #1
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	b021      	add	sp, #132	; 0x84
 80044b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ba:	2340      	movs	r3, #64	; 0x40
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	2300      	movs	r3, #0
 80044c0:	ac08      	add	r4, sp, #32
 80044c2:	6163      	str	r3, [r4, #20]
 80044c4:	3320      	adds	r3, #32
 80044c6:	7663      	strb	r3, [r4, #25]
 80044c8:	3310      	adds	r3, #16
 80044ca:	76a3      	strb	r3, [r4, #26]
 80044cc:	9507      	str	r5, [sp, #28]
 80044ce:	0035      	movs	r5, r6
 80044d0:	782b      	ldrb	r3, [r5, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <_svfiprintf_r+0x52>
 80044d6:	2b25      	cmp	r3, #37	; 0x25
 80044d8:	d147      	bne.n	800456a <_svfiprintf_r+0xe2>
 80044da:	1bab      	subs	r3, r5, r6
 80044dc:	9305      	str	r3, [sp, #20]
 80044de:	42b5      	cmp	r5, r6
 80044e0:	d00c      	beq.n	80044fc <_svfiprintf_r+0x74>
 80044e2:	0032      	movs	r2, r6
 80044e4:	0039      	movs	r1, r7
 80044e6:	9803      	ldr	r0, [sp, #12]
 80044e8:	f7ff ff6c 	bl	80043c4 <__ssputs_r>
 80044ec:	1c43      	adds	r3, r0, #1
 80044ee:	d100      	bne.n	80044f2 <_svfiprintf_r+0x6a>
 80044f0:	e0ae      	b.n	8004650 <_svfiprintf_r+0x1c8>
 80044f2:	6962      	ldr	r2, [r4, #20]
 80044f4:	9b05      	ldr	r3, [sp, #20]
 80044f6:	4694      	mov	ip, r2
 80044f8:	4463      	add	r3, ip
 80044fa:	6163      	str	r3, [r4, #20]
 80044fc:	782b      	ldrb	r3, [r5, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d100      	bne.n	8004504 <_svfiprintf_r+0x7c>
 8004502:	e0a5      	b.n	8004650 <_svfiprintf_r+0x1c8>
 8004504:	2201      	movs	r2, #1
 8004506:	2300      	movs	r3, #0
 8004508:	4252      	negs	r2, r2
 800450a:	6062      	str	r2, [r4, #4]
 800450c:	a904      	add	r1, sp, #16
 800450e:	3254      	adds	r2, #84	; 0x54
 8004510:	1852      	adds	r2, r2, r1
 8004512:	1c6e      	adds	r6, r5, #1
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	60e3      	str	r3, [r4, #12]
 8004518:	60a3      	str	r3, [r4, #8]
 800451a:	7013      	strb	r3, [r2, #0]
 800451c:	65a3      	str	r3, [r4, #88]	; 0x58
 800451e:	2205      	movs	r2, #5
 8004520:	7831      	ldrb	r1, [r6, #0]
 8004522:	4854      	ldr	r0, [pc, #336]	; (8004674 <_svfiprintf_r+0x1ec>)
 8004524:	f000 fc50 	bl	8004dc8 <memchr>
 8004528:	1c75      	adds	r5, r6, #1
 800452a:	2800      	cmp	r0, #0
 800452c:	d11f      	bne.n	800456e <_svfiprintf_r+0xe6>
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	06d3      	lsls	r3, r2, #27
 8004532:	d504      	bpl.n	800453e <_svfiprintf_r+0xb6>
 8004534:	2353      	movs	r3, #83	; 0x53
 8004536:	a904      	add	r1, sp, #16
 8004538:	185b      	adds	r3, r3, r1
 800453a:	2120      	movs	r1, #32
 800453c:	7019      	strb	r1, [r3, #0]
 800453e:	0713      	lsls	r3, r2, #28
 8004540:	d504      	bpl.n	800454c <_svfiprintf_r+0xc4>
 8004542:	2353      	movs	r3, #83	; 0x53
 8004544:	a904      	add	r1, sp, #16
 8004546:	185b      	adds	r3, r3, r1
 8004548:	212b      	movs	r1, #43	; 0x2b
 800454a:	7019      	strb	r1, [r3, #0]
 800454c:	7833      	ldrb	r3, [r6, #0]
 800454e:	2b2a      	cmp	r3, #42	; 0x2a
 8004550:	d016      	beq.n	8004580 <_svfiprintf_r+0xf8>
 8004552:	0035      	movs	r5, r6
 8004554:	2100      	movs	r1, #0
 8004556:	200a      	movs	r0, #10
 8004558:	68e3      	ldr	r3, [r4, #12]
 800455a:	782a      	ldrb	r2, [r5, #0]
 800455c:	1c6e      	adds	r6, r5, #1
 800455e:	3a30      	subs	r2, #48	; 0x30
 8004560:	2a09      	cmp	r2, #9
 8004562:	d94e      	bls.n	8004602 <_svfiprintf_r+0x17a>
 8004564:	2900      	cmp	r1, #0
 8004566:	d111      	bne.n	800458c <_svfiprintf_r+0x104>
 8004568:	e017      	b.n	800459a <_svfiprintf_r+0x112>
 800456a:	3501      	adds	r5, #1
 800456c:	e7b0      	b.n	80044d0 <_svfiprintf_r+0x48>
 800456e:	4b41      	ldr	r3, [pc, #260]	; (8004674 <_svfiprintf_r+0x1ec>)
 8004570:	6822      	ldr	r2, [r4, #0]
 8004572:	1ac0      	subs	r0, r0, r3
 8004574:	2301      	movs	r3, #1
 8004576:	4083      	lsls	r3, r0
 8004578:	4313      	orrs	r3, r2
 800457a:	002e      	movs	r6, r5
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	e7ce      	b.n	800451e <_svfiprintf_r+0x96>
 8004580:	9b07      	ldr	r3, [sp, #28]
 8004582:	1d19      	adds	r1, r3, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	9107      	str	r1, [sp, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	db01      	blt.n	8004590 <_svfiprintf_r+0x108>
 800458c:	930b      	str	r3, [sp, #44]	; 0x2c
 800458e:	e004      	b.n	800459a <_svfiprintf_r+0x112>
 8004590:	425b      	negs	r3, r3
 8004592:	60e3      	str	r3, [r4, #12]
 8004594:	2302      	movs	r3, #2
 8004596:	4313      	orrs	r3, r2
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	782b      	ldrb	r3, [r5, #0]
 800459c:	2b2e      	cmp	r3, #46	; 0x2e
 800459e:	d10a      	bne.n	80045b6 <_svfiprintf_r+0x12e>
 80045a0:	786b      	ldrb	r3, [r5, #1]
 80045a2:	2b2a      	cmp	r3, #42	; 0x2a
 80045a4:	d135      	bne.n	8004612 <_svfiprintf_r+0x18a>
 80045a6:	9b07      	ldr	r3, [sp, #28]
 80045a8:	3502      	adds	r5, #2
 80045aa:	1d1a      	adds	r2, r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	9207      	str	r2, [sp, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db2b      	blt.n	800460c <_svfiprintf_r+0x184>
 80045b4:	9309      	str	r3, [sp, #36]	; 0x24
 80045b6:	4e30      	ldr	r6, [pc, #192]	; (8004678 <_svfiprintf_r+0x1f0>)
 80045b8:	2203      	movs	r2, #3
 80045ba:	0030      	movs	r0, r6
 80045bc:	7829      	ldrb	r1, [r5, #0]
 80045be:	f000 fc03 	bl	8004dc8 <memchr>
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d006      	beq.n	80045d4 <_svfiprintf_r+0x14c>
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	1b80      	subs	r0, r0, r6
 80045ca:	4083      	lsls	r3, r0
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	3501      	adds	r5, #1
 80045d0:	4313      	orrs	r3, r2
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	7829      	ldrb	r1, [r5, #0]
 80045d6:	2206      	movs	r2, #6
 80045d8:	4828      	ldr	r0, [pc, #160]	; (800467c <_svfiprintf_r+0x1f4>)
 80045da:	1c6e      	adds	r6, r5, #1
 80045dc:	7621      	strb	r1, [r4, #24]
 80045de:	f000 fbf3 	bl	8004dc8 <memchr>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d03c      	beq.n	8004660 <_svfiprintf_r+0x1d8>
 80045e6:	4b26      	ldr	r3, [pc, #152]	; (8004680 <_svfiprintf_r+0x1f8>)
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d125      	bne.n	8004638 <_svfiprintf_r+0x1b0>
 80045ec:	2207      	movs	r2, #7
 80045ee:	9b07      	ldr	r3, [sp, #28]
 80045f0:	3307      	adds	r3, #7
 80045f2:	4393      	bics	r3, r2
 80045f4:	3308      	adds	r3, #8
 80045f6:	9307      	str	r3, [sp, #28]
 80045f8:	6963      	ldr	r3, [r4, #20]
 80045fa:	9a04      	ldr	r2, [sp, #16]
 80045fc:	189b      	adds	r3, r3, r2
 80045fe:	6163      	str	r3, [r4, #20]
 8004600:	e765      	b.n	80044ce <_svfiprintf_r+0x46>
 8004602:	4343      	muls	r3, r0
 8004604:	0035      	movs	r5, r6
 8004606:	2101      	movs	r1, #1
 8004608:	189b      	adds	r3, r3, r2
 800460a:	e7a6      	b.n	800455a <_svfiprintf_r+0xd2>
 800460c:	2301      	movs	r3, #1
 800460e:	425b      	negs	r3, r3
 8004610:	e7d0      	b.n	80045b4 <_svfiprintf_r+0x12c>
 8004612:	2300      	movs	r3, #0
 8004614:	200a      	movs	r0, #10
 8004616:	001a      	movs	r2, r3
 8004618:	3501      	adds	r5, #1
 800461a:	6063      	str	r3, [r4, #4]
 800461c:	7829      	ldrb	r1, [r5, #0]
 800461e:	1c6e      	adds	r6, r5, #1
 8004620:	3930      	subs	r1, #48	; 0x30
 8004622:	2909      	cmp	r1, #9
 8004624:	d903      	bls.n	800462e <_svfiprintf_r+0x1a6>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0c5      	beq.n	80045b6 <_svfiprintf_r+0x12e>
 800462a:	9209      	str	r2, [sp, #36]	; 0x24
 800462c:	e7c3      	b.n	80045b6 <_svfiprintf_r+0x12e>
 800462e:	4342      	muls	r2, r0
 8004630:	0035      	movs	r5, r6
 8004632:	2301      	movs	r3, #1
 8004634:	1852      	adds	r2, r2, r1
 8004636:	e7f1      	b.n	800461c <_svfiprintf_r+0x194>
 8004638:	ab07      	add	r3, sp, #28
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	003a      	movs	r2, r7
 800463e:	0021      	movs	r1, r4
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <_svfiprintf_r+0x1fc>)
 8004642:	9803      	ldr	r0, [sp, #12]
 8004644:	e000      	b.n	8004648 <_svfiprintf_r+0x1c0>
 8004646:	bf00      	nop
 8004648:	9004      	str	r0, [sp, #16]
 800464a:	9b04      	ldr	r3, [sp, #16]
 800464c:	3301      	adds	r3, #1
 800464e:	d1d3      	bne.n	80045f8 <_svfiprintf_r+0x170>
 8004650:	89bb      	ldrh	r3, [r7, #12]
 8004652:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004654:	065b      	lsls	r3, r3, #25
 8004656:	d400      	bmi.n	800465a <_svfiprintf_r+0x1d2>
 8004658:	e72d      	b.n	80044b6 <_svfiprintf_r+0x2e>
 800465a:	2001      	movs	r0, #1
 800465c:	4240      	negs	r0, r0
 800465e:	e72a      	b.n	80044b6 <_svfiprintf_r+0x2e>
 8004660:	ab07      	add	r3, sp, #28
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	003a      	movs	r2, r7
 8004666:	0021      	movs	r1, r4
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <_svfiprintf_r+0x1fc>)
 800466a:	9803      	ldr	r0, [sp, #12]
 800466c:	f000 f9de 	bl	8004a2c <_printf_i>
 8004670:	e7ea      	b.n	8004648 <_svfiprintf_r+0x1c0>
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	080050a0 	.word	0x080050a0
 8004678:	080050a6 	.word	0x080050a6
 800467c:	080050aa 	.word	0x080050aa
 8004680:	00000000 	.word	0x00000000
 8004684:	080043c5 	.word	0x080043c5

08004688 <__sfputc_r>:
 8004688:	6893      	ldr	r3, [r2, #8]
 800468a:	b510      	push	{r4, lr}
 800468c:	3b01      	subs	r3, #1
 800468e:	6093      	str	r3, [r2, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	da04      	bge.n	800469e <__sfputc_r+0x16>
 8004694:	6994      	ldr	r4, [r2, #24]
 8004696:	42a3      	cmp	r3, r4
 8004698:	db07      	blt.n	80046aa <__sfputc_r+0x22>
 800469a:	290a      	cmp	r1, #10
 800469c:	d005      	beq.n	80046aa <__sfputc_r+0x22>
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	1c58      	adds	r0, r3, #1
 80046a2:	6010      	str	r0, [r2, #0]
 80046a4:	7019      	strb	r1, [r3, #0]
 80046a6:	0008      	movs	r0, r1
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	f7ff facd 	bl	8003c48 <__swbuf_r>
 80046ae:	0001      	movs	r1, r0
 80046b0:	e7f9      	b.n	80046a6 <__sfputc_r+0x1e>

080046b2 <__sfputs_r>:
 80046b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b4:	0006      	movs	r6, r0
 80046b6:	000f      	movs	r7, r1
 80046b8:	0014      	movs	r4, r2
 80046ba:	18d5      	adds	r5, r2, r3
 80046bc:	42ac      	cmp	r4, r5
 80046be:	d101      	bne.n	80046c4 <__sfputs_r+0x12>
 80046c0:	2000      	movs	r0, #0
 80046c2:	e007      	b.n	80046d4 <__sfputs_r+0x22>
 80046c4:	7821      	ldrb	r1, [r4, #0]
 80046c6:	003a      	movs	r2, r7
 80046c8:	0030      	movs	r0, r6
 80046ca:	f7ff ffdd 	bl	8004688 <__sfputc_r>
 80046ce:	3401      	adds	r4, #1
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d1f3      	bne.n	80046bc <__sfputs_r+0xa>
 80046d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046d8 <_vfiprintf_r>:
 80046d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046da:	b0a1      	sub	sp, #132	; 0x84
 80046dc:	0006      	movs	r6, r0
 80046de:	000c      	movs	r4, r1
 80046e0:	001f      	movs	r7, r3
 80046e2:	9203      	str	r2, [sp, #12]
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d004      	beq.n	80046f2 <_vfiprintf_r+0x1a>
 80046e8:	6983      	ldr	r3, [r0, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <_vfiprintf_r+0x1a>
 80046ee:	f7ff fca7 	bl	8004040 <__sinit>
 80046f2:	4b8e      	ldr	r3, [pc, #568]	; (800492c <_vfiprintf_r+0x254>)
 80046f4:	429c      	cmp	r4, r3
 80046f6:	d11c      	bne.n	8004732 <_vfiprintf_r+0x5a>
 80046f8:	6874      	ldr	r4, [r6, #4]
 80046fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046fc:	07db      	lsls	r3, r3, #31
 80046fe:	d405      	bmi.n	800470c <_vfiprintf_r+0x34>
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	059b      	lsls	r3, r3, #22
 8004704:	d402      	bmi.n	800470c <_vfiprintf_r+0x34>
 8004706:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004708:	f7ff fd3b 	bl	8004182 <__retarget_lock_acquire_recursive>
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	071b      	lsls	r3, r3, #28
 8004710:	d502      	bpl.n	8004718 <_vfiprintf_r+0x40>
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11d      	bne.n	8004754 <_vfiprintf_r+0x7c>
 8004718:	0021      	movs	r1, r4
 800471a:	0030      	movs	r0, r6
 800471c:	f7ff faea 	bl	8003cf4 <__swsetup_r>
 8004720:	2800      	cmp	r0, #0
 8004722:	d017      	beq.n	8004754 <_vfiprintf_r+0x7c>
 8004724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004726:	07db      	lsls	r3, r3, #31
 8004728:	d50d      	bpl.n	8004746 <_vfiprintf_r+0x6e>
 800472a:	2001      	movs	r0, #1
 800472c:	4240      	negs	r0, r0
 800472e:	b021      	add	sp, #132	; 0x84
 8004730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004732:	4b7f      	ldr	r3, [pc, #508]	; (8004930 <_vfiprintf_r+0x258>)
 8004734:	429c      	cmp	r4, r3
 8004736:	d101      	bne.n	800473c <_vfiprintf_r+0x64>
 8004738:	68b4      	ldr	r4, [r6, #8]
 800473a:	e7de      	b.n	80046fa <_vfiprintf_r+0x22>
 800473c:	4b7d      	ldr	r3, [pc, #500]	; (8004934 <_vfiprintf_r+0x25c>)
 800473e:	429c      	cmp	r4, r3
 8004740:	d1db      	bne.n	80046fa <_vfiprintf_r+0x22>
 8004742:	68f4      	ldr	r4, [r6, #12]
 8004744:	e7d9      	b.n	80046fa <_vfiprintf_r+0x22>
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	059b      	lsls	r3, r3, #22
 800474a:	d4ee      	bmi.n	800472a <_vfiprintf_r+0x52>
 800474c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800474e:	f7ff fd19 	bl	8004184 <__retarget_lock_release_recursive>
 8004752:	e7ea      	b.n	800472a <_vfiprintf_r+0x52>
 8004754:	2300      	movs	r3, #0
 8004756:	ad08      	add	r5, sp, #32
 8004758:	616b      	str	r3, [r5, #20]
 800475a:	3320      	adds	r3, #32
 800475c:	766b      	strb	r3, [r5, #25]
 800475e:	3310      	adds	r3, #16
 8004760:	76ab      	strb	r3, [r5, #26]
 8004762:	9707      	str	r7, [sp, #28]
 8004764:	9f03      	ldr	r7, [sp, #12]
 8004766:	783b      	ldrb	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <_vfiprintf_r+0x98>
 800476c:	2b25      	cmp	r3, #37	; 0x25
 800476e:	d14e      	bne.n	800480e <_vfiprintf_r+0x136>
 8004770:	9b03      	ldr	r3, [sp, #12]
 8004772:	1afb      	subs	r3, r7, r3
 8004774:	9305      	str	r3, [sp, #20]
 8004776:	9b03      	ldr	r3, [sp, #12]
 8004778:	429f      	cmp	r7, r3
 800477a:	d00d      	beq.n	8004798 <_vfiprintf_r+0xc0>
 800477c:	9b05      	ldr	r3, [sp, #20]
 800477e:	0021      	movs	r1, r4
 8004780:	0030      	movs	r0, r6
 8004782:	9a03      	ldr	r2, [sp, #12]
 8004784:	f7ff ff95 	bl	80046b2 <__sfputs_r>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d100      	bne.n	800478e <_vfiprintf_r+0xb6>
 800478c:	e0b5      	b.n	80048fa <_vfiprintf_r+0x222>
 800478e:	696a      	ldr	r2, [r5, #20]
 8004790:	9b05      	ldr	r3, [sp, #20]
 8004792:	4694      	mov	ip, r2
 8004794:	4463      	add	r3, ip
 8004796:	616b      	str	r3, [r5, #20]
 8004798:	783b      	ldrb	r3, [r7, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d100      	bne.n	80047a0 <_vfiprintf_r+0xc8>
 800479e:	e0ac      	b.n	80048fa <_vfiprintf_r+0x222>
 80047a0:	2201      	movs	r2, #1
 80047a2:	1c7b      	adds	r3, r7, #1
 80047a4:	9303      	str	r3, [sp, #12]
 80047a6:	2300      	movs	r3, #0
 80047a8:	4252      	negs	r2, r2
 80047aa:	606a      	str	r2, [r5, #4]
 80047ac:	a904      	add	r1, sp, #16
 80047ae:	3254      	adds	r2, #84	; 0x54
 80047b0:	1852      	adds	r2, r2, r1
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	60eb      	str	r3, [r5, #12]
 80047b6:	60ab      	str	r3, [r5, #8]
 80047b8:	7013      	strb	r3, [r2, #0]
 80047ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80047bc:	9b03      	ldr	r3, [sp, #12]
 80047be:	2205      	movs	r2, #5
 80047c0:	7819      	ldrb	r1, [r3, #0]
 80047c2:	485d      	ldr	r0, [pc, #372]	; (8004938 <_vfiprintf_r+0x260>)
 80047c4:	f000 fb00 	bl	8004dc8 <memchr>
 80047c8:	9b03      	ldr	r3, [sp, #12]
 80047ca:	1c5f      	adds	r7, r3, #1
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d120      	bne.n	8004812 <_vfiprintf_r+0x13a>
 80047d0:	682a      	ldr	r2, [r5, #0]
 80047d2:	06d3      	lsls	r3, r2, #27
 80047d4:	d504      	bpl.n	80047e0 <_vfiprintf_r+0x108>
 80047d6:	2353      	movs	r3, #83	; 0x53
 80047d8:	a904      	add	r1, sp, #16
 80047da:	185b      	adds	r3, r3, r1
 80047dc:	2120      	movs	r1, #32
 80047de:	7019      	strb	r1, [r3, #0]
 80047e0:	0713      	lsls	r3, r2, #28
 80047e2:	d504      	bpl.n	80047ee <_vfiprintf_r+0x116>
 80047e4:	2353      	movs	r3, #83	; 0x53
 80047e6:	a904      	add	r1, sp, #16
 80047e8:	185b      	adds	r3, r3, r1
 80047ea:	212b      	movs	r1, #43	; 0x2b
 80047ec:	7019      	strb	r1, [r3, #0]
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b2a      	cmp	r3, #42	; 0x2a
 80047f4:	d016      	beq.n	8004824 <_vfiprintf_r+0x14c>
 80047f6:	2100      	movs	r1, #0
 80047f8:	68eb      	ldr	r3, [r5, #12]
 80047fa:	9f03      	ldr	r7, [sp, #12]
 80047fc:	783a      	ldrb	r2, [r7, #0]
 80047fe:	1c78      	adds	r0, r7, #1
 8004800:	3a30      	subs	r2, #48	; 0x30
 8004802:	4684      	mov	ip, r0
 8004804:	2a09      	cmp	r2, #9
 8004806:	d94f      	bls.n	80048a8 <_vfiprintf_r+0x1d0>
 8004808:	2900      	cmp	r1, #0
 800480a:	d111      	bne.n	8004830 <_vfiprintf_r+0x158>
 800480c:	e017      	b.n	800483e <_vfiprintf_r+0x166>
 800480e:	3701      	adds	r7, #1
 8004810:	e7a9      	b.n	8004766 <_vfiprintf_r+0x8e>
 8004812:	4b49      	ldr	r3, [pc, #292]	; (8004938 <_vfiprintf_r+0x260>)
 8004814:	682a      	ldr	r2, [r5, #0]
 8004816:	1ac0      	subs	r0, r0, r3
 8004818:	2301      	movs	r3, #1
 800481a:	4083      	lsls	r3, r0
 800481c:	4313      	orrs	r3, r2
 800481e:	602b      	str	r3, [r5, #0]
 8004820:	9703      	str	r7, [sp, #12]
 8004822:	e7cb      	b.n	80047bc <_vfiprintf_r+0xe4>
 8004824:	9b07      	ldr	r3, [sp, #28]
 8004826:	1d19      	adds	r1, r3, #4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	9107      	str	r1, [sp, #28]
 800482c:	2b00      	cmp	r3, #0
 800482e:	db01      	blt.n	8004834 <_vfiprintf_r+0x15c>
 8004830:	930b      	str	r3, [sp, #44]	; 0x2c
 8004832:	e004      	b.n	800483e <_vfiprintf_r+0x166>
 8004834:	425b      	negs	r3, r3
 8004836:	60eb      	str	r3, [r5, #12]
 8004838:	2302      	movs	r3, #2
 800483a:	4313      	orrs	r3, r2
 800483c:	602b      	str	r3, [r5, #0]
 800483e:	783b      	ldrb	r3, [r7, #0]
 8004840:	2b2e      	cmp	r3, #46	; 0x2e
 8004842:	d10a      	bne.n	800485a <_vfiprintf_r+0x182>
 8004844:	787b      	ldrb	r3, [r7, #1]
 8004846:	2b2a      	cmp	r3, #42	; 0x2a
 8004848:	d137      	bne.n	80048ba <_vfiprintf_r+0x1e2>
 800484a:	9b07      	ldr	r3, [sp, #28]
 800484c:	3702      	adds	r7, #2
 800484e:	1d1a      	adds	r2, r3, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	9207      	str	r2, [sp, #28]
 8004854:	2b00      	cmp	r3, #0
 8004856:	db2d      	blt.n	80048b4 <_vfiprintf_r+0x1dc>
 8004858:	9309      	str	r3, [sp, #36]	; 0x24
 800485a:	2203      	movs	r2, #3
 800485c:	7839      	ldrb	r1, [r7, #0]
 800485e:	4837      	ldr	r0, [pc, #220]	; (800493c <_vfiprintf_r+0x264>)
 8004860:	f000 fab2 	bl	8004dc8 <memchr>
 8004864:	2800      	cmp	r0, #0
 8004866:	d007      	beq.n	8004878 <_vfiprintf_r+0x1a0>
 8004868:	4b34      	ldr	r3, [pc, #208]	; (800493c <_vfiprintf_r+0x264>)
 800486a:	682a      	ldr	r2, [r5, #0]
 800486c:	1ac0      	subs	r0, r0, r3
 800486e:	2340      	movs	r3, #64	; 0x40
 8004870:	4083      	lsls	r3, r0
 8004872:	4313      	orrs	r3, r2
 8004874:	3701      	adds	r7, #1
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	7839      	ldrb	r1, [r7, #0]
 800487a:	1c7b      	adds	r3, r7, #1
 800487c:	2206      	movs	r2, #6
 800487e:	4830      	ldr	r0, [pc, #192]	; (8004940 <_vfiprintf_r+0x268>)
 8004880:	9303      	str	r3, [sp, #12]
 8004882:	7629      	strb	r1, [r5, #24]
 8004884:	f000 faa0 	bl	8004dc8 <memchr>
 8004888:	2800      	cmp	r0, #0
 800488a:	d045      	beq.n	8004918 <_vfiprintf_r+0x240>
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <_vfiprintf_r+0x26c>)
 800488e:	2b00      	cmp	r3, #0
 8004890:	d127      	bne.n	80048e2 <_vfiprintf_r+0x20a>
 8004892:	2207      	movs	r2, #7
 8004894:	9b07      	ldr	r3, [sp, #28]
 8004896:	3307      	adds	r3, #7
 8004898:	4393      	bics	r3, r2
 800489a:	3308      	adds	r3, #8
 800489c:	9307      	str	r3, [sp, #28]
 800489e:	696b      	ldr	r3, [r5, #20]
 80048a0:	9a04      	ldr	r2, [sp, #16]
 80048a2:	189b      	adds	r3, r3, r2
 80048a4:	616b      	str	r3, [r5, #20]
 80048a6:	e75d      	b.n	8004764 <_vfiprintf_r+0x8c>
 80048a8:	210a      	movs	r1, #10
 80048aa:	434b      	muls	r3, r1
 80048ac:	4667      	mov	r7, ip
 80048ae:	189b      	adds	r3, r3, r2
 80048b0:	3909      	subs	r1, #9
 80048b2:	e7a3      	b.n	80047fc <_vfiprintf_r+0x124>
 80048b4:	2301      	movs	r3, #1
 80048b6:	425b      	negs	r3, r3
 80048b8:	e7ce      	b.n	8004858 <_vfiprintf_r+0x180>
 80048ba:	2300      	movs	r3, #0
 80048bc:	001a      	movs	r2, r3
 80048be:	3701      	adds	r7, #1
 80048c0:	606b      	str	r3, [r5, #4]
 80048c2:	7839      	ldrb	r1, [r7, #0]
 80048c4:	1c78      	adds	r0, r7, #1
 80048c6:	3930      	subs	r1, #48	; 0x30
 80048c8:	4684      	mov	ip, r0
 80048ca:	2909      	cmp	r1, #9
 80048cc:	d903      	bls.n	80048d6 <_vfiprintf_r+0x1fe>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0c3      	beq.n	800485a <_vfiprintf_r+0x182>
 80048d2:	9209      	str	r2, [sp, #36]	; 0x24
 80048d4:	e7c1      	b.n	800485a <_vfiprintf_r+0x182>
 80048d6:	230a      	movs	r3, #10
 80048d8:	435a      	muls	r2, r3
 80048da:	4667      	mov	r7, ip
 80048dc:	1852      	adds	r2, r2, r1
 80048de:	3b09      	subs	r3, #9
 80048e0:	e7ef      	b.n	80048c2 <_vfiprintf_r+0x1ea>
 80048e2:	ab07      	add	r3, sp, #28
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	0022      	movs	r2, r4
 80048e8:	0029      	movs	r1, r5
 80048ea:	0030      	movs	r0, r6
 80048ec:	4b16      	ldr	r3, [pc, #88]	; (8004948 <_vfiprintf_r+0x270>)
 80048ee:	e000      	b.n	80048f2 <_vfiprintf_r+0x21a>
 80048f0:	bf00      	nop
 80048f2:	9004      	str	r0, [sp, #16]
 80048f4:	9b04      	ldr	r3, [sp, #16]
 80048f6:	3301      	adds	r3, #1
 80048f8:	d1d1      	bne.n	800489e <_vfiprintf_r+0x1c6>
 80048fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048fc:	07db      	lsls	r3, r3, #31
 80048fe:	d405      	bmi.n	800490c <_vfiprintf_r+0x234>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	059b      	lsls	r3, r3, #22
 8004904:	d402      	bmi.n	800490c <_vfiprintf_r+0x234>
 8004906:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004908:	f7ff fc3c 	bl	8004184 <__retarget_lock_release_recursive>
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	065b      	lsls	r3, r3, #25
 8004910:	d500      	bpl.n	8004914 <_vfiprintf_r+0x23c>
 8004912:	e70a      	b.n	800472a <_vfiprintf_r+0x52>
 8004914:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004916:	e70a      	b.n	800472e <_vfiprintf_r+0x56>
 8004918:	ab07      	add	r3, sp, #28
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	0022      	movs	r2, r4
 800491e:	0029      	movs	r1, r5
 8004920:	0030      	movs	r0, r6
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <_vfiprintf_r+0x270>)
 8004924:	f000 f882 	bl	8004a2c <_printf_i>
 8004928:	e7e3      	b.n	80048f2 <_vfiprintf_r+0x21a>
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	08005060 	.word	0x08005060
 8004930:	08005080 	.word	0x08005080
 8004934:	08005040 	.word	0x08005040
 8004938:	080050a0 	.word	0x080050a0
 800493c:	080050a6 	.word	0x080050a6
 8004940:	080050aa 	.word	0x080050aa
 8004944:	00000000 	.word	0x00000000
 8004948:	080046b3 	.word	0x080046b3

0800494c <_printf_common>:
 800494c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800494e:	0015      	movs	r5, r2
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	688a      	ldr	r2, [r1, #8]
 8004954:	690b      	ldr	r3, [r1, #16]
 8004956:	000c      	movs	r4, r1
 8004958:	9000      	str	r0, [sp, #0]
 800495a:	4293      	cmp	r3, r2
 800495c:	da00      	bge.n	8004960 <_printf_common+0x14>
 800495e:	0013      	movs	r3, r2
 8004960:	0022      	movs	r2, r4
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	3243      	adds	r2, #67	; 0x43
 8004966:	7812      	ldrb	r2, [r2, #0]
 8004968:	2a00      	cmp	r2, #0
 800496a:	d001      	beq.n	8004970 <_printf_common+0x24>
 800496c:	3301      	adds	r3, #1
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	069b      	lsls	r3, r3, #26
 8004974:	d502      	bpl.n	800497c <_printf_common+0x30>
 8004976:	682b      	ldr	r3, [r5, #0]
 8004978:	3302      	adds	r3, #2
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	6822      	ldr	r2, [r4, #0]
 800497e:	2306      	movs	r3, #6
 8004980:	0017      	movs	r7, r2
 8004982:	401f      	ands	r7, r3
 8004984:	421a      	tst	r2, r3
 8004986:	d027      	beq.n	80049d8 <_printf_common+0x8c>
 8004988:	0023      	movs	r3, r4
 800498a:	3343      	adds	r3, #67	; 0x43
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	1e5a      	subs	r2, r3, #1
 8004990:	4193      	sbcs	r3, r2
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	0692      	lsls	r2, r2, #26
 8004996:	d430      	bmi.n	80049fa <_printf_common+0xae>
 8004998:	0022      	movs	r2, r4
 800499a:	9901      	ldr	r1, [sp, #4]
 800499c:	9800      	ldr	r0, [sp, #0]
 800499e:	9e08      	ldr	r6, [sp, #32]
 80049a0:	3243      	adds	r2, #67	; 0x43
 80049a2:	47b0      	blx	r6
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d025      	beq.n	80049f4 <_printf_common+0xa8>
 80049a8:	2306      	movs	r3, #6
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	682a      	ldr	r2, [r5, #0]
 80049ae:	68e1      	ldr	r1, [r4, #12]
 80049b0:	2500      	movs	r5, #0
 80049b2:	4003      	ands	r3, r0
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d103      	bne.n	80049c0 <_printf_common+0x74>
 80049b8:	1a8d      	subs	r5, r1, r2
 80049ba:	43eb      	mvns	r3, r5
 80049bc:	17db      	asrs	r3, r3, #31
 80049be:	401d      	ands	r5, r3
 80049c0:	68a3      	ldr	r3, [r4, #8]
 80049c2:	6922      	ldr	r2, [r4, #16]
 80049c4:	4293      	cmp	r3, r2
 80049c6:	dd01      	ble.n	80049cc <_printf_common+0x80>
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	18ed      	adds	r5, r5, r3
 80049cc:	2700      	movs	r7, #0
 80049ce:	42bd      	cmp	r5, r7
 80049d0:	d120      	bne.n	8004a14 <_printf_common+0xc8>
 80049d2:	2000      	movs	r0, #0
 80049d4:	e010      	b.n	80049f8 <_printf_common+0xac>
 80049d6:	3701      	adds	r7, #1
 80049d8:	68e3      	ldr	r3, [r4, #12]
 80049da:	682a      	ldr	r2, [r5, #0]
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	42bb      	cmp	r3, r7
 80049e0:	ddd2      	ble.n	8004988 <_printf_common+0x3c>
 80049e2:	0022      	movs	r2, r4
 80049e4:	2301      	movs	r3, #1
 80049e6:	9901      	ldr	r1, [sp, #4]
 80049e8:	9800      	ldr	r0, [sp, #0]
 80049ea:	9e08      	ldr	r6, [sp, #32]
 80049ec:	3219      	adds	r2, #25
 80049ee:	47b0      	blx	r6
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d1f0      	bne.n	80049d6 <_printf_common+0x8a>
 80049f4:	2001      	movs	r0, #1
 80049f6:	4240      	negs	r0, r0
 80049f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049fa:	2030      	movs	r0, #48	; 0x30
 80049fc:	18e1      	adds	r1, r4, r3
 80049fe:	3143      	adds	r1, #67	; 0x43
 8004a00:	7008      	strb	r0, [r1, #0]
 8004a02:	0021      	movs	r1, r4
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	3145      	adds	r1, #69	; 0x45
 8004a08:	7809      	ldrb	r1, [r1, #0]
 8004a0a:	18a2      	adds	r2, r4, r2
 8004a0c:	3243      	adds	r2, #67	; 0x43
 8004a0e:	3302      	adds	r3, #2
 8004a10:	7011      	strb	r1, [r2, #0]
 8004a12:	e7c1      	b.n	8004998 <_printf_common+0x4c>
 8004a14:	0022      	movs	r2, r4
 8004a16:	2301      	movs	r3, #1
 8004a18:	9901      	ldr	r1, [sp, #4]
 8004a1a:	9800      	ldr	r0, [sp, #0]
 8004a1c:	9e08      	ldr	r6, [sp, #32]
 8004a1e:	321a      	adds	r2, #26
 8004a20:	47b0      	blx	r6
 8004a22:	1c43      	adds	r3, r0, #1
 8004a24:	d0e6      	beq.n	80049f4 <_printf_common+0xa8>
 8004a26:	3701      	adds	r7, #1
 8004a28:	e7d1      	b.n	80049ce <_printf_common+0x82>
	...

08004a2c <_printf_i>:
 8004a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a2e:	b08b      	sub	sp, #44	; 0x2c
 8004a30:	9206      	str	r2, [sp, #24]
 8004a32:	000a      	movs	r2, r1
 8004a34:	3243      	adds	r2, #67	; 0x43
 8004a36:	9307      	str	r3, [sp, #28]
 8004a38:	9005      	str	r0, [sp, #20]
 8004a3a:	9204      	str	r2, [sp, #16]
 8004a3c:	7e0a      	ldrb	r2, [r1, #24]
 8004a3e:	000c      	movs	r4, r1
 8004a40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a42:	2a78      	cmp	r2, #120	; 0x78
 8004a44:	d806      	bhi.n	8004a54 <_printf_i+0x28>
 8004a46:	2a62      	cmp	r2, #98	; 0x62
 8004a48:	d808      	bhi.n	8004a5c <_printf_i+0x30>
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	d100      	bne.n	8004a50 <_printf_i+0x24>
 8004a4e:	e0c0      	b.n	8004bd2 <_printf_i+0x1a6>
 8004a50:	2a58      	cmp	r2, #88	; 0x58
 8004a52:	d052      	beq.n	8004afa <_printf_i+0xce>
 8004a54:	0026      	movs	r6, r4
 8004a56:	3642      	adds	r6, #66	; 0x42
 8004a58:	7032      	strb	r2, [r6, #0]
 8004a5a:	e022      	b.n	8004aa2 <_printf_i+0x76>
 8004a5c:	0010      	movs	r0, r2
 8004a5e:	3863      	subs	r0, #99	; 0x63
 8004a60:	2815      	cmp	r0, #21
 8004a62:	d8f7      	bhi.n	8004a54 <_printf_i+0x28>
 8004a64:	f7fb fb50 	bl	8000108 <__gnu_thumb1_case_shi>
 8004a68:	001f0016 	.word	0x001f0016
 8004a6c:	fff6fff6 	.word	0xfff6fff6
 8004a70:	fff6fff6 	.word	0xfff6fff6
 8004a74:	fff6001f 	.word	0xfff6001f
 8004a78:	fff6fff6 	.word	0xfff6fff6
 8004a7c:	00a8fff6 	.word	0x00a8fff6
 8004a80:	009a0036 	.word	0x009a0036
 8004a84:	fff6fff6 	.word	0xfff6fff6
 8004a88:	fff600b9 	.word	0xfff600b9
 8004a8c:	fff60036 	.word	0xfff60036
 8004a90:	009efff6 	.word	0x009efff6
 8004a94:	0026      	movs	r6, r4
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	3642      	adds	r6, #66	; 0x42
 8004a9a:	1d11      	adds	r1, r2, #4
 8004a9c:	6019      	str	r1, [r3, #0]
 8004a9e:	6813      	ldr	r3, [r2, #0]
 8004aa0:	7033      	strb	r3, [r6, #0]
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e0a7      	b.n	8004bf6 <_printf_i+0x1ca>
 8004aa6:	6808      	ldr	r0, [r1, #0]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	1d0a      	adds	r2, r1, #4
 8004aac:	0605      	lsls	r5, r0, #24
 8004aae:	d50b      	bpl.n	8004ac8 <_printf_i+0x9c>
 8004ab0:	680d      	ldr	r5, [r1, #0]
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	2d00      	cmp	r5, #0
 8004ab6:	da03      	bge.n	8004ac0 <_printf_i+0x94>
 8004ab8:	232d      	movs	r3, #45	; 0x2d
 8004aba:	9a04      	ldr	r2, [sp, #16]
 8004abc:	426d      	negs	r5, r5
 8004abe:	7013      	strb	r3, [r2, #0]
 8004ac0:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <_printf_i+0x21c>)
 8004ac2:	270a      	movs	r7, #10
 8004ac4:	9303      	str	r3, [sp, #12]
 8004ac6:	e032      	b.n	8004b2e <_printf_i+0x102>
 8004ac8:	680d      	ldr	r5, [r1, #0]
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	0641      	lsls	r1, r0, #25
 8004ace:	d5f1      	bpl.n	8004ab4 <_printf_i+0x88>
 8004ad0:	b22d      	sxth	r5, r5
 8004ad2:	e7ef      	b.n	8004ab4 <_printf_i+0x88>
 8004ad4:	680d      	ldr	r5, [r1, #0]
 8004ad6:	6819      	ldr	r1, [r3, #0]
 8004ad8:	1d08      	adds	r0, r1, #4
 8004ada:	6018      	str	r0, [r3, #0]
 8004adc:	062e      	lsls	r6, r5, #24
 8004ade:	d501      	bpl.n	8004ae4 <_printf_i+0xb8>
 8004ae0:	680d      	ldr	r5, [r1, #0]
 8004ae2:	e003      	b.n	8004aec <_printf_i+0xc0>
 8004ae4:	066d      	lsls	r5, r5, #25
 8004ae6:	d5fb      	bpl.n	8004ae0 <_printf_i+0xb4>
 8004ae8:	680d      	ldr	r5, [r1, #0]
 8004aea:	b2ad      	uxth	r5, r5
 8004aec:	4b56      	ldr	r3, [pc, #344]	; (8004c48 <_printf_i+0x21c>)
 8004aee:	270a      	movs	r7, #10
 8004af0:	9303      	str	r3, [sp, #12]
 8004af2:	2a6f      	cmp	r2, #111	; 0x6f
 8004af4:	d117      	bne.n	8004b26 <_printf_i+0xfa>
 8004af6:	2708      	movs	r7, #8
 8004af8:	e015      	b.n	8004b26 <_printf_i+0xfa>
 8004afa:	3145      	adds	r1, #69	; 0x45
 8004afc:	700a      	strb	r2, [r1, #0]
 8004afe:	4a52      	ldr	r2, [pc, #328]	; (8004c48 <_printf_i+0x21c>)
 8004b00:	9203      	str	r2, [sp, #12]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	6821      	ldr	r1, [r4, #0]
 8004b06:	ca20      	ldmia	r2!, {r5}
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	0608      	lsls	r0, r1, #24
 8004b0c:	d550      	bpl.n	8004bb0 <_printf_i+0x184>
 8004b0e:	07cb      	lsls	r3, r1, #31
 8004b10:	d502      	bpl.n	8004b18 <_printf_i+0xec>
 8004b12:	2320      	movs	r3, #32
 8004b14:	4319      	orrs	r1, r3
 8004b16:	6021      	str	r1, [r4, #0]
 8004b18:	2710      	movs	r7, #16
 8004b1a:	2d00      	cmp	r5, #0
 8004b1c:	d103      	bne.n	8004b26 <_printf_i+0xfa>
 8004b1e:	2320      	movs	r3, #32
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	439a      	bics	r2, r3
 8004b24:	6022      	str	r2, [r4, #0]
 8004b26:	0023      	movs	r3, r4
 8004b28:	2200      	movs	r2, #0
 8004b2a:	3343      	adds	r3, #67	; 0x43
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	6863      	ldr	r3, [r4, #4]
 8004b30:	60a3      	str	r3, [r4, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	db03      	blt.n	8004b3e <_printf_i+0x112>
 8004b36:	2204      	movs	r2, #4
 8004b38:	6821      	ldr	r1, [r4, #0]
 8004b3a:	4391      	bics	r1, r2
 8004b3c:	6021      	str	r1, [r4, #0]
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	d102      	bne.n	8004b48 <_printf_i+0x11c>
 8004b42:	9e04      	ldr	r6, [sp, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00c      	beq.n	8004b62 <_printf_i+0x136>
 8004b48:	9e04      	ldr	r6, [sp, #16]
 8004b4a:	0028      	movs	r0, r5
 8004b4c:	0039      	movs	r1, r7
 8004b4e:	f7fb fb6b 	bl	8000228 <__aeabi_uidivmod>
 8004b52:	9b03      	ldr	r3, [sp, #12]
 8004b54:	3e01      	subs	r6, #1
 8004b56:	5c5b      	ldrb	r3, [r3, r1]
 8004b58:	7033      	strb	r3, [r6, #0]
 8004b5a:	002b      	movs	r3, r5
 8004b5c:	0005      	movs	r5, r0
 8004b5e:	429f      	cmp	r7, r3
 8004b60:	d9f3      	bls.n	8004b4a <_printf_i+0x11e>
 8004b62:	2f08      	cmp	r7, #8
 8004b64:	d109      	bne.n	8004b7a <_printf_i+0x14e>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	07db      	lsls	r3, r3, #31
 8004b6a:	d506      	bpl.n	8004b7a <_printf_i+0x14e>
 8004b6c:	6863      	ldr	r3, [r4, #4]
 8004b6e:	6922      	ldr	r2, [r4, #16]
 8004b70:	4293      	cmp	r3, r2
 8004b72:	dc02      	bgt.n	8004b7a <_printf_i+0x14e>
 8004b74:	2330      	movs	r3, #48	; 0x30
 8004b76:	3e01      	subs	r6, #1
 8004b78:	7033      	strb	r3, [r6, #0]
 8004b7a:	9b04      	ldr	r3, [sp, #16]
 8004b7c:	1b9b      	subs	r3, r3, r6
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	9b07      	ldr	r3, [sp, #28]
 8004b82:	0021      	movs	r1, r4
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	9805      	ldr	r0, [sp, #20]
 8004b88:	9b06      	ldr	r3, [sp, #24]
 8004b8a:	aa09      	add	r2, sp, #36	; 0x24
 8004b8c:	f7ff fede 	bl	800494c <_printf_common>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d135      	bne.n	8004c00 <_printf_i+0x1d4>
 8004b94:	2001      	movs	r0, #1
 8004b96:	4240      	negs	r0, r0
 8004b98:	b00b      	add	sp, #44	; 0x2c
 8004b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	6809      	ldr	r1, [r1, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	6022      	str	r2, [r4, #0]
 8004ba4:	0022      	movs	r2, r4
 8004ba6:	2178      	movs	r1, #120	; 0x78
 8004ba8:	3245      	adds	r2, #69	; 0x45
 8004baa:	7011      	strb	r1, [r2, #0]
 8004bac:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <_printf_i+0x220>)
 8004bae:	e7a7      	b.n	8004b00 <_printf_i+0xd4>
 8004bb0:	0648      	lsls	r0, r1, #25
 8004bb2:	d5ac      	bpl.n	8004b0e <_printf_i+0xe2>
 8004bb4:	b2ad      	uxth	r5, r5
 8004bb6:	e7aa      	b.n	8004b0e <_printf_i+0xe2>
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	680d      	ldr	r5, [r1, #0]
 8004bbc:	1d10      	adds	r0, r2, #4
 8004bbe:	6949      	ldr	r1, [r1, #20]
 8004bc0:	6018      	str	r0, [r3, #0]
 8004bc2:	6813      	ldr	r3, [r2, #0]
 8004bc4:	062e      	lsls	r6, r5, #24
 8004bc6:	d501      	bpl.n	8004bcc <_printf_i+0x1a0>
 8004bc8:	6019      	str	r1, [r3, #0]
 8004bca:	e002      	b.n	8004bd2 <_printf_i+0x1a6>
 8004bcc:	066d      	lsls	r5, r5, #25
 8004bce:	d5fb      	bpl.n	8004bc8 <_printf_i+0x19c>
 8004bd0:	8019      	strh	r1, [r3, #0]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9e04      	ldr	r6, [sp, #16]
 8004bd6:	6123      	str	r3, [r4, #16]
 8004bd8:	e7d2      	b.n	8004b80 <_printf_i+0x154>
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	1d11      	adds	r1, r2, #4
 8004bde:	6019      	str	r1, [r3, #0]
 8004be0:	6816      	ldr	r6, [r2, #0]
 8004be2:	2100      	movs	r1, #0
 8004be4:	0030      	movs	r0, r6
 8004be6:	6862      	ldr	r2, [r4, #4]
 8004be8:	f000 f8ee 	bl	8004dc8 <memchr>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d001      	beq.n	8004bf4 <_printf_i+0x1c8>
 8004bf0:	1b80      	subs	r0, r0, r6
 8004bf2:	6060      	str	r0, [r4, #4]
 8004bf4:	6863      	ldr	r3, [r4, #4]
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	9a04      	ldr	r2, [sp, #16]
 8004bfc:	7013      	strb	r3, [r2, #0]
 8004bfe:	e7bf      	b.n	8004b80 <_printf_i+0x154>
 8004c00:	6923      	ldr	r3, [r4, #16]
 8004c02:	0032      	movs	r2, r6
 8004c04:	9906      	ldr	r1, [sp, #24]
 8004c06:	9805      	ldr	r0, [sp, #20]
 8004c08:	9d07      	ldr	r5, [sp, #28]
 8004c0a:	47a8      	blx	r5
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d0c1      	beq.n	8004b94 <_printf_i+0x168>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	079b      	lsls	r3, r3, #30
 8004c14:	d415      	bmi.n	8004c42 <_printf_i+0x216>
 8004c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c18:	68e0      	ldr	r0, [r4, #12]
 8004c1a:	4298      	cmp	r0, r3
 8004c1c:	dabc      	bge.n	8004b98 <_printf_i+0x16c>
 8004c1e:	0018      	movs	r0, r3
 8004c20:	e7ba      	b.n	8004b98 <_printf_i+0x16c>
 8004c22:	0022      	movs	r2, r4
 8004c24:	2301      	movs	r3, #1
 8004c26:	9906      	ldr	r1, [sp, #24]
 8004c28:	9805      	ldr	r0, [sp, #20]
 8004c2a:	9e07      	ldr	r6, [sp, #28]
 8004c2c:	3219      	adds	r2, #25
 8004c2e:	47b0      	blx	r6
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d0af      	beq.n	8004b94 <_printf_i+0x168>
 8004c34:	3501      	adds	r5, #1
 8004c36:	68e3      	ldr	r3, [r4, #12]
 8004c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	42ab      	cmp	r3, r5
 8004c3e:	dcf0      	bgt.n	8004c22 <_printf_i+0x1f6>
 8004c40:	e7e9      	b.n	8004c16 <_printf_i+0x1ea>
 8004c42:	2500      	movs	r5, #0
 8004c44:	e7f7      	b.n	8004c36 <_printf_i+0x20a>
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	080050b1 	.word	0x080050b1
 8004c4c:	080050c2 	.word	0x080050c2

08004c50 <_sbrk_r>:
 8004c50:	2300      	movs	r3, #0
 8004c52:	b570      	push	{r4, r5, r6, lr}
 8004c54:	4d06      	ldr	r5, [pc, #24]	; (8004c70 <_sbrk_r+0x20>)
 8004c56:	0004      	movs	r4, r0
 8004c58:	0008      	movs	r0, r1
 8004c5a:	602b      	str	r3, [r5, #0]
 8004c5c:	f7fc f98a 	bl	8000f74 <_sbrk>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d103      	bne.n	8004c6c <_sbrk_r+0x1c>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d000      	beq.n	8004c6c <_sbrk_r+0x1c>
 8004c6a:	6023      	str	r3, [r4, #0]
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	200001e8 	.word	0x200001e8

08004c74 <__sread>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	000c      	movs	r4, r1
 8004c78:	250e      	movs	r5, #14
 8004c7a:	5f49      	ldrsh	r1, [r1, r5]
 8004c7c:	f000 f902 	bl	8004e84 <_read_r>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	db03      	blt.n	8004c8c <__sread+0x18>
 8004c84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c86:	181b      	adds	r3, r3, r0
 8004c88:	6563      	str	r3, [r4, #84]	; 0x54
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	4a02      	ldr	r2, [pc, #8]	; (8004c98 <__sread+0x24>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	81a3      	strh	r3, [r4, #12]
 8004c94:	e7f9      	b.n	8004c8a <__sread+0x16>
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	ffffefff 	.word	0xffffefff

08004c9c <__swrite>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	001f      	movs	r7, r3
 8004ca0:	898b      	ldrh	r3, [r1, #12]
 8004ca2:	0005      	movs	r5, r0
 8004ca4:	000c      	movs	r4, r1
 8004ca6:	0016      	movs	r6, r2
 8004ca8:	05db      	lsls	r3, r3, #23
 8004caa:	d505      	bpl.n	8004cb8 <__swrite+0x1c>
 8004cac:	230e      	movs	r3, #14
 8004cae:	5ec9      	ldrsh	r1, [r1, r3]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	f000 f874 	bl	8004da0 <_lseek_r>
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	4a05      	ldr	r2, [pc, #20]	; (8004cd0 <__swrite+0x34>)
 8004cbc:	0028      	movs	r0, r5
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	0032      	movs	r2, r6
 8004cc4:	230e      	movs	r3, #14
 8004cc6:	5ee1      	ldrsh	r1, [r4, r3]
 8004cc8:	003b      	movs	r3, r7
 8004cca:	f000 f81f 	bl	8004d0c <_write_r>
 8004cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cd0:	ffffefff 	.word	0xffffefff

08004cd4 <__sseek>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	000c      	movs	r4, r1
 8004cd8:	250e      	movs	r5, #14
 8004cda:	5f49      	ldrsh	r1, [r1, r5]
 8004cdc:	f000 f860 	bl	8004da0 <_lseek_r>
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	1c42      	adds	r2, r0, #1
 8004ce4:	d103      	bne.n	8004cee <__sseek+0x1a>
 8004ce6:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <__sseek+0x28>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	81a3      	strh	r3, [r4, #12]
 8004cec:	bd70      	pop	{r4, r5, r6, pc}
 8004cee:	2280      	movs	r2, #128	; 0x80
 8004cf0:	0152      	lsls	r2, r2, #5
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	81a3      	strh	r3, [r4, #12]
 8004cf6:	6560      	str	r0, [r4, #84]	; 0x54
 8004cf8:	e7f8      	b.n	8004cec <__sseek+0x18>
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	ffffefff 	.word	0xffffefff

08004d00 <__sclose>:
 8004d00:	b510      	push	{r4, lr}
 8004d02:	230e      	movs	r3, #14
 8004d04:	5ec9      	ldrsh	r1, [r1, r3]
 8004d06:	f000 f815 	bl	8004d34 <_close_r>
 8004d0a:	bd10      	pop	{r4, pc}

08004d0c <_write_r>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	0004      	movs	r4, r0
 8004d10:	0008      	movs	r0, r1
 8004d12:	0011      	movs	r1, r2
 8004d14:	001a      	movs	r2, r3
 8004d16:	2300      	movs	r3, #0
 8004d18:	4d05      	ldr	r5, [pc, #20]	; (8004d30 <_write_r+0x24>)
 8004d1a:	602b      	str	r3, [r5, #0]
 8004d1c:	f7fb ffcc 	bl	8000cb8 <_write>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d103      	bne.n	8004d2c <_write_r+0x20>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d000      	beq.n	8004d2c <_write_r+0x20>
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	200001e8 	.word	0x200001e8

08004d34 <_close_r>:
 8004d34:	2300      	movs	r3, #0
 8004d36:	b570      	push	{r4, r5, r6, lr}
 8004d38:	4d06      	ldr	r5, [pc, #24]	; (8004d54 <_close_r+0x20>)
 8004d3a:	0004      	movs	r4, r0
 8004d3c:	0008      	movs	r0, r1
 8004d3e:	602b      	str	r3, [r5, #0]
 8004d40:	f7fc f8ec 	bl	8000f1c <_close>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d103      	bne.n	8004d50 <_close_r+0x1c>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d000      	beq.n	8004d50 <_close_r+0x1c>
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	bd70      	pop	{r4, r5, r6, pc}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	200001e8 	.word	0x200001e8

08004d58 <_fstat_r>:
 8004d58:	2300      	movs	r3, #0
 8004d5a:	b570      	push	{r4, r5, r6, lr}
 8004d5c:	4d06      	ldr	r5, [pc, #24]	; (8004d78 <_fstat_r+0x20>)
 8004d5e:	0004      	movs	r4, r0
 8004d60:	0008      	movs	r0, r1
 8004d62:	0011      	movs	r1, r2
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	f7fc f8e3 	bl	8000f30 <_fstat>
 8004d6a:	1c43      	adds	r3, r0, #1
 8004d6c:	d103      	bne.n	8004d76 <_fstat_r+0x1e>
 8004d6e:	682b      	ldr	r3, [r5, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d000      	beq.n	8004d76 <_fstat_r+0x1e>
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	200001e8 	.word	0x200001e8

08004d7c <_isatty_r>:
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	b570      	push	{r4, r5, r6, lr}
 8004d80:	4d06      	ldr	r5, [pc, #24]	; (8004d9c <_isatty_r+0x20>)
 8004d82:	0004      	movs	r4, r0
 8004d84:	0008      	movs	r0, r1
 8004d86:	602b      	str	r3, [r5, #0]
 8004d88:	f7fc f8e0 	bl	8000f4c <_isatty>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d103      	bne.n	8004d98 <_isatty_r+0x1c>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d000      	beq.n	8004d98 <_isatty_r+0x1c>
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	200001e8 	.word	0x200001e8

08004da0 <_lseek_r>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	0004      	movs	r4, r0
 8004da4:	0008      	movs	r0, r1
 8004da6:	0011      	movs	r1, r2
 8004da8:	001a      	movs	r2, r3
 8004daa:	2300      	movs	r3, #0
 8004dac:	4d05      	ldr	r5, [pc, #20]	; (8004dc4 <_lseek_r+0x24>)
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	f7fc f8d5 	bl	8000f5e <_lseek>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d103      	bne.n	8004dc0 <_lseek_r+0x20>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d000      	beq.n	8004dc0 <_lseek_r+0x20>
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	200001e8 	.word	0x200001e8

08004dc8 <memchr>:
 8004dc8:	b2c9      	uxtb	r1, r1
 8004dca:	1882      	adds	r2, r0, r2
 8004dcc:	4290      	cmp	r0, r2
 8004dce:	d101      	bne.n	8004dd4 <memchr+0xc>
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	4770      	bx	lr
 8004dd4:	7803      	ldrb	r3, [r0, #0]
 8004dd6:	428b      	cmp	r3, r1
 8004dd8:	d0fb      	beq.n	8004dd2 <memchr+0xa>
 8004dda:	3001      	adds	r0, #1
 8004ddc:	e7f6      	b.n	8004dcc <memchr+0x4>

08004dde <memcpy>:
 8004dde:	2300      	movs	r3, #0
 8004de0:	b510      	push	{r4, lr}
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d100      	bne.n	8004de8 <memcpy+0xa>
 8004de6:	bd10      	pop	{r4, pc}
 8004de8:	5ccc      	ldrb	r4, [r1, r3]
 8004dea:	54c4      	strb	r4, [r0, r3]
 8004dec:	3301      	adds	r3, #1
 8004dee:	e7f8      	b.n	8004de2 <memcpy+0x4>

08004df0 <memmove>:
 8004df0:	b510      	push	{r4, lr}
 8004df2:	4288      	cmp	r0, r1
 8004df4:	d902      	bls.n	8004dfc <memmove+0xc>
 8004df6:	188b      	adds	r3, r1, r2
 8004df8:	4298      	cmp	r0, r3
 8004dfa:	d303      	bcc.n	8004e04 <memmove+0x14>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e007      	b.n	8004e10 <memmove+0x20>
 8004e00:	5c8b      	ldrb	r3, [r1, r2]
 8004e02:	5483      	strb	r3, [r0, r2]
 8004e04:	3a01      	subs	r2, #1
 8004e06:	d2fb      	bcs.n	8004e00 <memmove+0x10>
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	5ccc      	ldrb	r4, [r1, r3]
 8004e0c:	54c4      	strb	r4, [r0, r3]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d1fa      	bne.n	8004e0a <memmove+0x1a>
 8004e14:	e7f8      	b.n	8004e08 <memmove+0x18>
	...

08004e18 <__malloc_lock>:
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	4802      	ldr	r0, [pc, #8]	; (8004e24 <__malloc_lock+0xc>)
 8004e1c:	f7ff f9b1 	bl	8004182 <__retarget_lock_acquire_recursive>
 8004e20:	bd10      	pop	{r4, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	200001e0 	.word	0x200001e0

08004e28 <__malloc_unlock>:
 8004e28:	b510      	push	{r4, lr}
 8004e2a:	4802      	ldr	r0, [pc, #8]	; (8004e34 <__malloc_unlock+0xc>)
 8004e2c:	f7ff f9aa 	bl	8004184 <__retarget_lock_release_recursive>
 8004e30:	bd10      	pop	{r4, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	200001e0 	.word	0x200001e0

08004e38 <_realloc_r>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	0007      	movs	r7, r0
 8004e3c:	000d      	movs	r5, r1
 8004e3e:	0016      	movs	r6, r2
 8004e40:	2900      	cmp	r1, #0
 8004e42:	d105      	bne.n	8004e50 <_realloc_r+0x18>
 8004e44:	0011      	movs	r1, r2
 8004e46:	f7ff fa5f 	bl	8004308 <_malloc_r>
 8004e4a:	0004      	movs	r4, r0
 8004e4c:	0020      	movs	r0, r4
 8004e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e50:	2a00      	cmp	r2, #0
 8004e52:	d103      	bne.n	8004e5c <_realloc_r+0x24>
 8004e54:	f7ff fa0e 	bl	8004274 <_free_r>
 8004e58:	0034      	movs	r4, r6
 8004e5a:	e7f7      	b.n	8004e4c <_realloc_r+0x14>
 8004e5c:	f000 f826 	bl	8004eac <_malloc_usable_size_r>
 8004e60:	002c      	movs	r4, r5
 8004e62:	42b0      	cmp	r0, r6
 8004e64:	d2f2      	bcs.n	8004e4c <_realloc_r+0x14>
 8004e66:	0031      	movs	r1, r6
 8004e68:	0038      	movs	r0, r7
 8004e6a:	f7ff fa4d 	bl	8004308 <_malloc_r>
 8004e6e:	1e04      	subs	r4, r0, #0
 8004e70:	d0ec      	beq.n	8004e4c <_realloc_r+0x14>
 8004e72:	0029      	movs	r1, r5
 8004e74:	0032      	movs	r2, r6
 8004e76:	f7ff ffb2 	bl	8004dde <memcpy>
 8004e7a:	0029      	movs	r1, r5
 8004e7c:	0038      	movs	r0, r7
 8004e7e:	f7ff f9f9 	bl	8004274 <_free_r>
 8004e82:	e7e3      	b.n	8004e4c <_realloc_r+0x14>

08004e84 <_read_r>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	0004      	movs	r4, r0
 8004e88:	0008      	movs	r0, r1
 8004e8a:	0011      	movs	r1, r2
 8004e8c:	001a      	movs	r2, r3
 8004e8e:	2300      	movs	r3, #0
 8004e90:	4d05      	ldr	r5, [pc, #20]	; (8004ea8 <_read_r+0x24>)
 8004e92:	602b      	str	r3, [r5, #0]
 8004e94:	f7fb ff3e 	bl	8000d14 <_read>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d103      	bne.n	8004ea4 <_read_r+0x20>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d000      	beq.n	8004ea4 <_read_r+0x20>
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	bd70      	pop	{r4, r5, r6, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	200001e8 	.word	0x200001e8

08004eac <_malloc_usable_size_r>:
 8004eac:	1f0b      	subs	r3, r1, #4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	1f18      	subs	r0, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	da01      	bge.n	8004eba <_malloc_usable_size_r+0xe>
 8004eb6:	580b      	ldr	r3, [r1, r0]
 8004eb8:	18c0      	adds	r0, r0, r3
 8004eba:	4770      	bx	lr

08004ebc <_init>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec2:	bc08      	pop	{r3}
 8004ec4:	469e      	mov	lr, r3
 8004ec6:	4770      	bx	lr

08004ec8 <_fini>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ece:	bc08      	pop	{r3}
 8004ed0:	469e      	mov	lr, r3
 8004ed2:	4770      	bx	lr
