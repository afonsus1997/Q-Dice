
Qdice-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080045a4  080045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004774  08004774  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800477c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000078  080047f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080047f4  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1e9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb1  00000000  00000000  0002a289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002c140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  0002c998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001545f  00000000  00000000  0002d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a45f  00000000  00000000  00042587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079b53  00000000  00000000  0004c9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c6539  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002468  00000000  00000000  000c658c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800458c 	.word	0x0800458c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800458c 	.word	0x0800458c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	1c08      	adds	r0, r1, #0
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f82e 	bl	8000498 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	0415      	lsls	r5, r2, #16
 800044c:	0c2d      	lsrs	r5, r5, #16
 800044e:	000f      	movs	r7, r1
 8000450:	0001      	movs	r1, r0
 8000452:	002e      	movs	r6, r5
 8000454:	46c6      	mov	lr, r8
 8000456:	4684      	mov	ip, r0
 8000458:	0400      	lsls	r0, r0, #16
 800045a:	0c14      	lsrs	r4, r2, #16
 800045c:	0c00      	lsrs	r0, r0, #16
 800045e:	0c09      	lsrs	r1, r1, #16
 8000460:	4346      	muls	r6, r0
 8000462:	434d      	muls	r5, r1
 8000464:	4360      	muls	r0, r4
 8000466:	4361      	muls	r1, r4
 8000468:	1940      	adds	r0, r0, r5
 800046a:	0c34      	lsrs	r4, r6, #16
 800046c:	1824      	adds	r4, r4, r0
 800046e:	b500      	push	{lr}
 8000470:	42a5      	cmp	r5, r4
 8000472:	d903      	bls.n	800047c <__aeabi_lmul+0x34>
 8000474:	2080      	movs	r0, #128	; 0x80
 8000476:	0240      	lsls	r0, r0, #9
 8000478:	4680      	mov	r8, r0
 800047a:	4441      	add	r1, r8
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	186d      	adds	r5, r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4359      	muls	r1, r3
 8000484:	437a      	muls	r2, r7
 8000486:	0430      	lsls	r0, r6, #16
 8000488:	1949      	adds	r1, r1, r5
 800048a:	0424      	lsls	r4, r4, #16
 800048c:	0c00      	lsrs	r0, r0, #16
 800048e:	1820      	adds	r0, r4, r0
 8000490:	1889      	adds	r1, r1, r2
 8000492:	bc80      	pop	{r7}
 8000494:	46b8      	mov	r8, r7
 8000496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000498 <__udivmoddi4>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	4645      	mov	r5, r8
 80004a0:	46de      	mov	lr, fp
 80004a2:	b5e0      	push	{r5, r6, r7, lr}
 80004a4:	0004      	movs	r4, r0
 80004a6:	000d      	movs	r5, r1
 80004a8:	4692      	mov	sl, r2
 80004aa:	4699      	mov	r9, r3
 80004ac:	b083      	sub	sp, #12
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d830      	bhi.n	8000514 <__udivmoddi4+0x7c>
 80004b2:	d02d      	beq.n	8000510 <__udivmoddi4+0x78>
 80004b4:	4649      	mov	r1, r9
 80004b6:	4650      	mov	r0, sl
 80004b8:	f000 f8ba 	bl	8000630 <__clzdi2>
 80004bc:	0029      	movs	r1, r5
 80004be:	0006      	movs	r6, r0
 80004c0:	0020      	movs	r0, r4
 80004c2:	f000 f8b5 	bl	8000630 <__clzdi2>
 80004c6:	1a33      	subs	r3, r6, r0
 80004c8:	4698      	mov	r8, r3
 80004ca:	3b20      	subs	r3, #32
 80004cc:	469b      	mov	fp, r3
 80004ce:	d433      	bmi.n	8000538 <__udivmoddi4+0xa0>
 80004d0:	465a      	mov	r2, fp
 80004d2:	4653      	mov	r3, sl
 80004d4:	4093      	lsls	r3, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	001f      	movs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001e      	movs	r6, r3
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d83a      	bhi.n	800055a <__udivmoddi4+0xc2>
 80004e4:	42af      	cmp	r7, r5
 80004e6:	d100      	bne.n	80004ea <__udivmoddi4+0x52>
 80004e8:	e078      	b.n	80005dc <__udivmoddi4+0x144>
 80004ea:	465b      	mov	r3, fp
 80004ec:	1ba4      	subs	r4, r4, r6
 80004ee:	41bd      	sbcs	r5, r7
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da00      	bge.n	80004f6 <__udivmoddi4+0x5e>
 80004f4:	e075      	b.n	80005e2 <__udivmoddi4+0x14a>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2301      	movs	r3, #1
 8000500:	465a      	mov	r2, fp
 8000502:	4093      	lsls	r3, r2
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	4642      	mov	r2, r8
 800050a:	4093      	lsls	r3, r2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	e028      	b.n	8000562 <__udivmoddi4+0xca>
 8000510:	4282      	cmp	r2, r0
 8000512:	d9cf      	bls.n	80004b4 <__udivmoddi4+0x1c>
 8000514:	2200      	movs	r2, #0
 8000516:	2300      	movs	r3, #0
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <__udivmoddi4+0x8e>
 8000522:	601c      	str	r4, [r3, #0]
 8000524:	605d      	str	r5, [r3, #4]
 8000526:	9800      	ldr	r0, [sp, #0]
 8000528:	9901      	ldr	r1, [sp, #4]
 800052a:	b003      	add	sp, #12
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000538:	4642      	mov	r2, r8
 800053a:	2320      	movs	r3, #32
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	4652      	mov	r2, sl
 8000540:	40da      	lsrs	r2, r3
 8000542:	4641      	mov	r1, r8
 8000544:	0013      	movs	r3, r2
 8000546:	464a      	mov	r2, r9
 8000548:	408a      	lsls	r2, r1
 800054a:	0017      	movs	r7, r2
 800054c:	4642      	mov	r2, r8
 800054e:	431f      	orrs	r7, r3
 8000550:	4653      	mov	r3, sl
 8000552:	4093      	lsls	r3, r2
 8000554:	001e      	movs	r6, r3
 8000556:	42af      	cmp	r7, r5
 8000558:	d9c4      	bls.n	80004e4 <__udivmoddi4+0x4c>
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	4643      	mov	r3, r8
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0d9      	beq.n	800051c <__udivmoddi4+0x84>
 8000568:	07fb      	lsls	r3, r7, #31
 800056a:	0872      	lsrs	r2, r6, #1
 800056c:	431a      	orrs	r2, r3
 800056e:	4646      	mov	r6, r8
 8000570:	087b      	lsrs	r3, r7, #1
 8000572:	e00e      	b.n	8000592 <__udivmoddi4+0xfa>
 8000574:	42ab      	cmp	r3, r5
 8000576:	d101      	bne.n	800057c <__udivmoddi4+0xe4>
 8000578:	42a2      	cmp	r2, r4
 800057a:	d80c      	bhi.n	8000596 <__udivmoddi4+0xfe>
 800057c:	1aa4      	subs	r4, r4, r2
 800057e:	419d      	sbcs	r5, r3
 8000580:	2001      	movs	r0, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2100      	movs	r1, #0
 8000588:	3e01      	subs	r6, #1
 800058a:	1824      	adds	r4, r4, r0
 800058c:	414d      	adcs	r5, r1
 800058e:	2e00      	cmp	r6, #0
 8000590:	d006      	beq.n	80005a0 <__udivmoddi4+0x108>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d9ee      	bls.n	8000574 <__udivmoddi4+0xdc>
 8000596:	3e01      	subs	r6, #1
 8000598:	1924      	adds	r4, r4, r4
 800059a:	416d      	adcs	r5, r5
 800059c:	2e00      	cmp	r6, #0
 800059e:	d1f8      	bne.n	8000592 <__udivmoddi4+0xfa>
 80005a0:	9800      	ldr	r0, [sp, #0]
 80005a2:	9901      	ldr	r1, [sp, #4]
 80005a4:	465b      	mov	r3, fp
 80005a6:	1900      	adds	r0, r0, r4
 80005a8:	4169      	adcs	r1, r5
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db24      	blt.n	80005f8 <__udivmoddi4+0x160>
 80005ae:	002b      	movs	r3, r5
 80005b0:	465a      	mov	r2, fp
 80005b2:	4644      	mov	r4, r8
 80005b4:	40d3      	lsrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	db2a      	blt.n	800061a <__udivmoddi4+0x182>
 80005c4:	0026      	movs	r6, r4
 80005c6:	409e      	lsls	r6, r3
 80005c8:	0033      	movs	r3, r6
 80005ca:	0026      	movs	r6, r4
 80005cc:	4647      	mov	r7, r8
 80005ce:	40be      	lsls	r6, r7
 80005d0:	0032      	movs	r2, r6
 80005d2:	1a80      	subs	r0, r0, r2
 80005d4:	4199      	sbcs	r1, r3
 80005d6:	9000      	str	r0, [sp, #0]
 80005d8:	9101      	str	r1, [sp, #4]
 80005da:	e79f      	b.n	800051c <__udivmoddi4+0x84>
 80005dc:	42a3      	cmp	r3, r4
 80005de:	d8bc      	bhi.n	800055a <__udivmoddi4+0xc2>
 80005e0:	e783      	b.n	80004ea <__udivmoddi4+0x52>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	9100      	str	r1, [sp, #0]
 80005ee:	9201      	str	r2, [sp, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	40da      	lsrs	r2, r3
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	e786      	b.n	8000506 <__udivmoddi4+0x6e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	2320      	movs	r3, #32
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	4646      	mov	r6, r8
 8000602:	409a      	lsls	r2, r3
 8000604:	0023      	movs	r3, r4
 8000606:	40f3      	lsrs	r3, r6
 8000608:	4644      	mov	r4, r8
 800060a:	4313      	orrs	r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	40e2      	lsrs	r2, r4
 8000610:	001c      	movs	r4, r3
 8000612:	465b      	mov	r3, fp
 8000614:	0015      	movs	r5, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dad4      	bge.n	80005c4 <__udivmoddi4+0x12c>
 800061a:	4642      	mov	r2, r8
 800061c:	002f      	movs	r7, r5
 800061e:	2320      	movs	r3, #32
 8000620:	0026      	movs	r6, r4
 8000622:	4097      	lsls	r7, r2
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	40de      	lsrs	r6, r3
 8000628:	003b      	movs	r3, r7
 800062a:	4333      	orrs	r3, r6
 800062c:	e7cd      	b.n	80005ca <__udivmoddi4+0x132>
 800062e:	46c0      	nop			; (mov r8, r8)

08000630 <__clzdi2>:
 8000630:	b510      	push	{r4, lr}
 8000632:	2900      	cmp	r1, #0
 8000634:	d103      	bne.n	800063e <__clzdi2+0xe>
 8000636:	f000 f807 	bl	8000648 <__clzsi2>
 800063a:	3020      	adds	r0, #32
 800063c:	e002      	b.n	8000644 <__clzdi2+0x14>
 800063e:	1c08      	adds	r0, r1, #0
 8000640:	f000 f802 	bl	8000648 <__clzsi2>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	46c0      	nop			; (mov r8, r8)

08000648 <__clzsi2>:
 8000648:	211c      	movs	r1, #28
 800064a:	2301      	movs	r3, #1
 800064c:	041b      	lsls	r3, r3, #16
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0xe>
 8000652:	0c00      	lsrs	r0, r0, #16
 8000654:	3910      	subs	r1, #16
 8000656:	0a1b      	lsrs	r3, r3, #8
 8000658:	4298      	cmp	r0, r3
 800065a:	d301      	bcc.n	8000660 <__clzsi2+0x18>
 800065c:	0a00      	lsrs	r0, r0, #8
 800065e:	3908      	subs	r1, #8
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	4298      	cmp	r0, r3
 8000664:	d301      	bcc.n	800066a <__clzsi2+0x22>
 8000666:	0900      	lsrs	r0, r0, #4
 8000668:	3904      	subs	r1, #4
 800066a:	a202      	add	r2, pc, #8	; (adr r2, 8000674 <__clzsi2+0x2c>)
 800066c:	5c10      	ldrb	r0, [r2, r0]
 800066e:	1840      	adds	r0, r0, r1
 8000670:	4770      	bx	lr
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	02020304 	.word	0x02020304
 8000678:	01010101 	.word	0x01010101
	...

08000684 <readSW>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void readSW(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	currentSwStates[Roll] = HAL_GPIO_ReadPin(SW_ROLL_GPIO_Port, SW_ROLL_Pin);
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	015b      	lsls	r3, r3, #5
 800068c:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <readSW+0x64>)
 800068e:	0019      	movs	r1, r3
 8000690:	0010      	movs	r0, r2
 8000692:	f000 ff17 	bl	80014c4 <HAL_GPIO_ReadPin>
 8000696:	0003      	movs	r3, r0
 8000698:	001a      	movs	r2, r3
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <readSW+0x68>)
 800069c:	701a      	strb	r2, [r3, #0]
	currentSwStates[Dice] = HAL_GPIO_ReadPin(SW_DICE_GPIO_Port, SW_DICE_Pin);
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <readSW+0x64>)
 80006a4:	0019      	movs	r1, r3
 80006a6:	0010      	movs	r0, r2
 80006a8:	f000 ff0c 	bl	80014c4 <HAL_GPIO_ReadPin>
 80006ac:	0003      	movs	r3, r0
 80006ae:	001a      	movs	r2, r3
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <readSW+0x68>)
 80006b2:	705a      	strb	r2, [r3, #1]
	currentSwStates[Speed] = HAL_GPIO_ReadPin(SW_SPEED_GPIO_Port, SW_SPEED_Pin);
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	01db      	lsls	r3, r3, #7
 80006b8:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <readSW+0x64>)
 80006ba:	0019      	movs	r1, r3
 80006bc:	0010      	movs	r0, r2
 80006be:	f000 ff01 	bl	80014c4 <HAL_GPIO_ReadPin>
 80006c2:	0003      	movs	r3, r0
 80006c4:	001a      	movs	r2, r3
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <readSW+0x68>)
 80006c8:	709a      	strb	r2, [r3, #2]
	currentSwStates[Mode] = HAL_GPIO_ReadPin(SW_MODE_GPIO_Port, SW_MODE_Pin);
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	019b      	lsls	r3, r3, #6
 80006ce:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <readSW+0x64>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f000 fef6 	bl	80014c4 <HAL_GPIO_ReadPin>
 80006d8:	0003      	movs	r3, r0
 80006da:	001a      	movs	r2, r3
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <readSW+0x68>)
 80006de:	70da      	strb	r2, [r3, #3]

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	50000400 	.word	0x50000400
 80006ec:	200000a0 	.word	0x200000a0

080006f0 <debounceCheck>:

uint8_t debounceCheck(uint8_t readState, uint8_t diceCode){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	0002      	movs	r2, r0
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	1dbb      	adds	r3, r7, #6
 80006fe:	1c0a      	adds	r2, r1, #0
 8000700:	701a      	strb	r2, [r3, #0]
	if(lastSwStates[diceCode] == readState)
 8000702:	1dbb      	adds	r3, r7, #6
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <debounceCheck+0x3c>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	1dfa      	adds	r2, r7, #7
 800070c:	7812      	ldrb	r2, [r2, #0]
 800070e:	429a      	cmp	r2, r3
 8000710:	d101      	bne.n	8000716 <debounceCheck+0x26>
		return 0;
 8000712:	2300      	movs	r3, #0
 8000714:	e006      	b.n	8000724 <debounceCheck+0x34>
	else{
		lastSwStates[diceCode] = readState;
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <debounceCheck+0x3c>)
 800071c:	1df9      	adds	r1, r7, #7
 800071e:	7809      	ldrb	r1, [r1, #0]
 8000720:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000722:	2301      	movs	r3, #1
	}
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000009c 	.word	0x2000009c

08000730 <HAL_GPIO_EXTI_Callback>:
        x = x/10;
    }
    return sum;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	0002      	movs	r2, r0
 8000738:	1dbb      	adds	r3, r7, #6
 800073a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == INT_PULSE_Pin){
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	881a      	ldrh	r2, [r3, #0]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	429a      	cmp	r2, r3
 8000746:	d12d      	bne.n	80007a4 <HAL_GPIO_EXTI_Callback+0x74>
#ifdef DEBUG_2
		printf("1,\r\n", rollNumber);
#endif
		currentDetectTick = HAL_GetTick();
 8000748:	f000 fc5e 	bl	8001008 <HAL_GetTick>
 800074c:	0002      	movs	r2, r0
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <HAL_GPIO_EXTI_Callback+0x7c>)
 8000750:	601a      	str	r2, [r3, #0]
#ifndef DEBUG_3
		if(rolling){
#endif
			rolling = false;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
//			if(currentDetectTick == lastDetectTick)
//				return;
			lastDetectTick = currentDetectTick;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_GPIO_EXTI_Callback+0x7c>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <HAL_GPIO_EXTI_Callback+0x84>)
 800075e:	601a      	str	r2, [r3, #0]
			currentDetectTick = (HAL_GetTick() * currentDetectTick) % 100;
 8000760:	f000 fc52 	bl	8001008 <HAL_GetTick>
 8000764:	0002      	movs	r2, r0
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_GPIO_EXTI_Callback+0x7c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4353      	muls	r3, r2
 800076c:	2164      	movs	r1, #100	; 0x64
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff fd5a 	bl	8000228 <__aeabi_uidivmod>
 8000774:	000b      	movs	r3, r1
 8000776:	001a      	movs	r2, r3
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_GPIO_EXTI_Callback+0x7c>)
 800077a:	601a      	str	r2, [r3, #0]
//			currentDetectTick =  * lastDetectTick;
//			lastDetectTick = currentDetectTick;
//			currentDetectTick = (currentDetectTick * lastDetectTick) % 100;
			rollNumber = (currentDetectTick % 6) + 1;
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_GPIO_EXTI_Callback+0x7c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2106      	movs	r1, #6
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff fd50 	bl	8000228 <__aeabi_uidivmod>
 8000788:	000b      	movs	r3, r1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3301      	adds	r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000792:	701a      	strb	r2, [r3, #0]

//			rollNumber = (r % dices[currentDice]) + 1;
#ifdef DEBUG_3
			printf("%d,\r\n", rollNumber);
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	001a      	movs	r2, r3
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_GPIO_EXTI_Callback+0x8c>)
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fe84 	bl	80034ac <iprintf>
//			HAL_GPIO_WritePin(SW_HV_GPIO_Port, SW_HV_Pin, RESET);
#ifndef DEBUG_3
		}
#endif
	}
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000170 	.word	0x20000170
 80007b0:	20000095 	.word	0x20000095
 80007b4:	200000c4 	.word	0x200000c4
 80007b8:	20000096 	.word	0x20000096
 80007bc:	080045a4 	.word	0x080045a4

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f000 fbba 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f8a6 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f000 f946 	bl	8000a5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007d0:	f000 f914 	bl	80009fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80007d4:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <main+0x130>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fa34 	bl	8000c44 <RetargetInit>
  TM1638_Init();
 80007dc:	f002 fc69 	bl	80030b2 <TM1638_Init>
  TM1638_ConfigDisplay(5, TM1638DisplayStateON);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2005      	movs	r0, #5
 80007e4:	f002 fc6d 	bl	80030c2 <TM1638_ConfigDisplay>
  TM1638_SetSingleDigit_HEX(1 , 0);
 80007e8:	2100      	movs	r1, #0
 80007ea:	2001      	movs	r0, #1
 80007ec:	f002 fcba 	bl	8003164 <TM1638_SetSingleDigit_HEX>
//  TM1638_SetSingleDigit(2, 2);
//  TM1638_SetSingleDigit(3, 3);
//  TM1638_SetSingleDigit(4, 4);
//  TM1638_SetSingleDigit(5, 5);
//  TM1638_SetSingleDigit(6, 6);
  lastDetectTick = HAL_GetTick();
 80007f0:	f000 fc0a 	bl	8001008 <HAL_GetTick>
 80007f4:	0002      	movs	r2, r0
 80007f6:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <main+0x134>)
 80007f8:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  printf("test\n");
	currentTick = HAL_GetTick();
 80007fa:	f000 fc05 	bl	8001008 <HAL_GetTick>
 80007fe:	0002      	movs	r2, r0
 8000800:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <main+0x138>)
 8000802:	601a      	str	r2, [r3, #0]


	if((currentTick-lastPress)>DEBOUNCE_TIME_MS){
 8000804:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <main+0x138>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b3c      	ldr	r3, [pc, #240]	; (80008fc <main+0x13c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	2b6e      	cmp	r3, #110	; 0x6e
 8000810:	d9f3      	bls.n	80007fa <main+0x3a>
		readSW();
 8000812:	f7ff ff37 	bl	8000684 <readSW>
		if(debounceCheck(currentSwStates[Roll], Roll)){
 8000816:	4b3a      	ldr	r3, [pc, #232]	; (8000900 <main+0x140>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2100      	movs	r1, #0
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff ff67 	bl	80006f0 <debounceCheck>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d012      	beq.n	800084c <main+0x8c>
			if(!currentSwStates[Roll]){
 8000826:	4b36      	ldr	r3, [pc, #216]	; (8000900 <main+0x140>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10e      	bne.n	800084c <main+0x8c>
			  	//ADD FUNCTIONAL CODE HERE
				if(rolling == false){
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <main+0x144>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2201      	movs	r2, #1
 8000834:	4053      	eors	r3, r2
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <main+0x82>
#ifdef DEBUG_1
					printf("Rolling...\r\n");
#endif
					rolling = true;
 800083c:	4b31      	ldr	r3, [pc, #196]	; (8000904 <main+0x144>)
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
				}
				lastPress = HAL_GetTick();
 8000842:	f000 fbe1 	bl	8001008 <HAL_GetTick>
 8000846:	0002      	movs	r2, r0
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <main+0x13c>)
 800084a:	601a      	str	r2, [r3, #0]
			  }
		}

		if(debounceCheck(currentSwStates[Dice], Dice)){
 800084c:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <main+0x140>)
 800084e:	785b      	ldrb	r3, [r3, #1]
 8000850:	2101      	movs	r1, #1
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff ff4c 	bl	80006f0 <debounceCheck>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d01e      	beq.n	800089a <main+0xda>
			if(!currentSwStates[Dice]){
 800085c:	4b28      	ldr	r3, [pc, #160]	; (8000900 <main+0x140>)
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d11a      	bne.n	800089a <main+0xda>
			  	//ADD FUNCTIONAL CODE HERE
				currentDice = (currentDice + 1) % NDICES;
 8000864:	4b28      	ldr	r3, [pc, #160]	; (8000908 <main+0x148>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	2107      	movs	r1, #7
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff fdc5 	bl	80003fc <__aeabi_idivmod>
 8000872:	000b      	movs	r3, r1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b24      	ldr	r3, [pc, #144]	; (8000908 <main+0x148>)
 8000878:	701a      	strb	r2, [r3, #0]
#if defined(DEBUG_1) || defined(DEBUG_3)
				printf("Current dice: D%d\r\n", dices[currentDice]);
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <main+0x148>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	001a      	movs	r2, r3
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <main+0x14c>)
 8000882:	5c9b      	ldrb	r3, [r3, r2]
 8000884:	001a      	movs	r2, r3
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <main+0x150>)
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f002 fe0e 	bl	80034ac <iprintf>
#endif
				lastPress = HAL_GetTick();
 8000890:	f000 fbba 	bl	8001008 <HAL_GetTick>
 8000894:	0002      	movs	r2, r0
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <main+0x13c>)
 8000898:	601a      	str	r2, [r3, #0]
			}
		}

		if(debounceCheck(currentSwStates[Speed], Speed)){
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <main+0x140>)
 800089c:	789b      	ldrb	r3, [r3, #2]
 800089e:	2102      	movs	r1, #2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f7ff ff25 	bl	80006f0 <debounceCheck>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d008      	beq.n	80008bc <main+0xfc>
			if(!currentSwStates[Speed]){
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <main+0x140>)
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d104      	bne.n	80008bc <main+0xfc>
				//ADD FUNCTIONAL CODE HERE
#ifdef DEBUG_1
				printf("uart test\r\n");
#endif
				lastPress = HAL_GetTick();
 80008b2:	f000 fba9 	bl	8001008 <HAL_GetTick>
 80008b6:	0002      	movs	r2, r0
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <main+0x13c>)
 80008ba:	601a      	str	r2, [r3, #0]
			  }
		}

		if(debounceCheck(currentSwStates[Mode], Mode)){
 80008bc:	4b10      	ldr	r3, [pc, #64]	; (8000900 <main+0x140>)
 80008be:	78db      	ldrb	r3, [r3, #3]
 80008c0:	2103      	movs	r1, #3
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff ff14 	bl	80006f0 <debounceCheck>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d096      	beq.n	80007fa <main+0x3a>
			if(!currentSwStates[Mode]){
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <main+0x140>)
 80008ce:	78db      	ldrb	r3, [r3, #3]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d192      	bne.n	80007fa <main+0x3a>
	//			  currentDice = (currentDice + 1) % NDICES;
				HAL_GPIO_TogglePin(SW_HV_GPIO_Port, SW_HV_Pin);
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	019b      	lsls	r3, r3, #6
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <main+0x154>)
 80008da:	0019      	movs	r1, r3
 80008dc:	0010      	movs	r0, r2
 80008de:	f000 fe2b 	bl	8001538 <HAL_GPIO_TogglePin>
				lastPress = HAL_GetTick();
 80008e2:	f000 fb91 	bl	8001008 <HAL_GetTick>
 80008e6:	0002      	movs	r2, r0
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <main+0x13c>)
 80008ea:	601a      	str	r2, [r3, #0]
	currentTick = HAL_GetTick();
 80008ec:	e785      	b.n	80007fa <main+0x3a>
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	200000ec 	.word	0x200000ec
 80008f4:	200000c4 	.word	0x200000c4
 80008f8:	20000174 	.word	0x20000174
 80008fc:	20000098 	.word	0x20000098
 8000900:	200000a0 	.word	0x200000a0
 8000904:	20000095 	.word	0x20000095
 8000908:	20000094 	.word	0x20000094
 800090c:	20000000 	.word	0x20000000
 8000910:	080045ac 	.word	0x080045ac
 8000914:	50000800 	.word	0x50000800

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b09d      	sub	sp, #116	; 0x74
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	2438      	movs	r4, #56	; 0x38
 8000920:	193b      	adds	r3, r7, r4
 8000922:	0018      	movs	r0, r3
 8000924:	2338      	movs	r3, #56	; 0x38
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f002 fdb7 	bl	800349c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092e:	2324      	movs	r3, #36	; 0x24
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	2314      	movs	r3, #20
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f002 fdaf 	bl	800349c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	2324      	movs	r3, #36	; 0x24
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f002 fda8 	bl	800349c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094c:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <SystemClock_Config+0xdc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <SystemClock_Config+0xe0>)
 8000952:	401a      	ands	r2, r3
 8000954:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <SystemClock_Config+0xdc>)
 8000956:	2180      	movs	r1, #128	; 0x80
 8000958:	0109      	lsls	r1, r1, #4
 800095a:	430a      	orrs	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800095e:	0021      	movs	r1, r4
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2202      	movs	r2, #2
 8000964:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2201      	movs	r2, #1
 800096a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2210      	movs	r2, #16
 8000970:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2202      	movs	r2, #2
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	02d2      	lsls	r2, r2, #11
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	03d2      	lsls	r2, r2, #15
 800098c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	187b      	adds	r3, r7, r1
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fe09 	bl	80015a8 <HAL_RCC_OscConfig>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800099a:	f000 f94d 	bl	8000c38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	2124      	movs	r1, #36	; 0x24
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	220f      	movs	r2, #15
 80009a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2203      	movs	r2, #3
 80009aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2101      	movs	r1, #1
 80009c2:	0018      	movs	r0, r3
 80009c4:	f001 f9b4 	bl	8001d30 <HAL_RCC_ClockConfig>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80009cc:	f000 f934 	bl	8000c38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009d0:	003b      	movs	r3, r7
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009d6:	003b      	movs	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009dc:	003b      	movs	r3, r7
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 fbca 	bl	8002178 <HAL_RCCEx_PeriphCLKConfig>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009e8:	f000 f926 	bl	8000c38 <Error_Handler>
  }
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b01d      	add	sp, #116	; 0x74
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	40007000 	.word	0x40007000
 80009f8:	ffffe7ff 	.word	0xffffe7ff

080009fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_USART1_UART_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a08:	22e1      	movs	r2, #225	; 0xe1
 8000a0a:	0252      	lsls	r2, r2, #9
 8000a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <MX_USART1_UART_Init+0x58>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f001 fcfd 	bl	8002440 <HAL_UART_Init>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f000 f8f5 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000ec 	.word	0x200000ec
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	2414      	movs	r4, #20
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	0018      	movs	r0, r3
 8000a68:	2314      	movs	r3, #20
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f002 fd15 	bl	800349c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b6a      	ldr	r3, [pc, #424]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a76:	4b69      	ldr	r3, [pc, #420]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000a78:	2104      	movs	r1, #4
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a7e:	4b67      	ldr	r3, [pc, #412]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	2204      	movs	r2, #4
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	4b64      	ldr	r3, [pc, #400]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a8e:	4b63      	ldr	r3, [pc, #396]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	430a      	orrs	r2, r1
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a96:	4b61      	ldr	r3, [pc, #388]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b5e      	ldr	r3, [pc, #376]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa6:	4b5d      	ldr	r3, [pc, #372]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aae:	4b5b      	ldr	r3, [pc, #364]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b58      	ldr	r3, [pc, #352]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000abe:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ac6:	4b55      	ldr	r3, [pc, #340]	; (8000c1c <MX_GPIO_Init+0x1c0>)
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	2202      	movs	r2, #2
 8000acc:	4013      	ands	r3, r2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_HV_GPIO_Port, SW_HV_Pin, GPIO_PIN_RESET);
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	4852      	ldr	r0, [pc, #328]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0019      	movs	r1, r3
 8000adc:	f000 fd0f 	bl	80014fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW_CLK_Pin|DISP_CS_Pin|DISP_DATA_Pin, GPIO_PIN_RESET);
 8000ae0:	23e0      	movs	r3, #224	; 0xe0
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	484f      	ldr	r0, [pc, #316]	; (8000c24 <MX_GPIO_Init+0x1c8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	0019      	movs	r1, r3
 8000aea:	f000 fd08 	bl	80014fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_HV_Pin */
  GPIO_InitStruct.Pin = SW_HV_Pin;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	0192      	lsls	r2, r2, #6
 8000af4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2201      	movs	r2, #1
 8000afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_HV_GPIO_Port, &GPIO_InitStruct);
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	4a45      	ldr	r2, [pc, #276]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	0010      	movs	r0, r2
 8000b10:	f000 fb62 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b14:	0021      	movs	r1, r4
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	22c0      	movs	r2, #192	; 0xc0
 8000b1a:	0212      	lsls	r2, r2, #8
 8000b1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1e:	000c      	movs	r4, r1
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2203      	movs	r2, #3
 8000b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	4a3c      	ldr	r2, [pc, #240]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000b30:	0019      	movs	r1, r3
 8000b32:	0010      	movs	r0, r2
 8000b34:	f000 fb50 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2203      	movs	r2, #3
 8000b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	4a36      	ldr	r2, [pc, #216]	; (8000c28 <MX_GPIO_Init+0x1cc>)
 8000b4e:	0019      	movs	r1, r3
 8000b50:	0010      	movs	r0, r2
 8000b52:	f000 fb41 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	4a34      	ldr	r2, [pc, #208]	; (8000c2c <MX_GPIO_Init+0x1d0>)
 8000b5a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2203      	movs	r2, #3
 8000b60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	193a      	adds	r2, r7, r4
 8000b6a:	23a0      	movs	r3, #160	; 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fb31 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000b7a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	2203      	movs	r2, #3
 8000b80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <MX_GPIO_Init+0x1c8>)
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	0010      	movs	r0, r2
 8000b90:	f000 fb22 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_ROLL_Pin SW_MODE_Pin SW_SPEED_Pin SW_DICE_Pin */
  GPIO_InitStruct.Pin = SW_ROLL_Pin|SW_MODE_Pin|SW_SPEED_Pin|SW_DICE_Pin;
 8000b94:	0021      	movs	r1, r4
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	22f0      	movs	r2, #240	; 0xf0
 8000b9a:	0212      	lsls	r2, r2, #8
 8000b9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	000c      	movs	r4, r1
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <MX_GPIO_Init+0x1c8>)
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	0010      	movs	r0, r2
 8000bb4:	f000 fb10 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_PULSE_Pin */
  GPIO_InitStruct.Pin = INT_PULSE_Pin;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	0052      	lsls	r2, r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <MX_GPIO_Init+0x1d8>)
 8000bc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_PULSE_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	193a      	adds	r2, r7, r4
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 faff 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_CLK_Pin DISP_CS_Pin DISP_DATA_Pin */
  GPIO_InitStruct.Pin = SW_CLK_Pin|DISP_CS_Pin|DISP_DATA_Pin;
 8000bda:	0021      	movs	r1, r4
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	22e0      	movs	r2, #224	; 0xe0
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2201      	movs	r2, #1
 8000be8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <MX_GPIO_Init+0x1c8>)
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	0010      	movs	r0, r2
 8000bfe:	f000 faeb 	bl	80011d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2007      	movs	r0, #7
 8000c08:	f000 fab4 	bl	8001174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c0c:	2007      	movs	r0, #7
 8000c0e:	f000 fac6 	bl	800119e <HAL_NVIC_EnableIRQ>

}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b00b      	add	sp, #44	; 0x2c
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	50000800 	.word	0x50000800
 8000c24:	50000400 	.word	0x50000400
 8000c28:	50001c00 	.word	0x50001c00
 8000c2c:	000098ff 	.word	0x000098ff
 8000c30:	00000c7f 	.word	0x00000c7f
 8000c34:	10210000 	.word	0x10210000

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <RetargetInit+0x28>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <RetargetInit+0x2c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6898      	ldr	r0, [r3, #8]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	f002 fc3f 	bl	80034e0 <setvbuf>
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	2000019c 	.word	0x2000019c
 8000c70:	20000014 	.word	0x20000014

08000c74 <_write>:
//
//  errno = EBADF;
//  return 0;
//}

int _write(int fd, char* ptr, int len) {
 8000c74:	b5b0      	push	{r4, r5, r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d002      	beq.n	8000c8c <_write+0x18>
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d114      	bne.n	8000cb6 <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <_write+0x58>)
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	2517      	movs	r5, #23
 8000c96:	197c      	adds	r4, r7, r5
 8000c98:	2301      	movs	r3, #1
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	f001 fc23 	bl	80024e8 <HAL_UART_Transmit>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8000ca6:	197b      	adds	r3, r7, r5
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <_write+0x3e>
      return len;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	e008      	b.n	8000cc4 <_write+0x50>
    else
      return EIO;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	e006      	b.n	8000cc4 <_write+0x50>
  }
  errno = EBADF;
 8000cb6:	f002 fbc7 	bl	8003448 <__errno>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	2209      	movs	r2, #9
 8000cbe:	601a      	str	r2, [r3, #0]
  return -1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	425b      	negs	r3, r3
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b006      	add	sp, #24
 8000cca:	bdb0      	pop	{r4, r5, r7, pc}
 8000ccc:	2000019c 	.word	0x2000019c

08000cd0 <_read>:
//
//  errno = EBADF;
//  return -1;
//}

int _read(int fd, char* ptr, int len) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d113      	bne.n	8000d0a <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <_read+0x50>)
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	2517      	movs	r5, #23
 8000ce8:	197c      	adds	r4, r7, r5
 8000cea:	2301      	movs	r3, #1
 8000cec:	425b      	negs	r3, r3
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f001 fca1 	bl	8002638 <HAL_UART_Receive>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8000cfa:	197b      	adds	r3, r7, r5
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <_read+0x36>
      return 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e008      	b.n	8000d18 <_read+0x48>
    else
      return EIO;
 8000d06:	2305      	movs	r3, #5
 8000d08:	e006      	b.n	8000d18 <_read+0x48>
  }
  errno = EBADF;
 8000d0a:	f002 fb9d 	bl	8003448 <__errno>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	2209      	movs	r2, #9
 8000d12:	601a      	str	r2, [r3, #0]
  return -1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	425b      	negs	r3, r3
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b006      	add	sp, #24
 8000d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d20:	2000019c 	.word	0x2000019c

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_MspInit+0x24>)
 8000d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x24>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	430a      	orrs	r2, r1
 8000d32:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <HAL_MspInit+0x24>)
 8000d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_MspInit+0x24>)
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	0549      	lsls	r1, r1, #21
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	240c      	movs	r4, #12
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	2314      	movs	r3, #20
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f002 fb9c 	bl	800349c <memset>
  if(huart->Instance==USART1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x80>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12a      	bne.n	8000dc4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0x84>)
 8000d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_UART_MspInit+0x84>)
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	01c9      	lsls	r1, r1, #7
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_UART_MspInit+0x84>)
 8000d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_UART_MspInit+0x84>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	430a      	orrs	r2, r1
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_UART_MspInit+0x84>)
 8000d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4013      	ands	r3, r2
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	22c0      	movs	r2, #192	; 0xc0
 8000d98:	00d2      	lsls	r2, r2, #3
 8000d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	0021      	movs	r1, r4
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2202      	movs	r2, #2
 8000da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2203      	movs	r2, #3
 8000dae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2204      	movs	r2, #4
 8000db4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	187a      	adds	r2, r7, r1
 8000db8:	23a0      	movs	r3, #160	; 0xa0
 8000dba:	05db      	lsls	r3, r3, #23
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fa0a 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b009      	add	sp, #36	; 0x24
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	40013800 	.word	0x40013800
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 f8f4 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 fbb0 	bl	8001570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	425b      	negs	r3, r3
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	0192      	lsls	r2, r2, #6
 8000e3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_isatty>:

int _isatty(int file)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	return 0;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b004      	add	sp, #16
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	18d3      	adds	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f002 fad2 	bl	8003448 <__errno>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	425b      	negs	r3, r3
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	18d2      	adds	r2, r2, r3
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <_sbrk+0x64>)
 8000ec0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b006      	add	sp, #24
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20002000 	.word	0x20002000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	200000a4 	.word	0x200000a4
 8000ed8:	200001b8 	.word	0x200001b8

08000edc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000ee8:	480d      	ldr	r0, [pc, #52]	; (8000f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eee:	490e      	ldr	r1, [pc, #56]	; (8000f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <LoopForever+0xe>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f04:	4c0b      	ldr	r4, [pc, #44]	; (8000f34 <LoopForever+0x16>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f12:	f7ff ffe3 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f002 fa9d 	bl	8003454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fc51 	bl	80007c0 <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   r0, =_estack
 8000f20:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f2c:	0800477c 	.word	0x0800477c
  ldr r2, =_sbss
 8000f30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f34:	200001b4 	.word	0x200001b4

08000f38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_COMP_IRQHandler>
	...

08000f3c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_Init+0x3c>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_Init+0x3c>)
 8000f4e:	2140      	movs	r1, #64	; 0x40
 8000f50:	430a      	orrs	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 f811 	bl	8000f7c <HAL_InitTick>
 8000f5a:	1e03      	subs	r3, r0, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	e001      	b.n	8000f6a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f66:	f7ff fedd 	bl	8000d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000f86:	681c      	ldr	r4, [r3, #0]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_InitTick+0x60>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	23fa      	movs	r3, #250	; 0xfa
 8000f90:	0098      	lsls	r0, r3, #2
 8000f92:	f7ff f8c3 	bl	800011c <__udivsi3>
 8000f96:	0003      	movs	r3, r0
 8000f98:	0019      	movs	r1, r3
 8000f9a:	0020      	movs	r0, r4
 8000f9c:	f7ff f8be 	bl	800011c <__udivsi3>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 f90b 	bl	80011be <HAL_SYSTICK_Config>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e00f      	b.n	8000fd0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d80b      	bhi.n	8000fce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 f8d8 	bl	8001174 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_InitTick+0x64>)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b003      	add	sp, #12
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000010 	.word	0x20000010
 8000fe0:	2000000c 	.word	0x2000000c

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_IncTick+0x1c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	001a      	movs	r2, r3
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_IncTick+0x20>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	18d2      	adds	r2, r2, r3
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_IncTick+0x20>)
 8000ff6:	601a      	str	r2, [r3, #0]
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	20000010 	.word	0x20000010
 8001004:	200001a0 	.word	0x200001a0

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <HAL_GetTick+0x10>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	200001a0 	.word	0x200001a0

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	0002      	movs	r2, r0
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b7f      	cmp	r3, #127	; 0x7f
 800102e:	d809      	bhi.n	8001044 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	001a      	movs	r2, r3
 8001036:	231f      	movs	r3, #31
 8001038:	401a      	ands	r2, r3
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_EnableIRQ+0x30>)
 800103c:	2101      	movs	r1, #1
 800103e:	4091      	lsls	r1, r2
 8001040:	000a      	movs	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
  }
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	0002      	movs	r2, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b7f      	cmp	r3, #127	; 0x7f
 8001064:	d828      	bhi.n	80010b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001066:	4a2f      	ldr	r2, [pc, #188]	; (8001124 <__NVIC_SetPriority+0xd4>)
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b25b      	sxtb	r3, r3
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	33c0      	adds	r3, #192	; 0xc0
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	589b      	ldr	r3, [r3, r2]
 8001076:	1dfa      	adds	r2, r7, #7
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	0011      	movs	r1, r2
 800107c:	2203      	movs	r2, #3
 800107e:	400a      	ands	r2, r1
 8001080:	00d2      	lsls	r2, r2, #3
 8001082:	21ff      	movs	r1, #255	; 0xff
 8001084:	4091      	lsls	r1, r2
 8001086:	000a      	movs	r2, r1
 8001088:	43d2      	mvns	r2, r2
 800108a:	401a      	ands	r2, r3
 800108c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	019b      	lsls	r3, r3, #6
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	401a      	ands	r2, r3
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	0018      	movs	r0, r3
 800109c:	2303      	movs	r3, #3
 800109e:	4003      	ands	r3, r0
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a4:	481f      	ldr	r0, [pc, #124]	; (8001124 <__NVIC_SetPriority+0xd4>)
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	430a      	orrs	r2, r1
 80010b0:	33c0      	adds	r3, #192	; 0xc0
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010b6:	e031      	b.n	800111c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <__NVIC_SetPriority+0xd8>)
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	0019      	movs	r1, r3
 80010c0:	230f      	movs	r3, #15
 80010c2:	400b      	ands	r3, r1
 80010c4:	3b08      	subs	r3, #8
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3306      	adds	r3, #6
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	18d3      	adds	r3, r2, r3
 80010ce:	3304      	adds	r3, #4
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1dfa      	adds	r2, r7, #7
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	0011      	movs	r1, r2
 80010d8:	2203      	movs	r2, #3
 80010da:	400a      	ands	r2, r1
 80010dc:	00d2      	lsls	r2, r2, #3
 80010de:	21ff      	movs	r1, #255	; 0xff
 80010e0:	4091      	lsls	r1, r2
 80010e2:	000a      	movs	r2, r1
 80010e4:	43d2      	mvns	r2, r2
 80010e6:	401a      	ands	r2, r3
 80010e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	22ff      	movs	r2, #255	; 0xff
 80010f0:	401a      	ands	r2, r3
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0018      	movs	r0, r3
 80010f8:	2303      	movs	r3, #3
 80010fa:	4003      	ands	r3, r0
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <__NVIC_SetPriority+0xd8>)
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	001c      	movs	r4, r3
 8001108:	230f      	movs	r3, #15
 800110a:	4023      	ands	r3, r4
 800110c:	3b08      	subs	r3, #8
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	430a      	orrs	r2, r1
 8001112:	3306      	adds	r3, #6
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	18c3      	adds	r3, r0, r3
 8001118:	3304      	adds	r3, #4
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b003      	add	sp, #12
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	1e5a      	subs	r2, r3, #1
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	045b      	lsls	r3, r3, #17
 800113c:	429a      	cmp	r2, r3
 800113e:	d301      	bcc.n	8001144 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001140:	2301      	movs	r3, #1
 8001142:	e010      	b.n	8001166 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <SysTick_Config+0x44>)
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	3a01      	subs	r2, #1
 800114a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114c:	2301      	movs	r3, #1
 800114e:	425b      	negs	r3, r3
 8001150:	2103      	movs	r1, #3
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff ff7c 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x44>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x44>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	210f      	movs	r1, #15
 8001180:	187b      	adds	r3, r7, r1
 8001182:	1c02      	adds	r2, r0, #0
 8001184:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	187b      	adds	r3, r7, r1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	0011      	movs	r1, r2
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b004      	add	sp, #16
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	0002      	movs	r2, r0
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff ff33 	bl	800101c <__NVIC_EnableIRQ>
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ffaf 	bl	800112c <SysTick_Config>
 80011ce:	0003      	movs	r3, r0
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b002      	add	sp, #8
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011ee:	e14f      	b.n	8001490 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4091      	lsls	r1, r2
 80011fa:	000a      	movs	r2, r1
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <HAL_GPIO_Init+0x30>
 8001206:	e140      	b.n	800148a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d00b      	beq.n	8001228 <HAL_GPIO_Init+0x50>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d007      	beq.n	8001228 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121c:	2b11      	cmp	r3, #17
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b12      	cmp	r3, #18
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	409a      	lsls	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	2201      	movs	r2, #1
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0xf2>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d123      	bne.n	8001312 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	58d3      	ldr	r3, [r2, r3]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2207      	movs	r2, #7
 80012dc:	4013      	ands	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2107      	movs	r1, #7
 80012f6:	400b      	ands	r3, r1
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	6939      	ldr	r1, [r7, #16]
 8001310:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2203      	movs	r2, #3
 8001330:	401a      	ands	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	055b      	lsls	r3, r3, #21
 800134e:	4013      	ands	r3, r2
 8001350:	d100      	bne.n	8001354 <HAL_GPIO_Init+0x17c>
 8001352:	e09a      	b.n	800148a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001354:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001358:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800135a:	2101      	movs	r1, #1
 800135c:	430a      	orrs	r2, r1
 800135e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001360:	4a52      	ldr	r2, [pc, #328]	; (80014ac <HAL_GPIO_Init+0x2d4>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	589b      	ldr	r3, [r3, r2]
 800136c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2203      	movs	r2, #3
 8001372:	4013      	ands	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	409a      	lsls	r2, r3
 800137a:	0013      	movs	r3, r2
 800137c:	43da      	mvns	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	23a0      	movs	r3, #160	; 0xa0
 8001388:	05db      	lsls	r3, r3, #23
 800138a:	429a      	cmp	r2, r3
 800138c:	d019      	beq.n	80013c2 <HAL_GPIO_Init+0x1ea>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a47      	ldr	r2, [pc, #284]	; (80014b0 <HAL_GPIO_Init+0x2d8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x1e6>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a46      	ldr	r2, [pc, #280]	; (80014b4 <HAL_GPIO_Init+0x2dc>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x1e2>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a45      	ldr	r2, [pc, #276]	; (80014b8 <HAL_GPIO_Init+0x2e0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x1de>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a44      	ldr	r2, [pc, #272]	; (80014bc <HAL_GPIO_Init+0x2e4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x1da>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x1ec>
 80013b2:	2306      	movs	r3, #6
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x1ec>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x1ec>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x1ec>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x1ec>
 80013c2:	2300      	movs	r3, #0
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	2103      	movs	r1, #3
 80013c8:	400a      	ands	r2, r1
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <HAL_GPIO_Init+0x2d4>)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e2:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43da      	mvns	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	025b      	lsls	r3, r3, #9
 80013fa:	4013      	ands	r3, r2
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001406:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800140c:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43da      	mvns	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	4013      	ands	r3, r2
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	035b      	lsls	r3, r3, #13
 800144e:	4013      	ands	r3, r2
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43da      	mvns	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	039b      	lsls	r3, r3, #14
 8001478:	4013      	ands	r3, r2
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	40da      	lsrs	r2, r3
 8001498:	1e13      	subs	r3, r2, #0
 800149a:	d000      	beq.n	800149e <HAL_GPIO_Init+0x2c6>
 800149c:	e6a8      	b.n	80011f0 <HAL_GPIO_Init+0x18>
  }
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b006      	add	sp, #24
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000
 80014b0:	50000400 	.word	0x50000400
 80014b4:	50000800 	.word	0x50000800
 80014b8:	50000c00 	.word	0x50000c00
 80014bc:	50001c00 	.word	0x50001c00
 80014c0:	40010400 	.word	0x40010400

080014c4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	000a      	movs	r2, r1
 80014ce:	1cbb      	adds	r3, r7, #2
 80014d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	1cba      	adds	r2, r7, #2
 80014d8:	8812      	ldrh	r2, [r2, #0]
 80014da:	4013      	ands	r3, r2
 80014dc:	d004      	beq.n	80014e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014de:	230f      	movs	r3, #15
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e003      	b.n	80014f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014e8:	230f      	movs	r3, #15
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014f0:	230f      	movs	r3, #15
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	781b      	ldrb	r3, [r3, #0]
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	0008      	movs	r0, r1
 8001508:	0011      	movs	r1, r2
 800150a:	1cbb      	adds	r3, r7, #2
 800150c:	1c02      	adds	r2, r0, #0
 800150e:	801a      	strh	r2, [r3, #0]
 8001510:	1c7b      	adds	r3, r7, #1
 8001512:	1c0a      	adds	r2, r1, #0
 8001514:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001516:	1c7b      	adds	r3, r7, #1
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	1cbb      	adds	r3, r7, #2
 8001520:	881a      	ldrh	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001526:	e003      	b.n	8001530 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001528:	1cbb      	adds	r3, r7, #2
 800152a:	881a      	ldrh	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	000a      	movs	r2, r1
 8001542:	1cbb      	adds	r3, r7, #2
 8001544:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800154c:	1cbb      	adds	r3, r7, #2
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	4013      	ands	r3, r2
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43db      	mvns	r3, r3
 800155a:	1cb9      	adds	r1, r7, #2
 800155c:	8809      	ldrh	r1, [r1, #0]
 800155e:	400b      	ands	r3, r1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	619a      	str	r2, [r3, #24]
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	0002      	movs	r2, r0
 8001578:	1dbb      	adds	r3, r7, #6
 800157a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	1dba      	adds	r2, r7, #6
 8001582:	8812      	ldrh	r2, [r2, #0]
 8001584:	4013      	ands	r3, r2
 8001586:	d008      	beq.n	800159a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800158a:	1dba      	adds	r2, r7, #6
 800158c:	8812      	ldrh	r2, [r2, #0]
 800158e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001590:	1dbb      	adds	r3, r7, #6
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff f8cb 	bl	8000730 <HAL_GPIO_EXTI_Callback>
  }
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f000 fbaf 	bl	8001d1a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015bc:	4bcf      	ldr	r3, [pc, #828]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	220c      	movs	r2, #12
 80015c2:	4013      	ands	r3, r2
 80015c4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c6:	4bcd      	ldr	r3, [pc, #820]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	4013      	ands	r3, r2
 80015d0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	d100      	bne.n	80015de <HAL_RCC_OscConfig+0x36>
 80015dc:	e07e      	b.n	80016dc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d007      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	d112      	bne.n	8001610 <HAL_RCC_OscConfig+0x68>
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	025b      	lsls	r3, r3, #9
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d10d      	bne.n	8001610 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4bc1      	ldr	r3, [pc, #772]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	029b      	lsls	r3, r3, #10
 80015fc:	4013      	ands	r3, r2
 80015fe:	d100      	bne.n	8001602 <HAL_RCC_OscConfig+0x5a>
 8001600:	e06b      	b.n	80016da <HAL_RCC_OscConfig+0x132>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d167      	bne.n	80016da <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f000 fb85 	bl	8001d1a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	025b      	lsls	r3, r3, #9
 8001618:	429a      	cmp	r2, r3
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x84>
 800161c:	4bb7      	ldr	r3, [pc, #732]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4bb6      	ldr	r3, [pc, #728]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	0249      	lsls	r1, r1, #9
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e027      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	23a0      	movs	r3, #160	; 0xa0
 8001632:	02db      	lsls	r3, r3, #11
 8001634:	429a      	cmp	r2, r3
 8001636:	d10e      	bne.n	8001656 <HAL_RCC_OscConfig+0xae>
 8001638:	4bb0      	ldr	r3, [pc, #704]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4baf      	ldr	r3, [pc, #700]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	02c9      	lsls	r1, r1, #11
 8001642:	430a      	orrs	r2, r1
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	4bad      	ldr	r3, [pc, #692]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4bac      	ldr	r3, [pc, #688]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	0249      	lsls	r1, r1, #9
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e012      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 8001656:	4ba9      	ldr	r3, [pc, #676]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4ba8      	ldr	r3, [pc, #672]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800165c:	49a8      	ldr	r1, [pc, #672]	; (8001900 <HAL_RCC_OscConfig+0x358>)
 800165e:	400a      	ands	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	4ba6      	ldr	r3, [pc, #664]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	025b      	lsls	r3, r3, #9
 800166a:	4013      	ands	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4ba2      	ldr	r3, [pc, #648]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4ba1      	ldr	r3, [pc, #644]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001676:	49a3      	ldr	r1, [pc, #652]	; (8001904 <HAL_RCC_OscConfig+0x35c>)
 8001678:	400a      	ands	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d015      	beq.n	80016b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fcc0 	bl	8001008 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800168c:	e009      	b.n	80016a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168e:	f7ff fcbb 	bl	8001008 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	; 0x64
 800169a:	d902      	bls.n	80016a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	f000 fb3c 	bl	8001d1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016a2:	4b96      	ldr	r3, [pc, #600]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	029b      	lsls	r3, r3, #10
 80016aa:	4013      	ands	r3, r2
 80016ac:	d0ef      	beq.n	800168e <HAL_RCC_OscConfig+0xe6>
 80016ae:	e015      	b.n	80016dc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fcaa 	bl	8001008 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ba:	f7ff fca5 	bl	8001008 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b64      	cmp	r3, #100	; 0x64
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e326      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016cc:	4b8b      	ldr	r3, [pc, #556]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	029b      	lsls	r3, r3, #10
 80016d4:	4013      	ands	r3, r2
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x112>
 80016d8:	e000      	b.n	80016dc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2202      	movs	r2, #2
 80016e2:	4013      	ands	r3, r2
 80016e4:	d100      	bne.n	80016e8 <HAL_RCC_OscConfig+0x140>
 80016e6:	e08b      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d13e      	bne.n	8001778 <HAL_RCC_OscConfig+0x1d0>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d13b      	bne.n	8001778 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001700:	4b7e      	ldr	r3, [pc, #504]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2204      	movs	r2, #4
 8001706:	4013      	ands	r3, r2
 8001708:	d004      	beq.n	8001714 <HAL_RCC_OscConfig+0x16c>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e302      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a7b      	ldr	r2, [pc, #492]	; (8001908 <HAL_RCC_OscConfig+0x360>)
 800171a:	4013      	ands	r3, r2
 800171c:	0019      	movs	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	021a      	lsls	r2, r3, #8
 8001724:	4b75      	ldr	r3, [pc, #468]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001726:	430a      	orrs	r2, r1
 8001728:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800172a:	4b74      	ldr	r3, [pc, #464]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2209      	movs	r2, #9
 8001730:	4393      	bics	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	4b71      	ldr	r3, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800173c:	f000 fc40 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001740:	0001      	movs	r1, r0
 8001742:	4b6e      	ldr	r3, [pc, #440]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	220f      	movs	r2, #15
 800174a:	4013      	ands	r3, r2
 800174c:	4a6f      	ldr	r2, [pc, #444]	; (800190c <HAL_RCC_OscConfig+0x364>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	000a      	movs	r2, r1
 8001752:	40da      	lsrs	r2, r3
 8001754:	4b6e      	ldr	r3, [pc, #440]	; (8001910 <HAL_RCC_OscConfig+0x368>)
 8001756:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001758:	4b6e      	ldr	r3, [pc, #440]	; (8001914 <HAL_RCC_OscConfig+0x36c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2513      	movs	r5, #19
 800175e:	197c      	adds	r4, r7, r5
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff fc0b 	bl	8000f7c <HAL_InitTick>
 8001766:	0003      	movs	r3, r0
 8001768:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800176a:	197b      	adds	r3, r7, r5
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d046      	beq.n	8001800 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001772:	197b      	adds	r3, r7, r5
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	e2d0      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d027      	beq.n	80017ce <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800177e:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2209      	movs	r2, #9
 8001784:	4393      	bics	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	4b5c      	ldr	r3, [pc, #368]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fc3a 	bl	8001008 <HAL_GetTick>
 8001794:	0003      	movs	r3, r0
 8001796:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fc35 	bl	8001008 <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e2b6      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2204      	movs	r2, #4
 80017b2:	4013      	ands	r3, r2
 80017b4:	d0f1      	beq.n	800179a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b51      	ldr	r3, [pc, #324]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4a53      	ldr	r2, [pc, #332]	; (8001908 <HAL_RCC_OscConfig+0x360>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	021a      	lsls	r2, r3, #8
 80017c6:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	e018      	b.n	8001800 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80017d4:	2101      	movs	r1, #1
 80017d6:	438a      	bics	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fc15 	bl	8001008 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff fc10 	bl	8001008 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e291      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2204      	movs	r2, #4
 80017fc:	4013      	ands	r3, r2
 80017fe:	d1f1      	bne.n	80017e4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2210      	movs	r2, #16
 8001806:	4013      	ands	r3, r2
 8001808:	d100      	bne.n	800180c <HAL_RCC_OscConfig+0x264>
 800180a:	e0a1      	b.n	8001950 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d140      	bne.n	8001894 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4013      	ands	r3, r2
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x282>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e277      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4a3a      	ldr	r2, [pc, #232]	; (8001918 <HAL_RCC_OscConfig+0x370>)
 8001830:	4013      	ands	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800183a:	430a      	orrs	r2, r1
 800183c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	0a19      	lsrs	r1, r3, #8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	061a      	lsls	r2, r3, #24
 800184c:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	0b5b      	lsrs	r3, r3, #13
 8001858:	3301      	adds	r3, #1
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	0212      	lsls	r2, r2, #8
 800185e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	210f      	movs	r1, #15
 8001868:	400b      	ands	r3, r1
 800186a:	4928      	ldr	r1, [pc, #160]	; (800190c <HAL_RCC_OscConfig+0x364>)
 800186c:	5ccb      	ldrb	r3, [r1, r3]
 800186e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_RCC_OscConfig+0x368>)
 8001872:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x36c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2513      	movs	r5, #19
 800187a:	197c      	adds	r4, r7, r5
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff fb7d 	bl	8000f7c <HAL_InitTick>
 8001882:	0003      	movs	r3, r0
 8001884:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001886:	197b      	adds	r3, r7, r5
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d060      	beq.n	8001950 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800188e:	197b      	adds	r3, r7, r5
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	e242      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d03f      	beq.n	800191c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	0049      	lsls	r1, r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fbad 	bl	8001008 <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b4:	f7ff fba8 	bl	8001008 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e229      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_RCC_OscConfig+0x370>)
 80018d8:	4013      	ands	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	0a19      	lsrs	r1, r3, #8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	061a      	lsls	r2, r3, #24
 80018f4:	4b01      	ldr	r3, [pc, #4]	; (80018fc <HAL_RCC_OscConfig+0x354>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	e029      	b.n	8001950 <HAL_RCC_OscConfig+0x3a8>
 80018fc:	40021000 	.word	0x40021000
 8001900:	fffeffff 	.word	0xfffeffff
 8001904:	fffbffff 	.word	0xfffbffff
 8001908:	ffffe0ff 	.word	0xffffe0ff
 800190c:	080045c0 	.word	0x080045c0
 8001910:	20000008 	.word	0x20000008
 8001914:	2000000c 	.word	0x2000000c
 8001918:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800191c:	4bbd      	ldr	r3, [pc, #756]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4bbc      	ldr	r3, [pc, #752]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001922:	49bd      	ldr	r1, [pc, #756]	; (8001c18 <HAL_RCC_OscConfig+0x670>)
 8001924:	400a      	ands	r2, r1
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fb6e 	bl	8001008 <HAL_GetTick>
 800192c:	0003      	movs	r3, r0
 800192e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001932:	f7ff fb69 	bl	8001008 <HAL_GetTick>
 8001936:	0002      	movs	r2, r0
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1ea      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001944:	4bb3      	ldr	r3, [pc, #716]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4013      	ands	r3, r2
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2208      	movs	r2, #8
 8001956:	4013      	ands	r3, r2
 8001958:	d036      	beq.n	80019c8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d019      	beq.n	8001996 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001962:	4bac      	ldr	r3, [pc, #688]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001966:	4bab      	ldr	r3, [pc, #684]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001968:	2101      	movs	r1, #1
 800196a:	430a      	orrs	r2, r1
 800196c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7ff fb4b 	bl	8001008 <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001978:	f7ff fb46 	bl	8001008 <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1c7      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800198a:	4ba2      	ldr	r3, [pc, #648]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 800198c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800198e:	2202      	movs	r2, #2
 8001990:	4013      	ands	r3, r2
 8001992:	d0f1      	beq.n	8001978 <HAL_RCC_OscConfig+0x3d0>
 8001994:	e018      	b.n	80019c8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001996:	4b9f      	ldr	r3, [pc, #636]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800199a:	4b9e      	ldr	r3, [pc, #632]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 800199c:	2101      	movs	r1, #1
 800199e:	438a      	bics	r2, r1
 80019a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fb31 	bl	8001008 <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff fb2c 	bl	8001008 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1ad      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019be:	4b95      	ldr	r3, [pc, #596]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 80019c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d1f1      	bne.n	80019ac <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2204      	movs	r2, #4
 80019ce:	4013      	ands	r3, r2
 80019d0:	d100      	bne.n	80019d4 <HAL_RCC_OscConfig+0x42c>
 80019d2:	e0ae      	b.n	8001b32 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d4:	2027      	movs	r0, #39	; 0x27
 80019d6:	183b      	adds	r3, r7, r0
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019dc:	4b8d      	ldr	r3, [pc, #564]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 80019de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	055b      	lsls	r3, r3, #21
 80019e4:	4013      	ands	r3, r2
 80019e6:	d109      	bne.n	80019fc <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e8:	4b8a      	ldr	r3, [pc, #552]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 80019ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019ec:	4b89      	ldr	r3, [pc, #548]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	0549      	lsls	r1, r1, #21
 80019f2:	430a      	orrs	r2, r1
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80019f6:	183b      	adds	r3, r7, r0
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	4b87      	ldr	r3, [pc, #540]	; (8001c1c <HAL_RCC_OscConfig+0x674>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	d11a      	bne.n	8001a3e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a08:	4b84      	ldr	r3, [pc, #528]	; (8001c1c <HAL_RCC_OscConfig+0x674>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b83      	ldr	r3, [pc, #524]	; (8001c1c <HAL_RCC_OscConfig+0x674>)
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	0049      	lsls	r1, r1, #1
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a16:	f7ff faf7 	bl	8001008 <HAL_GetTick>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a20:	f7ff faf2 	bl	8001008 <HAL_GetTick>
 8001a24:	0002      	movs	r2, r0
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e173      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	4b7a      	ldr	r3, [pc, #488]	; (8001c1c <HAL_RCC_OscConfig+0x674>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
 8001a4a:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001a4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a4e:	4b71      	ldr	r3, [pc, #452]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0049      	lsls	r1, r1, #1
 8001a54:	430a      	orrs	r2, r1
 8001a56:	651a      	str	r2, [r3, #80]	; 0x50
 8001a58:	e031      	b.n	8001abe <HAL_RCC_OscConfig+0x516>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4d4>
 8001a62:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001a64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a66:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001a68:	496b      	ldr	r1, [pc, #428]	; (8001c18 <HAL_RCC_OscConfig+0x670>)
 8001a6a:	400a      	ands	r2, r1
 8001a6c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a6e:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001a70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a72:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001a74:	496a      	ldr	r1, [pc, #424]	; (8001c20 <HAL_RCC_OscConfig+0x678>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	651a      	str	r2, [r3, #80]	; 0x50
 8001a7a:	e020      	b.n	8001abe <HAL_RCC_OscConfig+0x516>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	23a0      	movs	r3, #160	; 0xa0
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d10e      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x4fe>
 8001a88:	4b62      	ldr	r3, [pc, #392]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001a8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a8c:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	00c9      	lsls	r1, r1, #3
 8001a92:	430a      	orrs	r2, r1
 8001a94:	651a      	str	r2, [r3, #80]	; 0x50
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001a98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a9a:	4b5e      	ldr	r3, [pc, #376]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	0049      	lsls	r1, r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	651a      	str	r2, [r3, #80]	; 0x50
 8001aa4:	e00b      	b.n	8001abe <HAL_RCC_OscConfig+0x516>
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001aa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aaa:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001aac:	495a      	ldr	r1, [pc, #360]	; (8001c18 <HAL_RCC_OscConfig+0x670>)
 8001aae:	400a      	ands	r2, r1
 8001ab0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ab2:	4b58      	ldr	r3, [pc, #352]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001ab4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ab6:	4b57      	ldr	r3, [pc, #348]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001ab8:	4959      	ldr	r1, [pc, #356]	; (8001c20 <HAL_RCC_OscConfig+0x678>)
 8001aba:	400a      	ands	r2, r1
 8001abc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d015      	beq.n	8001af2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fa9f 	bl	8001008 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ace:	e009      	b.n	8001ae4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fa9a 	bl	8001008 <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	4a52      	ldr	r2, [pc, #328]	; (8001c24 <HAL_RCC_OscConfig+0x67c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e11a      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae4:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001ae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0ef      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x528>
 8001af0:	e014      	b.n	8001b1c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af2:	f7ff fa89 	bl	8001008 <HAL_GetTick>
 8001af6:	0003      	movs	r3, r0
 8001af8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001afa:	e009      	b.n	8001b10 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7ff fa84 	bl	8001008 <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	4a47      	ldr	r2, [pc, #284]	; (8001c24 <HAL_RCC_OscConfig+0x67c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e104      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b10:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d1ef      	bne.n	8001afc <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b1c:	2327      	movs	r3, #39	; 0x27
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d105      	bne.n	8001b32 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b2a:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001b2c:	493e      	ldr	r1, [pc, #248]	; (8001c28 <HAL_RCC_OscConfig+0x680>)
 8001b2e:	400a      	ands	r2, r1
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2220      	movs	r2, #32
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d049      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d026      	beq.n	8001b92 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b44:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b32      	ldr	r3, [pc, #200]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b54:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001b56:	2101      	movs	r1, #1
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_RCC_OscConfig+0x684>)
 8001b5e:	6a1a      	ldr	r2, [r3, #32]
 8001b60:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <HAL_RCC_OscConfig+0x684>)
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	0189      	lsls	r1, r1, #6
 8001b66:	430a      	orrs	r2, r1
 8001b68:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fa4d 	bl	8001008 <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b74:	f7ff fa48 	bl	8001008 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0c9      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b86:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d0f1      	beq.n	8001b74 <HAL_RCC_OscConfig+0x5cc>
 8001b90:	e01e      	b.n	8001bd0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	438a      	bics	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <HAL_RCC_OscConfig+0x684>)
 8001ba0:	6a1a      	ldr	r2, [r3, #32]
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_RCC_OscConfig+0x684>)
 8001ba4:	4922      	ldr	r1, [pc, #136]	; (8001c30 <HAL_RCC_OscConfig+0x688>)
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff fa2d 	bl	8001008 <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb4:	f7ff fa28 	bl	8001008 <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0a9      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d1f1      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d100      	bne.n	8001bda <HAL_RCC_OscConfig+0x632>
 8001bd8:	e09e      	b.n	8001d18 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d100      	bne.n	8001be2 <HAL_RCC_OscConfig+0x63a>
 8001be0:	e077      	b.n	8001cd2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d158      	bne.n	8001c9c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_OscConfig+0x66c>)
 8001bf0:	4910      	ldr	r1, [pc, #64]	; (8001c34 <HAL_RCC_OscConfig+0x68c>)
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fa07 	bl	8001008 <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bfe:	e01b      	b.n	8001c38 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff fa02 	bl	8001008 <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d914      	bls.n	8001c38 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e083      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	40021000 	.word	0x40021000
 8001c18:	fffffeff 	.word	0xfffffeff
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	fffffbff 	.word	0xfffffbff
 8001c24:	00001388 	.word	0x00001388
 8001c28:	efffffff 	.word	0xefffffff
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	ffffdfff 	.word	0xffffdfff
 8001c34:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c38:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	049b      	lsls	r3, r3, #18
 8001c40:	4013      	ands	r3, r2
 8001c42:	d1dd      	bne.n	8001c00 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c44:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a37      	ldr	r2, [pc, #220]	; (8001d28 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c64:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0449      	lsls	r1, r1, #17
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff f9c9 	bl	8001008 <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff f9c4 	bl	8001008 <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e045      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	049b      	lsls	r3, r3, #18
 8001c96:	4013      	ands	r3, r2
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x6d4>
 8001c9a:	e03d      	b.n	8001d18 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001ca2:	4922      	ldr	r1, [pc, #136]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f9ae 	bl	8001008 <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff f9a9 	bl	8001008 <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e02a      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	049b      	lsls	r3, r3, #18
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x70a>
 8001cd0:	e022      	b.n	8001d18 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e01d      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	025b      	lsls	r3, r3, #9
 8001cea:	401a      	ands	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d10f      	bne.n	8001d14 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	23f0      	movs	r3, #240	; 0xf0
 8001cf8:	039b      	lsls	r3, r3, #14
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b00a      	add	sp, #40	; 0x28
 8001d20:	bdb0      	pop	{r4, r5, r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	40021000 	.word	0x40021000
 8001d28:	ff02ffff 	.word	0xff02ffff
 8001d2c:	feffffff 	.word	0xfeffffff

08001d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d30:	b5b0      	push	{r4, r5, r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e128      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d44:	4b96      	ldr	r3, [pc, #600]	; (8001fa0 <HAL_RCC_ClockConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d91e      	bls.n	8001d90 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b93      	ldr	r3, [pc, #588]	; (8001fa0 <HAL_RCC_ClockConfig+0x270>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4393      	bics	r3, r2
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	4b90      	ldr	r3, [pc, #576]	; (8001fa0 <HAL_RCC_ClockConfig+0x270>)
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d64:	f7ff f950 	bl	8001008 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6c:	e009      	b.n	8001d82 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6e:	f7ff f94b 	bl	8001008 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	4a8a      	ldr	r2, [pc, #552]	; (8001fa4 <HAL_RCC_ClockConfig+0x274>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e109      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <HAL_RCC_ClockConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1ee      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2202      	movs	r2, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d009      	beq.n	8001dae <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9a:	4b83      	ldr	r3, [pc, #524]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	22f0      	movs	r2, #240	; 0xf0
 8001da0:	4393      	bics	r3, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	4b7f      	ldr	r3, [pc, #508]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001daa:	430a      	orrs	r2, r1
 8001dac:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d100      	bne.n	8001dba <HAL_RCC_ClockConfig+0x8a>
 8001db8:	e089      	b.n	8001ece <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dc2:	4b79      	ldr	r3, [pc, #484]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d120      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0e1      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dda:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	049b      	lsls	r3, r3, #18
 8001de2:	4013      	ands	r3, r2
 8001de4:	d114      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0d5      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001df2:	4b6d      	ldr	r3, [pc, #436]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2204      	movs	r2, #4
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d109      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0ca      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e00:	4b69      	ldr	r3, [pc, #420]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0c2      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e10:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2203      	movs	r2, #3
 8001e16:	4393      	bics	r3, r2
 8001e18:	0019      	movs	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e24:	f7ff f8f0 	bl	8001008 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d111      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e34:	e009      	b.n	8001e4a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e36:	f7ff f8e7 	bl	8001008 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_RCC_ClockConfig+0x274>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0a5      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e4a:	4b57      	ldr	r3, [pc, #348]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	220c      	movs	r2, #12
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d1ef      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x106>
 8001e56:	e03a      	b.n	8001ece <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d111      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e62:	f7ff f8d1 	bl	8001008 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	4a4d      	ldr	r2, [pc, #308]	; (8001fa4 <HAL_RCC_ClockConfig+0x274>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e08f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e76:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d1ef      	bne.n	8001e62 <HAL_RCC_ClockConfig+0x132>
 8001e82:	e024      	b.n	8001ece <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d11b      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e8c:	e009      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8e:	f7ff f8bb 	bl	8001008 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	4a42      	ldr	r2, [pc, #264]	; (8001fa4 <HAL_RCC_ClockConfig+0x274>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e079      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d1ef      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x15e>
 8001eae:	e00e      	b.n	8001ece <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff f8aa 	bl	8001008 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	4a3a      	ldr	r2, [pc, #232]	; (8001fa4 <HAL_RCC_ClockConfig+0x274>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e068      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	220c      	movs	r2, #12
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ece:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <HAL_RCC_ClockConfig+0x270>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d21e      	bcs.n	8001f1a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCC_ClockConfig+0x270>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4393      	bics	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_RCC_ClockConfig+0x270>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eee:	f7ff f88b 	bl	8001008 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	e009      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f7ff f886 	bl	8001008 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <HAL_RCC_ClockConfig+0x274>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e044      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_ClockConfig+0x270>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d1ee      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4013      	ands	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4a20      	ldr	r2, [pc, #128]	; (8001fac <HAL_RCC_ClockConfig+0x27c>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001f34:	430a      	orrs	r2, r1
 8001f36:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	4a1a      	ldr	r2, [pc, #104]	; (8001fb0 <HAL_RCC_ClockConfig+0x280>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	00da      	lsls	r2, r3, #3
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f58:	f000 f832 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f5c:	0001      	movs	r1, r0
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_RCC_ClockConfig+0x278>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	220f      	movs	r2, #15
 8001f66:	4013      	ands	r3, r2
 8001f68:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <HAL_RCC_ClockConfig+0x284>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	40da      	lsrs	r2, r3
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_RCC_ClockConfig+0x288>)
 8001f72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_RCC_ClockConfig+0x28c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	250b      	movs	r5, #11
 8001f7a:	197c      	adds	r4, r7, r5
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7fe fffd 	bl	8000f7c <HAL_InitTick>
 8001f82:	0003      	movs	r3, r0
 8001f84:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f86:	197b      	adds	r3, r7, r5
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f8e:	197b      	adds	r3, r7, r5
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b004      	add	sp, #16
 8001f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	00001388 	.word	0x00001388
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	fffff8ff 	.word	0xfffff8ff
 8001fb0:	ffffc7ff 	.word	0xffffc7ff
 8001fb4:	080045c0 	.word	0x080045c0
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	2000000c 	.word	0x2000000c

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b08e      	sub	sp, #56	; 0x38
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001fc6:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fce:	230c      	movs	r3, #12
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d014      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x40>
 8001fd6:	d900      	bls.n	8001fda <HAL_RCC_GetSysClockFreq+0x1a>
 8001fd8:	e07b      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x112>
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d002      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x24>
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8001fe2:	e076      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fe4:	4b44      	ldr	r3, [pc, #272]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2210      	movs	r2, #16
 8001fea:	4013      	ands	r3, r2
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001fee:	4b43      	ldr	r3, [pc, #268]	; (80020fc <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ff2:	e07c      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ff4:	4b42      	ldr	r3, [pc, #264]	; (8002100 <HAL_RCC_GetSysClockFreq+0x140>)
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ff8:	e079      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ffa:	4b42      	ldr	r3, [pc, #264]	; (8002104 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ffe:	e076      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002002:	0c9a      	lsrs	r2, r3, #18
 8002004:	230f      	movs	r3, #15
 8002006:	401a      	ands	r2, r3
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_RCC_GetSysClockFreq+0x148>)
 800200a:	5c9b      	ldrb	r3, [r3, r2]
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002010:	0d9a      	lsrs	r2, r3, #22
 8002012:	2303      	movs	r3, #3
 8002014:	4013      	ands	r3, r2
 8002016:	3301      	adds	r3, #1
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x138>)
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	025b      	lsls	r3, r3, #9
 8002022:	4013      	ands	r3, r2
 8002024:	d01a      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	4a35      	ldr	r2, [pc, #212]	; (8002104 <HAL_RCC_GetSysClockFreq+0x144>)
 8002030:	2300      	movs	r3, #0
 8002032:	69b8      	ldr	r0, [r7, #24]
 8002034:	69f9      	ldr	r1, [r7, #28]
 8002036:	f7fe fa07 	bl	8000448 <__aeabi_lmul>
 800203a:	0002      	movs	r2, r0
 800203c:	000b      	movs	r3, r1
 800203e:	0010      	movs	r0, r2
 8002040:	0019      	movs	r1, r3
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f7fe f9db 	bl	8000408 <__aeabi_uldivmod>
 8002052:	0002      	movs	r2, r0
 8002054:	000b      	movs	r3, r1
 8002056:	0013      	movs	r3, r2
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
 800205a:	e037      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x138>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2210      	movs	r2, #16
 8002062:	4013      	ands	r3, r2
 8002064:	d01a      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4a23      	ldr	r2, [pc, #140]	; (80020fc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002070:	2300      	movs	r3, #0
 8002072:	68b8      	ldr	r0, [r7, #8]
 8002074:	68f9      	ldr	r1, [r7, #12]
 8002076:	f7fe f9e7 	bl	8000448 <__aeabi_lmul>
 800207a:	0002      	movs	r2, r0
 800207c:	000b      	movs	r3, r1
 800207e:	0010      	movs	r0, r2
 8002080:	0019      	movs	r1, r3
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f7fe f9bb 	bl	8000408 <__aeabi_uldivmod>
 8002092:	0002      	movs	r2, r0
 8002094:	000b      	movs	r3, r1
 8002096:	0013      	movs	r3, r2
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
 800209a:	e017      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	0018      	movs	r0, r3
 80020a0:	2300      	movs	r3, #0
 80020a2:	0019      	movs	r1, r3
 80020a4:	4a16      	ldr	r2, [pc, #88]	; (8002100 <HAL_RCC_GetSysClockFreq+0x140>)
 80020a6:	2300      	movs	r3, #0
 80020a8:	f7fe f9ce 	bl	8000448 <__aeabi_lmul>
 80020ac:	0002      	movs	r2, r0
 80020ae:	000b      	movs	r3, r1
 80020b0:	0010      	movs	r0, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	001c      	movs	r4, r3
 80020b8:	2300      	movs	r3, #0
 80020ba:	001d      	movs	r5, r3
 80020bc:	0022      	movs	r2, r4
 80020be:	002b      	movs	r3, r5
 80020c0:	f7fe f9a2 	bl	8000408 <__aeabi_uldivmod>
 80020c4:	0002      	movs	r2, r0
 80020c6:	000b      	movs	r3, r1
 80020c8:	0013      	movs	r3, r2
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80020cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020d0:	e00d      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	0b5b      	lsrs	r3, r3, #13
 80020d8:	2207      	movs	r2, #7
 80020da:	4013      	ands	r3, r2
 80020dc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	3301      	adds	r3, #1
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	0212      	lsls	r2, r2, #8
 80020e6:	409a      	lsls	r2, r3
 80020e8:	0013      	movs	r3, r2
 80020ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020ec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b00e      	add	sp, #56	; 0x38
 80020f6:	bdb0      	pop	{r4, r5, r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	003d0900 	.word	0x003d0900
 8002100:	00f42400 	.word	0x00f42400
 8002104:	007a1200 	.word	0x007a1200
 8002108:	080045d8 	.word	0x080045d8

0800210c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <HAL_RCC_GetHCLKFreq+0x10>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	20000008 	.word	0x20000008

08002120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002124:	f7ff fff2 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002128:	0001      	movs	r1, r0
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	2207      	movs	r2, #7
 8002132:	4013      	ands	r3, r2
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	40d9      	lsrs	r1, r3
 800213a:	000b      	movs	r3, r1
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	40021000 	.word	0x40021000
 8002148:	080045d0 	.word	0x080045d0

0800214c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002150:	f7ff ffdc 	bl	800210c <HAL_RCC_GetHCLKFreq>
 8002154:	0001      	movs	r1, r0
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	0adb      	lsrs	r3, r3, #11
 800215c:	2207      	movs	r2, #7
 800215e:	4013      	ands	r3, r2
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	40d9      	lsrs	r1, r3
 8002166:	000b      	movs	r3, r1
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	40021000 	.word	0x40021000
 8002174:	080045d0 	.word	0x080045d0

08002178 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002180:	2317      	movs	r3, #23
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2220      	movs	r2, #32
 800218e:	4013      	ands	r3, r2
 8002190:	d106      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	4013      	ands	r3, r2
 800219c:	d100      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800219e:	e0d9      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a0:	4b9c      	ldr	r3, [pc, #624]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	055b      	lsls	r3, r3, #21
 80021a8:	4013      	ands	r3, r2
 80021aa:	d10a      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b99      	ldr	r3, [pc, #612]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b0:	4b98      	ldr	r3, [pc, #608]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	0549      	lsls	r1, r1, #21
 80021b6:	430a      	orrs	r2, r1
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80021ba:	2317      	movs	r3, #23
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b95      	ldr	r3, [pc, #596]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	d11a      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ce:	4b92      	ldr	r3, [pc, #584]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b91      	ldr	r3, [pc, #580]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	0049      	lsls	r1, r1, #1
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021dc:	f7fe ff14 	bl	8001008 <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	e008      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7fe ff0f 	bl	8001008 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b64      	cmp	r3, #100	; 0x64
 80021f2:	d901      	bls.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e108      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	4b87      	ldr	r3, [pc, #540]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4013      	ands	r3, r2
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002204:	4b83      	ldr	r3, [pc, #524]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	23c0      	movs	r3, #192	; 0xc0
 800220a:	039b      	lsls	r3, r3, #14
 800220c:	4013      	ands	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	23c0      	movs	r3, #192	; 0xc0
 8002216:	039b      	lsls	r3, r3, #14
 8002218:	4013      	ands	r3, r2
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d107      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	23c0      	movs	r3, #192	; 0xc0
 8002226:	039b      	lsls	r3, r3, #14
 8002228:	4013      	ands	r3, r2
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	429a      	cmp	r2, r3
 800222e:	d013      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	23c0      	movs	r3, #192	; 0xc0
 8002236:	029b      	lsls	r3, r3, #10
 8002238:	401a      	ands	r2, r3
 800223a:	23c0      	movs	r3, #192	; 0xc0
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	429a      	cmp	r2, r3
 8002240:	d10a      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002242:	4b74      	ldr	r3, [pc, #464]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	029b      	lsls	r3, r3, #10
 800224a:	401a      	ands	r2, r3
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	029b      	lsls	r3, r3, #10
 8002250:	429a      	cmp	r2, r3
 8002252:	d101      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0d8      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002258:	4b6e      	ldr	r3, [pc, #440]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800225a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800225c:	23c0      	movs	r3, #192	; 0xc0
 800225e:	029b      	lsls	r3, r3, #10
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d049      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	23c0      	movs	r3, #192	; 0xc0
 8002270:	029b      	lsls	r3, r3, #10
 8002272:	4013      	ands	r3, r2
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	429a      	cmp	r2, r3
 8002278:	d004      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2220      	movs	r2, #32
 8002280:	4013      	ands	r3, r2
 8002282:	d10d      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	23c0      	movs	r3, #192	; 0xc0
 800228a:	029b      	lsls	r3, r3, #10
 800228c:	4013      	ands	r3, r2
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d034      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	4013      	ands	r3, r2
 800229e:	d02e      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a4:	4a5d      	ldr	r2, [pc, #372]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022aa:	4b5a      	ldr	r3, [pc, #360]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ae:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022b0:	2180      	movs	r1, #128	; 0x80
 80022b2:	0309      	lsls	r1, r1, #12
 80022b4:	430a      	orrs	r2, r1
 80022b6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022b8:	4b56      	ldr	r3, [pc, #344]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022bc:	4b55      	ldr	r3, [pc, #340]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022be:	4958      	ldr	r1, [pc, #352]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	d014      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fe98 	bl	8001008 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022dc:	e009      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe fe93 	bl	8001008 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a4e      	ldr	r2, [pc, #312]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e08b      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022f2:	4b48      	ldr	r3, [pc, #288]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80022f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4013      	ands	r3, r2
 80022fc:	d0ef      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	23c0      	movs	r3, #192	; 0xc0
 8002304:	029b      	lsls	r3, r3, #10
 8002306:	401a      	ands	r2, r3
 8002308:	23c0      	movs	r3, #192	; 0xc0
 800230a:	029b      	lsls	r3, r3, #10
 800230c:	429a      	cmp	r2, r3
 800230e:	d10c      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002310:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a44      	ldr	r2, [pc, #272]	; (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	23c0      	movs	r3, #192	; 0xc0
 8002320:	039b      	lsls	r3, r3, #14
 8002322:	401a      	ands	r2, r3
 8002324:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800232c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	23c0      	movs	r3, #192	; 0xc0
 8002334:	029b      	lsls	r3, r3, #10
 8002336:	401a      	ands	r2, r3
 8002338:	4b36      	ldr	r3, [pc, #216]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800233a:	430a      	orrs	r2, r1
 800233c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800233e:	2317      	movs	r3, #23
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002348:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800234a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800234e:	4937      	ldr	r1, [pc, #220]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002350:	400a      	ands	r2, r1
 8002352:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2201      	movs	r2, #1
 800235a:	4013      	ands	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800235e:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	2203      	movs	r2, #3
 8002364:	4393      	bics	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	4b29      	ldr	r3, [pc, #164]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800236e:	430a      	orrs	r2, r1
 8002370:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2202      	movs	r2, #2
 8002378:	4013      	ands	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002380:	220c      	movs	r2, #12
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800238c:	430a      	orrs	r2, r1
 800238e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2204      	movs	r2, #4
 8002396:	4013      	ands	r3, r2
 8002398:	d009      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	4a24      	ldr	r2, [pc, #144]	; (8002430 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023aa:	430a      	orrs	r2, r1
 80023ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2208      	movs	r2, #8
 80023b4:	4013      	ands	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023b8:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2240      	movs	r2, #64	; 0x40
 80023d2:	4013      	ands	r3, r2
 80023d4:	d009      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023e6:	430a      	orrs	r2, r1
 80023e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2280      	movs	r2, #128	; 0x80
 80023f0:	4013      	ands	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002404:	430a      	orrs	r2, r1
 8002406:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b006      	add	sp, #24
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	fffcffff 	.word	0xfffcffff
 8002420:	fff7ffff 	.word	0xfff7ffff
 8002424:	00001388 	.word	0x00001388
 8002428:	ffcfffff 	.word	0xffcfffff
 800242c:	efffffff 	.word	0xefffffff
 8002430:	fffff3ff 	.word	0xfffff3ff
 8002434:	ffffcfff 	.word	0xffffcfff
 8002438:	fbffffff 	.word	0xfbffffff
 800243c:	fff3ffff 	.word	0xfff3ffff

08002440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e044      	b.n	80024dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2274      	movs	r2, #116	; 0x74
 800245e:	2100      	movs	r1, #0
 8002460:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f7fe fc71 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2224      	movs	r2, #36	; 0x24
 800246e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2101      	movs	r1, #1
 800247c:	438a      	bics	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	0018      	movs	r0, r3
 8002484:	f000 f9c6 	bl	8002814 <UART_SetConfig>
 8002488:	0003      	movs	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e024      	b.n	80024dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 fc59 	bl	8002d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	490d      	ldr	r1, [pc, #52]	; (80024e4 <HAL_UART_Init+0xa4>)
 80024ae:	400a      	ands	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	212a      	movs	r1, #42	; 0x2a
 80024be:	438a      	bics	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2101      	movs	r1, #1
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fcf1 	bl	8002ebc <UART_CheckIdleState>
 80024da:	0003      	movs	r3, r0
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	ffffb7ff 	.word	0xffffb7ff

080024e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	1dbb      	adds	r3, r7, #6
 80024f6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d000      	beq.n	8002502 <HAL_UART_Transmit+0x1a>
 8002500:	e095      	b.n	800262e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_UART_Transmit+0x28>
 8002508:	1dbb      	adds	r3, r7, #6
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e08d      	b.n	8002630 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	015b      	lsls	r3, r3, #5
 800251c:	429a      	cmp	r2, r3
 800251e:	d109      	bne.n	8002534 <HAL_UART_Transmit+0x4c>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2201      	movs	r2, #1
 800252c:	4013      	ands	r3, r2
 800252e:	d001      	beq.n	8002534 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e07d      	b.n	8002630 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2274      	movs	r2, #116	; 0x74
 8002538:	5c9b      	ldrb	r3, [r3, r2]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_UART_Transmit+0x5a>
 800253e:	2302      	movs	r3, #2
 8002540:	e076      	b.n	8002630 <HAL_UART_Transmit+0x148>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2274      	movs	r2, #116	; 0x74
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	2100      	movs	r1, #0
 8002550:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2221      	movs	r2, #33	; 0x21
 8002556:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002558:	f7fe fd56 	bl	8001008 <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1dba      	adds	r2, r7, #6
 8002564:	2150      	movs	r1, #80	; 0x50
 8002566:	8812      	ldrh	r2, [r2, #0]
 8002568:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1dba      	adds	r2, r7, #6
 800256e:	2152      	movs	r1, #82	; 0x52
 8002570:	8812      	ldrh	r2, [r2, #0]
 8002572:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	015b      	lsls	r3, r3, #5
 800257c:	429a      	cmp	r2, r3
 800257e:	d108      	bne.n	8002592 <HAL_UART_Transmit+0xaa>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d104      	bne.n	8002592 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	e003      	b.n	800259a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2274      	movs	r2, #116	; 0x74
 800259e:	2100      	movs	r1, #0
 80025a0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80025a2:	e02c      	b.n	80025fe <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	0013      	movs	r3, r2
 80025ae:	2200      	movs	r2, #0
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	f000 fccb 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 80025b6:	1e03      	subs	r3, r0, #0
 80025b8:	d001      	beq.n	80025be <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e038      	b.n	8002630 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	001a      	movs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	05d2      	lsls	r2, r2, #23
 80025d0:	0dd2      	lsrs	r2, r2, #23
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	3302      	adds	r3, #2
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	e007      	b.n	80025ec <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2252      	movs	r2, #82	; 0x52
 80025f0:	5a9b      	ldrh	r3, [r3, r2]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b299      	uxth	r1, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2252      	movs	r2, #82	; 0x52
 80025fc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2252      	movs	r2, #82	; 0x52
 8002602:	5a9b      	ldrh	r3, [r3, r2]
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1cc      	bne.n	80025a4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	0013      	movs	r3, r2
 8002614:	2200      	movs	r2, #0
 8002616:	2140      	movs	r1, #64	; 0x40
 8002618:	f000 fc98 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 800261c:	1e03      	subs	r3, r0, #0
 800261e:	d001      	beq.n	8002624 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e005      	b.n	8002630 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
  }
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b008      	add	sp, #32
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	1dbb      	adds	r3, r7, #6
 8002646:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800264c:	2b20      	cmp	r3, #32
 800264e:	d000      	beq.n	8002652 <HAL_UART_Receive+0x1a>
 8002650:	e0d9      	b.n	8002806 <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_UART_Receive+0x28>
 8002658:	1dbb      	adds	r3, r7, #6
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0d1      	b.n	8002808 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	015b      	lsls	r3, r3, #5
 800266c:	429a      	cmp	r2, r3
 800266e:	d109      	bne.n	8002684 <HAL_UART_Receive+0x4c>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2201      	movs	r2, #1
 800267c:	4013      	ands	r3, r2
 800267e:	d001      	beq.n	8002684 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0c1      	b.n	8002808 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2274      	movs	r2, #116	; 0x74
 8002688:	5c9b      	ldrb	r3, [r3, r2]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_UART_Receive+0x5a>
 800268e:	2302      	movs	r3, #2
 8002690:	e0ba      	b.n	8002808 <HAL_UART_Receive+0x1d0>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2274      	movs	r2, #116	; 0x74
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	2100      	movs	r1, #0
 80026a0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2222      	movs	r2, #34	; 0x22
 80026a6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ae:	f7fe fcab 	bl	8001008 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1dba      	adds	r2, r7, #6
 80026ba:	2158      	movs	r1, #88	; 0x58
 80026bc:	8812      	ldrh	r2, [r2, #0]
 80026be:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1dba      	adds	r2, r7, #6
 80026c4:	215a      	movs	r1, #90	; 0x5a
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	015b      	lsls	r3, r3, #5
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d10d      	bne.n	80026f2 <HAL_UART_Receive+0xba>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d104      	bne.n	80026e8 <HAL_UART_Receive+0xb0>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	225c      	movs	r2, #92	; 0x5c
 80026e2:	494b      	ldr	r1, [pc, #300]	; (8002810 <HAL_UART_Receive+0x1d8>)
 80026e4:	5299      	strh	r1, [r3, r2]
 80026e6:	e02e      	b.n	8002746 <HAL_UART_Receive+0x10e>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	225c      	movs	r2, #92	; 0x5c
 80026ec:	21ff      	movs	r1, #255	; 0xff
 80026ee:	5299      	strh	r1, [r3, r2]
 80026f0:	e029      	b.n	8002746 <HAL_UART_Receive+0x10e>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10d      	bne.n	8002716 <HAL_UART_Receive+0xde>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d104      	bne.n	800270c <HAL_UART_Receive+0xd4>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	225c      	movs	r2, #92	; 0x5c
 8002706:	21ff      	movs	r1, #255	; 0xff
 8002708:	5299      	strh	r1, [r3, r2]
 800270a:	e01c      	b.n	8002746 <HAL_UART_Receive+0x10e>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	225c      	movs	r2, #92	; 0x5c
 8002710:	217f      	movs	r1, #127	; 0x7f
 8002712:	5299      	strh	r1, [r3, r2]
 8002714:	e017      	b.n	8002746 <HAL_UART_Receive+0x10e>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	055b      	lsls	r3, r3, #21
 800271e:	429a      	cmp	r2, r3
 8002720:	d10d      	bne.n	800273e <HAL_UART_Receive+0x106>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <HAL_UART_Receive+0xfc>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	225c      	movs	r2, #92	; 0x5c
 800272e:	217f      	movs	r1, #127	; 0x7f
 8002730:	5299      	strh	r1, [r3, r2]
 8002732:	e008      	b.n	8002746 <HAL_UART_Receive+0x10e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	225c      	movs	r2, #92	; 0x5c
 8002738:	213f      	movs	r1, #63	; 0x3f
 800273a:	5299      	strh	r1, [r3, r2]
 800273c:	e003      	b.n	8002746 <HAL_UART_Receive+0x10e>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	225c      	movs	r2, #92	; 0x5c
 8002742:	2100      	movs	r1, #0
 8002744:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002746:	2312      	movs	r3, #18
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	215c      	movs	r1, #92	; 0x5c
 800274e:	5a52      	ldrh	r2, [r2, r1]
 8002750:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	015b      	lsls	r3, r3, #5
 800275a:	429a      	cmp	r2, r3
 800275c:	d108      	bne.n	8002770 <HAL_UART_Receive+0x138>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	e003      	b.n	8002778 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2274      	movs	r2, #116	; 0x74
 800277c:	2100      	movs	r1, #0
 800277e:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002780:	e036      	b.n	80027f0 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	0013      	movs	r3, r2
 800278c:	2200      	movs	r2, #0
 800278e:	2120      	movs	r1, #32
 8002790:	f000 fbdc 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e035      	b.n	8002808 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10e      	bne.n	80027c0 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2212      	movs	r2, #18
 80027ac:	18ba      	adds	r2, r7, r2
 80027ae:	8812      	ldrh	r2, [r2, #0]
 80027b0:	4013      	ands	r3, r2
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	3302      	adds	r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	e00e      	b.n	80027de <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2212      	movs	r2, #18
 80027ca:	18ba      	adds	r2, r7, r2
 80027cc:	8812      	ldrh	r2, [r2, #0]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	4013      	ands	r3, r2
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	3301      	adds	r3, #1
 80027dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	225a      	movs	r2, #90	; 0x5a
 80027e2:	5a9b      	ldrh	r3, [r3, r2]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b299      	uxth	r1, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	225a      	movs	r2, #90	; 0x5a
 80027ee:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	225a      	movs	r2, #90	; 0x5a
 80027f4:	5a9b      	ldrh	r3, [r3, r2]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1c2      	bne.n	8002782 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b008      	add	sp, #32
 800280e:	bd80      	pop	{r7, pc}
 8002810:	000001ff 	.word	0x000001ff

08002814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b08e      	sub	sp, #56	; 0x38
 8002818:	af00      	add	r7, sp, #0
 800281a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800281c:	231a      	movs	r3, #26
 800281e:	2218      	movs	r2, #24
 8002820:	4694      	mov	ip, r2
 8002822:	44bc      	add	ip, r7
 8002824:	4463      	add	r3, ip
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	431a      	orrs	r2, r3
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	431a      	orrs	r2, r3
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4313      	orrs	r3, r2
 8002840:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4ac1      	ldr	r2, [pc, #772]	; (8002b50 <UART_SetConfig+0x33c>)
 800284a:	4013      	ands	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4abd      	ldr	r2, [pc, #756]	; (8002b54 <UART_SetConfig+0x340>)
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4ab7      	ldr	r2, [pc, #732]	; (8002b58 <UART_SetConfig+0x344>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002886:	4313      	orrs	r3, r2
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4ab2      	ldr	r2, [pc, #712]	; (8002b5c <UART_SetConfig+0x348>)
 8002892:	4013      	ands	r3, r2
 8002894:	0019      	movs	r1, r3
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4aae      	ldr	r2, [pc, #696]	; (8002b60 <UART_SetConfig+0x34c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d136      	bne.n	8002918 <UART_SetConfig+0x104>
 80028aa:	4bae      	ldr	r3, [pc, #696]	; (8002b64 <UART_SetConfig+0x350>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	2203      	movs	r2, #3
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d020      	beq.n	80028f8 <UART_SetConfig+0xe4>
 80028b6:	d827      	bhi.n	8002908 <UART_SetConfig+0xf4>
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d00d      	beq.n	80028d8 <UART_SetConfig+0xc4>
 80028bc:	d824      	bhi.n	8002908 <UART_SetConfig+0xf4>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <UART_SetConfig+0xb4>
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d010      	beq.n	80028e8 <UART_SetConfig+0xd4>
 80028c6:	e01f      	b.n	8002908 <UART_SetConfig+0xf4>
 80028c8:	231b      	movs	r3, #27
 80028ca:	2218      	movs	r2, #24
 80028cc:	4694      	mov	ip, r2
 80028ce:	44bc      	add	ip, r7
 80028d0:	4463      	add	r3, ip
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e0ab      	b.n	8002a30 <UART_SetConfig+0x21c>
 80028d8:	231b      	movs	r3, #27
 80028da:	2218      	movs	r2, #24
 80028dc:	4694      	mov	ip, r2
 80028de:	44bc      	add	ip, r7
 80028e0:	4463      	add	r3, ip
 80028e2:	2202      	movs	r2, #2
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e0a3      	b.n	8002a30 <UART_SetConfig+0x21c>
 80028e8:	231b      	movs	r3, #27
 80028ea:	2218      	movs	r2, #24
 80028ec:	4694      	mov	ip, r2
 80028ee:	44bc      	add	ip, r7
 80028f0:	4463      	add	r3, ip
 80028f2:	2204      	movs	r2, #4
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e09b      	b.n	8002a30 <UART_SetConfig+0x21c>
 80028f8:	231b      	movs	r3, #27
 80028fa:	2218      	movs	r2, #24
 80028fc:	4694      	mov	ip, r2
 80028fe:	44bc      	add	ip, r7
 8002900:	4463      	add	r3, ip
 8002902:	2208      	movs	r2, #8
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e093      	b.n	8002a30 <UART_SetConfig+0x21c>
 8002908:	231b      	movs	r3, #27
 800290a:	2218      	movs	r2, #24
 800290c:	4694      	mov	ip, r2
 800290e:	44bc      	add	ip, r7
 8002910:	4463      	add	r3, ip
 8002912:	2210      	movs	r2, #16
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	e08b      	b.n	8002a30 <UART_SetConfig+0x21c>
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a92      	ldr	r2, [pc, #584]	; (8002b68 <UART_SetConfig+0x354>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d136      	bne.n	8002990 <UART_SetConfig+0x17c>
 8002922:	4b90      	ldr	r3, [pc, #576]	; (8002b64 <UART_SetConfig+0x350>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	220c      	movs	r2, #12
 8002928:	4013      	ands	r3, r2
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d020      	beq.n	8002970 <UART_SetConfig+0x15c>
 800292e:	d827      	bhi.n	8002980 <UART_SetConfig+0x16c>
 8002930:	2b08      	cmp	r3, #8
 8002932:	d00d      	beq.n	8002950 <UART_SetConfig+0x13c>
 8002934:	d824      	bhi.n	8002980 <UART_SetConfig+0x16c>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <UART_SetConfig+0x12c>
 800293a:	2b04      	cmp	r3, #4
 800293c:	d010      	beq.n	8002960 <UART_SetConfig+0x14c>
 800293e:	e01f      	b.n	8002980 <UART_SetConfig+0x16c>
 8002940:	231b      	movs	r3, #27
 8002942:	2218      	movs	r2, #24
 8002944:	4694      	mov	ip, r2
 8002946:	44bc      	add	ip, r7
 8002948:	4463      	add	r3, ip
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	e06f      	b.n	8002a30 <UART_SetConfig+0x21c>
 8002950:	231b      	movs	r3, #27
 8002952:	2218      	movs	r2, #24
 8002954:	4694      	mov	ip, r2
 8002956:	44bc      	add	ip, r7
 8002958:	4463      	add	r3, ip
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e067      	b.n	8002a30 <UART_SetConfig+0x21c>
 8002960:	231b      	movs	r3, #27
 8002962:	2218      	movs	r2, #24
 8002964:	4694      	mov	ip, r2
 8002966:	44bc      	add	ip, r7
 8002968:	4463      	add	r3, ip
 800296a:	2204      	movs	r2, #4
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	e05f      	b.n	8002a30 <UART_SetConfig+0x21c>
 8002970:	231b      	movs	r3, #27
 8002972:	2218      	movs	r2, #24
 8002974:	4694      	mov	ip, r2
 8002976:	44bc      	add	ip, r7
 8002978:	4463      	add	r3, ip
 800297a:	2208      	movs	r2, #8
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e057      	b.n	8002a30 <UART_SetConfig+0x21c>
 8002980:	231b      	movs	r3, #27
 8002982:	2218      	movs	r2, #24
 8002984:	4694      	mov	ip, r2
 8002986:	44bc      	add	ip, r7
 8002988:	4463      	add	r3, ip
 800298a:	2210      	movs	r2, #16
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e04f      	b.n	8002a30 <UART_SetConfig+0x21c>
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a70      	ldr	r2, [pc, #448]	; (8002b58 <UART_SetConfig+0x344>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d143      	bne.n	8002a22 <UART_SetConfig+0x20e>
 800299a:	4b72      	ldr	r3, [pc, #456]	; (8002b64 <UART_SetConfig+0x350>)
 800299c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800299e:	23c0      	movs	r3, #192	; 0xc0
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4013      	ands	r3, r2
 80029a4:	22c0      	movs	r2, #192	; 0xc0
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d02a      	beq.n	8002a02 <UART_SetConfig+0x1ee>
 80029ac:	22c0      	movs	r2, #192	; 0xc0
 80029ae:	0112      	lsls	r2, r2, #4
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d82e      	bhi.n	8002a12 <UART_SetConfig+0x1fe>
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d012      	beq.n	80029e2 <UART_SetConfig+0x1ce>
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d826      	bhi.n	8002a12 <UART_SetConfig+0x1fe>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <UART_SetConfig+0x1be>
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	00d2      	lsls	r2, r2, #3
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d010      	beq.n	80029f2 <UART_SetConfig+0x1de>
 80029d0:	e01f      	b.n	8002a12 <UART_SetConfig+0x1fe>
 80029d2:	231b      	movs	r3, #27
 80029d4:	2218      	movs	r2, #24
 80029d6:	4694      	mov	ip, r2
 80029d8:	44bc      	add	ip, r7
 80029da:	4463      	add	r3, ip
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e026      	b.n	8002a30 <UART_SetConfig+0x21c>
 80029e2:	231b      	movs	r3, #27
 80029e4:	2218      	movs	r2, #24
 80029e6:	4694      	mov	ip, r2
 80029e8:	44bc      	add	ip, r7
 80029ea:	4463      	add	r3, ip
 80029ec:	2202      	movs	r2, #2
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e01e      	b.n	8002a30 <UART_SetConfig+0x21c>
 80029f2:	231b      	movs	r3, #27
 80029f4:	2218      	movs	r2, #24
 80029f6:	4694      	mov	ip, r2
 80029f8:	44bc      	add	ip, r7
 80029fa:	4463      	add	r3, ip
 80029fc:	2204      	movs	r2, #4
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e016      	b.n	8002a30 <UART_SetConfig+0x21c>
 8002a02:	231b      	movs	r3, #27
 8002a04:	2218      	movs	r2, #24
 8002a06:	4694      	mov	ip, r2
 8002a08:	44bc      	add	ip, r7
 8002a0a:	4463      	add	r3, ip
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e00e      	b.n	8002a30 <UART_SetConfig+0x21c>
 8002a12:	231b      	movs	r3, #27
 8002a14:	2218      	movs	r2, #24
 8002a16:	4694      	mov	ip, r2
 8002a18:	44bc      	add	ip, r7
 8002a1a:	4463      	add	r3, ip
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e006      	b.n	8002a30 <UART_SetConfig+0x21c>
 8002a22:	231b      	movs	r3, #27
 8002a24:	2218      	movs	r2, #24
 8002a26:	4694      	mov	ip, r2
 8002a28:	44bc      	add	ip, r7
 8002a2a:	4463      	add	r3, ip
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a48      	ldr	r2, [pc, #288]	; (8002b58 <UART_SetConfig+0x344>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d000      	beq.n	8002a3c <UART_SetConfig+0x228>
 8002a3a:	e09b      	b.n	8002b74 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a3c:	231b      	movs	r3, #27
 8002a3e:	2218      	movs	r2, #24
 8002a40:	4694      	mov	ip, r2
 8002a42:	44bc      	add	ip, r7
 8002a44:	4463      	add	r3, ip
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d01d      	beq.n	8002a88 <UART_SetConfig+0x274>
 8002a4c:	dc20      	bgt.n	8002a90 <UART_SetConfig+0x27c>
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d015      	beq.n	8002a7e <UART_SetConfig+0x26a>
 8002a52:	dc1d      	bgt.n	8002a90 <UART_SetConfig+0x27c>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <UART_SetConfig+0x24a>
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d005      	beq.n	8002a68 <UART_SetConfig+0x254>
 8002a5c:	e018      	b.n	8002a90 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a5e:	f7ff fb5f 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8002a62:	0003      	movs	r3, r0
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a66:	e01d      	b.n	8002aa4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a68:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <UART_SetConfig+0x350>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d002      	beq.n	8002a78 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a72:	4b3e      	ldr	r3, [pc, #248]	; (8002b6c <UART_SetConfig+0x358>)
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a76:	e015      	b.n	8002aa4 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8002a78:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <UART_SetConfig+0x35c>)
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a7c:	e012      	b.n	8002aa4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a7e:	f7ff fa9f 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002a82:	0003      	movs	r3, r0
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a86:	e00d      	b.n	8002aa4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a8e:	e009      	b.n	8002aa4 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a94:	231a      	movs	r3, #26
 8002a96:	2218      	movs	r2, #24
 8002a98:	4694      	mov	ip, r2
 8002a9a:	44bc      	add	ip, r7
 8002a9c:	4463      	add	r3, ip
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
        break;
 8002aa2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d100      	bne.n	8002aac <UART_SetConfig+0x298>
 8002aaa:	e139      	b.n	8002d20 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	189b      	adds	r3, r3, r2
 8002ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d305      	bcc.n	8002ac8 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d907      	bls.n	8002ad8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002ac8:	231a      	movs	r3, #26
 8002aca:	2218      	movs	r2, #24
 8002acc:	4694      	mov	ip, r2
 8002ace:	44bc      	add	ip, r7
 8002ad0:	4463      	add	r3, ip
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e123      	b.n	8002d20 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	6939      	ldr	r1, [r7, #16]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	000b      	movs	r3, r1
 8002ae6:	0e1b      	lsrs	r3, r3, #24
 8002ae8:	0010      	movs	r0, r2
 8002aea:	0205      	lsls	r5, r0, #8
 8002aec:	431d      	orrs	r5, r3
 8002aee:	000b      	movs	r3, r1
 8002af0:	021c      	lsls	r4, r3, #8
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	68f9      	ldr	r1, [r7, #12]
 8002b02:	1900      	adds	r0, r0, r4
 8002b04:	4169      	adcs	r1, r5
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f7fd fc78 	bl	8000408 <__aeabi_uldivmod>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	000b      	movs	r3, r1
 8002b1c:	0013      	movs	r3, r2
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b22:	23c0      	movs	r3, #192	; 0xc0
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d309      	bcc.n	8002b3e <UART_SetConfig+0x32a>
 8002b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	035b      	lsls	r3, r3, #13
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d204      	bcs.n	8002b3e <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	e0f0      	b.n	8002d20 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b3e:	231a      	movs	r3, #26
 8002b40:	2218      	movs	r2, #24
 8002b42:	4694      	mov	ip, r2
 8002b44:	44bc      	add	ip, r7
 8002b46:	4463      	add	r3, ip
 8002b48:	2201      	movs	r2, #1
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e0e8      	b.n	8002d20 <UART_SetConfig+0x50c>
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	efff69f3 	.word	0xefff69f3
 8002b54:	ffffcfff 	.word	0xffffcfff
 8002b58:	40004800 	.word	0x40004800
 8002b5c:	fffff4ff 	.word	0xfffff4ff
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40004400 	.word	0x40004400
 8002b6c:	003d0900 	.word	0x003d0900
 8002b70:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	69da      	ldr	r2, [r3, #28]
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d000      	beq.n	8002b82 <UART_SetConfig+0x36e>
 8002b80:	e074      	b.n	8002c6c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002b82:	231b      	movs	r3, #27
 8002b84:	2218      	movs	r2, #24
 8002b86:	4694      	mov	ip, r2
 8002b88:	44bc      	add	ip, r7
 8002b8a:	4463      	add	r3, ip
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d822      	bhi.n	8002bd8 <UART_SetConfig+0x3c4>
 8002b92:	009a      	lsls	r2, r3, #2
 8002b94:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <UART_SetConfig+0x52c>)
 8002b96:	18d3      	adds	r3, r2, r3
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b9c:	f7ff fac0 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ba4:	e022      	b.n	8002bec <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba6:	f7ff fad1 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 8002baa:	0003      	movs	r3, r0
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bae:	e01d      	b.n	8002bec <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bb0:	4b64      	ldr	r3, [pc, #400]	; (8002d44 <UART_SetConfig+0x530>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d002      	beq.n	8002bc0 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <UART_SetConfig+0x534>)
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bbe:	e015      	b.n	8002bec <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8002bc0:	4b62      	ldr	r3, [pc, #392]	; (8002d4c <UART_SetConfig+0x538>)
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bc4:	e012      	b.n	8002bec <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc6:	f7ff f9fb 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bce:	e00d      	b.n	8002bec <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bd6:	e009      	b.n	8002bec <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002bdc:	231a      	movs	r3, #26
 8002bde:	2218      	movs	r2, #24
 8002be0:	4694      	mov	ip, r2
 8002be2:	44bc      	add	ip, r7
 8002be4:	4463      	add	r3, ip
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
        break;
 8002bea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d100      	bne.n	8002bf4 <UART_SetConfig+0x3e0>
 8002bf2:	e095      	b.n	8002d20 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf6:	005a      	lsls	r2, r3, #1
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	18d2      	adds	r2, r2, r3
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	0019      	movs	r1, r3
 8002c06:	0010      	movs	r0, r2
 8002c08:	f7fd fa88 	bl	800011c <__udivsi3>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	2b0f      	cmp	r3, #15
 8002c16:	d921      	bls.n	8002c5c <UART_SetConfig+0x448>
 8002c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	025b      	lsls	r3, r3, #9
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d21c      	bcs.n	8002c5c <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	200e      	movs	r0, #14
 8002c28:	2418      	movs	r4, #24
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	181b      	adds	r3, r3, r0
 8002c2e:	210f      	movs	r1, #15
 8002c30:	438a      	bics	r2, r1
 8002c32:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	b299      	uxth	r1, r3
 8002c40:	193b      	adds	r3, r7, r4
 8002c42:	181b      	adds	r3, r3, r0
 8002c44:	193a      	adds	r2, r7, r4
 8002c46:	1812      	adds	r2, r2, r0
 8002c48:	8812      	ldrh	r2, [r2, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	193a      	adds	r2, r7, r4
 8002c54:	1812      	adds	r2, r2, r0
 8002c56:	8812      	ldrh	r2, [r2, #0]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	e061      	b.n	8002d20 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c5c:	231a      	movs	r3, #26
 8002c5e:	2218      	movs	r2, #24
 8002c60:	4694      	mov	ip, r2
 8002c62:	44bc      	add	ip, r7
 8002c64:	4463      	add	r3, ip
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e059      	b.n	8002d20 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c6c:	231b      	movs	r3, #27
 8002c6e:	2218      	movs	r2, #24
 8002c70:	4694      	mov	ip, r2
 8002c72:	44bc      	add	ip, r7
 8002c74:	4463      	add	r3, ip
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d822      	bhi.n	8002cc2 <UART_SetConfig+0x4ae>
 8002c7c:	009a      	lsls	r2, r3, #2
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <UART_SetConfig+0x53c>)
 8002c80:	18d3      	adds	r3, r2, r3
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c86:	f7ff fa4b 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c8e:	e022      	b.n	8002cd6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c90:	f7ff fa5c 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 8002c94:	0003      	movs	r3, r0
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c98:	e01d      	b.n	8002cd6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <UART_SetConfig+0x530>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d002      	beq.n	8002caa <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ca4:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <UART_SetConfig+0x534>)
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ca8:	e015      	b.n	8002cd6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <UART_SetConfig+0x538>)
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cae:	e012      	b.n	8002cd6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cb0:	f7ff f986 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cb8:	e00d      	b.n	8002cd6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cc0:	e009      	b.n	8002cd6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002cc6:	231a      	movs	r3, #26
 8002cc8:	2218      	movs	r2, #24
 8002cca:	4694      	mov	ip, r2
 8002ccc:	44bc      	add	ip, r7
 8002cce:	4463      	add	r3, ip
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
        break;
 8002cd4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d021      	beq.n	8002d20 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	085a      	lsrs	r2, r3, #1
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	18d2      	adds	r2, r2, r3
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0019      	movs	r1, r3
 8002cec:	0010      	movs	r0, r2
 8002cee:	f7fd fa15 	bl	800011c <__udivsi3>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	2b0f      	cmp	r3, #15
 8002cfc:	d909      	bls.n	8002d12 <UART_SetConfig+0x4fe>
 8002cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	025b      	lsls	r3, r3, #9
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d204      	bcs.n	8002d12 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	e006      	b.n	8002d20 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d12:	231a      	movs	r3, #26
 8002d14:	2218      	movs	r2, #24
 8002d16:	4694      	mov	ip, r2
 8002d18:	44bc      	add	ip, r7
 8002d1a:	4463      	add	r3, ip
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2200      	movs	r2, #0
 8002d24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d2c:	231a      	movs	r3, #26
 8002d2e:	2218      	movs	r2, #24
 8002d30:	4694      	mov	ip, r2
 8002d32:	44bc      	add	ip, r7
 8002d34:	4463      	add	r3, ip
 8002d36:	781b      	ldrb	r3, [r3, #0]
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b00e      	add	sp, #56	; 0x38
 8002d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d40:	080045e4 	.word	0x080045e4
 8002d44:	40021000 	.word	0x40021000
 8002d48:	003d0900 	.word	0x003d0900
 8002d4c:	00f42400 	.word	0x00f42400
 8002d50:	08004608 	.word	0x08004608

08002d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a4a      	ldr	r2, [pc, #296]	; (8002e98 <UART_AdvFeatureConfig+0x144>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2202      	movs	r2, #2
 8002d84:	4013      	ands	r3, r2
 8002d86:	d00b      	beq.n	8002da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a43      	ldr	r2, [pc, #268]	; (8002e9c <UART_AdvFeatureConfig+0x148>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	2204      	movs	r2, #4
 8002da6:	4013      	ands	r3, r2
 8002da8:	d00b      	beq.n	8002dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a3b      	ldr	r2, [pc, #236]	; (8002ea0 <UART_AdvFeatureConfig+0x14c>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d00b      	beq.n	8002de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a34      	ldr	r2, [pc, #208]	; (8002ea4 <UART_AdvFeatureConfig+0x150>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	2210      	movs	r2, #16
 8002dea:	4013      	ands	r3, r2
 8002dec:	d00b      	beq.n	8002e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <UART_AdvFeatureConfig+0x154>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d00b      	beq.n	8002e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	4a25      	ldr	r2, [pc, #148]	; (8002eac <UART_AdvFeatureConfig+0x158>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	2240      	movs	r2, #64	; 0x40
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d01d      	beq.n	8002e6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <UART_AdvFeatureConfig+0x15c>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	035b      	lsls	r3, r3, #13
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d10b      	bne.n	8002e6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <UART_AdvFeatureConfig+0x160>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	4013      	ands	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <UART_AdvFeatureConfig+0x164>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]
  }
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	fffdffff 	.word	0xfffdffff
 8002e9c:	fffeffff 	.word	0xfffeffff
 8002ea0:	fffbffff 	.word	0xfffbffff
 8002ea4:	ffff7fff 	.word	0xffff7fff
 8002ea8:	ffffefff 	.word	0xffffefff
 8002eac:	ffffdfff 	.word	0xffffdfff
 8002eb0:	ffefffff 	.word	0xffefffff
 8002eb4:	ff9fffff 	.word	0xff9fffff
 8002eb8:	fff7ffff 	.word	0xfff7ffff

08002ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2280      	movs	r2, #128	; 0x80
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ecc:	f7fe f89c 	bl	8001008 <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2208      	movs	r2, #8
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d10c      	bne.n	8002efc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	0391      	lsls	r1, r2, #14
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <UART_CheckIdleState+0x8c>)
 8002eec:	9200      	str	r2, [sp, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f000 f82c 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d001      	beq.n	8002efc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e021      	b.n	8002f40 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2204      	movs	r2, #4
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d10c      	bne.n	8002f24 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	03d1      	lsls	r1, r2, #15
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <UART_CheckIdleState+0x8c>)
 8002f14:	9200      	str	r2, [sp, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f000 f818 	bl	8002f4c <UART_WaitOnFlagUntilTimeout>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d001      	beq.n	8002f24 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e00d      	b.n	8002f40 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2274      	movs	r2, #116	; 0x74
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b004      	add	sp, #16
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	01ffffff 	.word	0x01ffffff

08002f4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	1dfb      	adds	r3, r7, #7
 8002f5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5c:	e05e      	b.n	800301c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	3301      	adds	r3, #1
 8002f62:	d05b      	beq.n	800301c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f64:	f7fe f850 	bl	8001008 <HAL_GetTick>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d302      	bcc.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d11b      	bne.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	492f      	ldr	r1, [pc, #188]	; (8003044 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002f86:	400a      	ands	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	438a      	bics	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2274      	movs	r2, #116	; 0x74
 8002faa:	2100      	movs	r1, #0
 8002fac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e044      	b.n	800303c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d02e      	beq.n	800301c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	401a      	ands	r2, r3
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d124      	bne.n	800301c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4917      	ldr	r1, [pc, #92]	; (8003044 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002fe8:	400a      	ands	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	438a      	bics	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	2120      	movs	r1, #32
 800300e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2274      	movs	r2, #116	; 0x74
 8003014:	2100      	movs	r1, #0
 8003016:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e00f      	b.n	800303c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4013      	ands	r3, r2
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	425a      	negs	r2, r3
 800302c:	4153      	adcs	r3, r2
 800302e:	b2db      	uxtb	r3, r3
 8003030:	001a      	movs	r2, r3
 8003032:	1dfb      	adds	r3, r7, #7
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d091      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	fffffe5f 	.word	0xfffffe5f

08003048 <TM1638_SetMultipleDisplayRegister>:
 ==================================================================================
 */

static void
TM1638_SetMultipleDisplayRegister(const uint8_t *DigitData, uint8_t StartAddr, uint8_t Count)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	0008      	movs	r0, r1
 8003052:	0011      	movs	r1, r2
 8003054:	1cfb      	adds	r3, r7, #3
 8003056:	1c02      	adds	r2, r0, #0
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	1cbb      	adds	r3, r7, #2
 800305c:	1c0a      	adds	r2, r1, #0
 800305e:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DataInstructionSet | WriteDataToRegister |
 8003060:	240f      	movs	r4, #15
 8003062:	193b      	adds	r3, r7, r4
 8003064:	2240      	movs	r2, #64	; 0x40
 8003066:	701a      	strb	r2, [r3, #0]
                 AutoAddressAdd | NormalMode;

  TM1638_Platform_Start();
 8003068:	f000 f962 	bl	8003330 <TM1638_Platform_Start>
  TM1638_Platform_WriteBytes(&Data, 1);
 800306c:	193b      	adds	r3, r7, r4
 800306e:	2101      	movs	r1, #1
 8003070:	0018      	movs	r0, r3
 8003072:	f000 f96d 	bl	8003350 <TM1638_Platform_WriteBytes>
  TM1638_Platform_Stop();
 8003076:	f000 f94b 	bl	8003310 <TM1638_Platform_Stop>

  Data = AddressInstructionSet | StartAddr;
 800307a:	1cfb      	adds	r3, r7, #3
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2240      	movs	r2, #64	; 0x40
 8003080:	4252      	negs	r2, r2
 8003082:	4313      	orrs	r3, r2
 8003084:	b2da      	uxtb	r2, r3
 8003086:	193b      	adds	r3, r7, r4
 8003088:	701a      	strb	r2, [r3, #0]

  TM1638_Platform_Start();
 800308a:	f000 f951 	bl	8003330 <TM1638_Platform_Start>
  TM1638_Platform_WriteBytes(&Data, 1);
 800308e:	193b      	adds	r3, r7, r4
 8003090:	2101      	movs	r1, #1
 8003092:	0018      	movs	r0, r3
 8003094:	f000 f95c 	bl	8003350 <TM1638_Platform_WriteBytes>
  TM1638_Platform_WriteBytes(DigitData, Count);
 8003098:	1cbb      	adds	r3, r7, #2
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0011      	movs	r1, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 f955 	bl	8003350 <TM1638_Platform_WriteBytes>
  TM1638_Platform_Stop();
 80030a6:	f000 f933 	bl	8003310 <TM1638_Platform_Stop>
}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b005      	add	sp, #20
 80030b0:	bd90      	pop	{r4, r7, pc}

080030b2 <TM1638_Init>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Init(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0
  return TM1638_Platform_Init();
 80030b6:	f000 f8d5 	bl	8003264 <TM1638_Platform_Init>
 80030ba:	0003      	movs	r3, r0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <TM1638_ConfigDisplay>:
 *         - TM1638_OK: Operation was successful
 *         - TM1638_FAIL: Operation failed
 */
TM1638_Result_t
TM1638_ConfigDisplay(uint8_t Brightness, uint8_t DisplayState)
{
 80030c2:	b590      	push	{r4, r7, lr}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	0002      	movs	r2, r0
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	1dbb      	adds	r3, r7, #6
 80030d0:	1c0a      	adds	r2, r1, #0
 80030d2:	701a      	strb	r2, [r3, #0]
  uint8_t Data = DisplayControlInstructionSet;
 80030d4:	210f      	movs	r1, #15
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	701a      	strb	r2, [r3, #0]
  Data |= Brightness & 0x07;
 80030dc:	1dfb      	adds	r3, r7, #7
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b25b      	sxtb	r3, r3
 80030e2:	2207      	movs	r2, #7
 80030e4:	4013      	ands	r3, r2
 80030e6:	b25a      	sxtb	r2, r3
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b25b      	sxtb	r3, r3
 80030ee:	4313      	orrs	r3, r2
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	701a      	strb	r2, [r3, #0]
  Data |= (DisplayState) ? (ShowTurnOn) : (ShowTurnOff);
 80030f8:	1dbb      	adds	r3, r7, #6
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <TM1638_ConfigDisplay+0x42>
 8003100:	2308      	movs	r3, #8
 8003102:	e000      	b.n	8003106 <TM1638_ConfigDisplay+0x44>
 8003104:	2300      	movs	r3, #0
 8003106:	210f      	movs	r1, #15
 8003108:	187a      	adds	r2, r7, r1
 800310a:	7812      	ldrb	r2, [r2, #0]
 800310c:	b252      	sxtb	r2, r2
 800310e:	4313      	orrs	r3, r2
 8003110:	b25b      	sxtb	r3, r3
 8003112:	b2da      	uxtb	r2, r3
 8003114:	000c      	movs	r4, r1
 8003116:	187b      	adds	r3, r7, r1
 8003118:	701a      	strb	r2, [r3, #0]

  TM1638_Platform_Start();
 800311a:	f000 f909 	bl	8003330 <TM1638_Platform_Start>
  TM1638_Platform_WriteBytes(&Data, 1);
 800311e:	193b      	adds	r3, r7, r4
 8003120:	2101      	movs	r1, #1
 8003122:	0018      	movs	r0, r3
 8003124:	f000 f914 	bl	8003350 <TM1638_Platform_WriteBytes>
  TM1638_Platform_Stop();
 8003128:	f000 f8f2 	bl	8003310 <TM1638_Platform_Stop>

  return TM1638_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b005      	add	sp, #20
 8003134:	bd90      	pop	{r4, r7, pc}

08003136 <TM1638_SetSingleDigit>:
 *         - TM1638_OK: Operation was successful
 *         - TM1638_FAIL: Operation failed
 */
TM1638_Result_t
TM1638_SetSingleDigit(uint8_t DigitData, uint8_t DigitPos)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	0002      	movs	r2, r0
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	1dbb      	adds	r3, r7, #6
 8003144:	1c0a      	adds	r2, r1, #0
 8003146:	701a      	strb	r2, [r3, #0]
#if (TM1638SegType)
  TM1638_SetMultipleDigit(&DigitData, DigitPos, 1);
#else
  TM1638_SetMultipleDisplayRegister(DigitPos, 1, &DigitData);
 8003148:	1dbb      	adds	r3, r7, #6
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	0018      	movs	r0, r3
 800314e:	1dfb      	adds	r3, r7, #7
 8003150:	b2db      	uxtb	r3, r3
 8003152:	001a      	movs	r2, r3
 8003154:	2101      	movs	r1, #1
 8003156:	f7ff ff77 	bl	8003048 <TM1638_SetMultipleDisplayRegister>
#endif

  return TM1638_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}

08003164 <TM1638_SetSingleDigit_HEX>:
 *         - TM1638_OK: Operation was successful
 *         - TM1638_FAIL: Operation failed
 */
TM1638_Result_t
TM1638_SetSingleDigit_HEX(uint8_t DigitData, uint8_t DigitPos)
{
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	0002      	movs	r2, r0
 800316c:	1dfb      	adds	r3, r7, #7
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	1dbb      	adds	r3, r7, #6
 8003172:	1c0a      	adds	r2, r1, #0
 8003174:	701a      	strb	r2, [r3, #0]
  uint8_t DigitDataHEX = 0;
 8003176:	200f      	movs	r0, #15
 8003178:	183b      	adds	r3, r7, r0
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
  uint8_t DecimalPoint = DigitData & 0x80;
 800317e:	240e      	movs	r4, #14
 8003180:	193b      	adds	r3, r7, r4
 8003182:	1dfa      	adds	r2, r7, #7
 8003184:	7812      	ldrb	r2, [r2, #0]
 8003186:	217f      	movs	r1, #127	; 0x7f
 8003188:	438a      	bics	r2, r1
 800318a:	701a      	strb	r2, [r3, #0]

  DigitData &= 0x7F;
 800318c:	1dfb      	adds	r3, r7, #7
 800318e:	1dfa      	adds	r2, r7, #7
 8003190:	7812      	ldrb	r2, [r2, #0]
 8003192:	217f      	movs	r1, #127	; 0x7f
 8003194:	400a      	ands	r2, r1
 8003196:	701a      	strb	r2, [r3, #0]

  if (DigitData >= 0 && DigitData <= 15)
 8003198:	1dfb      	adds	r3, r7, #7
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b0f      	cmp	r3, #15
 800319e:	d809      	bhi.n	80031b4 <TM1638_SetSingleDigit_HEX+0x50>
  {
    DigitDataHEX = HexTo7Seg[DigitData] | DecimalPoint;
 80031a0:	1dfb      	adds	r3, r7, #7
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4a2d      	ldr	r2, [pc, #180]	; (800325c <TM1638_SetSingleDigit_HEX+0xf8>)
 80031a6:	5cd1      	ldrb	r1, [r2, r3]
 80031a8:	183b      	adds	r3, r7, r0
 80031aa:	193a      	adds	r2, r7, r4
 80031ac:	7812      	ldrb	r2, [r2, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e044      	b.n	800323e <TM1638_SetSingleDigit_HEX+0xda>
  }
  else
  {
    switch (DigitData)
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	3b41      	subs	r3, #65	; 0x41
 80031ba:	2b25      	cmp	r3, #37	; 0x25
 80031bc:	d83a      	bhi.n	8003234 <TM1638_SetSingleDigit_HEX+0xd0>
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <TM1638_SetSingleDigit_HEX+0xfc>)
 80031c2:	18d3      	adds	r3, r2, r3
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	469f      	mov	pc, r3
    {
    case 'A':
    case 'a':
      DigitDataHEX = HexTo7Seg[0x0A] | DecimalPoint;
 80031c8:	2177      	movs	r1, #119	; 0x77
 80031ca:	230f      	movs	r3, #15
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	220e      	movs	r2, #14
 80031d0:	18ba      	adds	r2, r7, r2
 80031d2:	7812      	ldrb	r2, [r2, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	701a      	strb	r2, [r3, #0]
      break;
 80031d8:	e031      	b.n	800323e <TM1638_SetSingleDigit_HEX+0xda>

    case 'B':
    case 'b':
      DigitDataHEX = HexTo7Seg[0x0B] | DecimalPoint;
 80031da:	217c      	movs	r1, #124	; 0x7c
 80031dc:	230f      	movs	r3, #15
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	220e      	movs	r2, #14
 80031e2:	18ba      	adds	r2, r7, r2
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	701a      	strb	r2, [r3, #0]
      break;
 80031ea:	e028      	b.n	800323e <TM1638_SetSingleDigit_HEX+0xda>

    case 'C':
    case 'c':
      DigitDataHEX = HexTo7Seg[0x0C] | DecimalPoint;
 80031ec:	2139      	movs	r1, #57	; 0x39
 80031ee:	230f      	movs	r3, #15
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	220e      	movs	r2, #14
 80031f4:	18ba      	adds	r2, r7, r2
 80031f6:	7812      	ldrb	r2, [r2, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	701a      	strb	r2, [r3, #0]
      break;
 80031fc:	e01f      	b.n	800323e <TM1638_SetSingleDigit_HEX+0xda>

    case 'D':
    case 'd':
      DigitDataHEX = HexTo7Seg[0x0D] | DecimalPoint;
 80031fe:	215e      	movs	r1, #94	; 0x5e
 8003200:	230f      	movs	r3, #15
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	220e      	movs	r2, #14
 8003206:	18ba      	adds	r2, r7, r2
 8003208:	7812      	ldrb	r2, [r2, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	701a      	strb	r2, [r3, #0]
      break;
 800320e:	e016      	b.n	800323e <TM1638_SetSingleDigit_HEX+0xda>

    case 'E':
    case 'e':
      DigitDataHEX = HexTo7Seg[0x0E] | DecimalPoint;
 8003210:	2179      	movs	r1, #121	; 0x79
 8003212:	230f      	movs	r3, #15
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	220e      	movs	r2, #14
 8003218:	18ba      	adds	r2, r7, r2
 800321a:	7812      	ldrb	r2, [r2, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	701a      	strb	r2, [r3, #0]
      break;
 8003220:	e00d      	b.n	800323e <TM1638_SetSingleDigit_HEX+0xda>

    case 'F':
    case 'f':
      DigitDataHEX = HexTo7Seg[0x0F] | DecimalPoint;
 8003222:	2171      	movs	r1, #113	; 0x71
 8003224:	230f      	movs	r3, #15
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	220e      	movs	r2, #14
 800322a:	18ba      	adds	r2, r7, r2
 800322c:	7812      	ldrb	r2, [r2, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	701a      	strb	r2, [r3, #0]
      break;
 8003232:	e004      	b.n	800323e <TM1638_SetSingleDigit_HEX+0xda>

    default:
      DigitDataHEX = 0;
 8003234:	230f      	movs	r3, #15
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
      break;
 800323c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return TM1638_SetSingleDigit(DigitDataHEX, DigitPos);
 800323e:	1dbb      	adds	r3, r7, #6
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	230f      	movs	r3, #15
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	0011      	movs	r1, r2
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff ff73 	bl	8003136 <TM1638_SetSingleDigit>
 8003250:	0003      	movs	r3, r0
}
 8003252:	0018      	movs	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	b005      	add	sp, #20
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	0800462c 	.word	0x0800462c
 8003260:	0800463c 	.word	0x0800463c

08003264 <TM1638_Platform_Init>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  TM1638_CLK_OUTPUT();
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <TM1638_Platform_Init+0xa4>)
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <TM1638_Platform_Init+0xa4>)
 8003270:	2201      	movs	r2, #1
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	4b24      	ldr	r3, [pc, #144]	; (8003308 <TM1638_Platform_Init+0xa4>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	4b23      	ldr	r3, [pc, #140]	; (8003308 <TM1638_Platform_Init+0xa4>)
 800327c:	2200      	movs	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
 8003280:	4b21      	ldr	r3, [pc, #132]	; (8003308 <TM1638_Platform_Init+0xa4>)
 8003282:	4a22      	ldr	r2, [pc, #136]	; (800330c <TM1638_Platform_Init+0xa8>)
 8003284:	0019      	movs	r1, r3
 8003286:	0010      	movs	r0, r2
 8003288:	f7fd ffa6 	bl	80011d8 <HAL_GPIO_Init>
  TM1638_STB_OUTPUT();
 800328c:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <TM1638_Platform_Init+0xa4>)
 800328e:	2280      	movs	r2, #128	; 0x80
 8003290:	0052      	lsls	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <TM1638_Platform_Init+0xa4>)
 8003296:	2201      	movs	r2, #1
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <TM1638_Platform_Init+0xa4>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <TM1638_Platform_Init+0xa4>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	4b18      	ldr	r3, [pc, #96]	; (8003308 <TM1638_Platform_Init+0xa4>)
 80032a8:	4a18      	ldr	r2, [pc, #96]	; (800330c <TM1638_Platform_Init+0xa8>)
 80032aa:	0019      	movs	r1, r3
 80032ac:	0010      	movs	r0, r2
 80032ae:	f7fd ff93 	bl	80011d8 <HAL_GPIO_Init>
  TM1638_DIO_OUTPUT();
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <TM1638_Platform_Init+0xa4>)
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	0092      	lsls	r2, r2, #2
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <TM1638_Platform_Init+0xa4>)
 80032bc:	2201      	movs	r2, #1
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <TM1638_Platform_Init+0xa4>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <TM1638_Platform_Init+0xa4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	60da      	str	r2, [r3, #12]
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <TM1638_Platform_Init+0xa4>)
 80032ce:	4a0f      	ldr	r2, [pc, #60]	; (800330c <TM1638_Platform_Init+0xa8>)
 80032d0:	0019      	movs	r1, r3
 80032d2:	0010      	movs	r0, r2
 80032d4:	f7fd ff80 	bl	80011d8 <HAL_GPIO_Init>

  TM1638_CLK_HIGH();
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <TM1638_Platform_Init+0xa8>)
 80032da:	2201      	movs	r2, #1
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	0018      	movs	r0, r3
 80032e0:	f7fe f90d 	bl	80014fe <HAL_GPIO_WritePin>
  TM1638_STB_HIGH();
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4808      	ldr	r0, [pc, #32]	; (800330c <TM1638_Platform_Init+0xa8>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	0019      	movs	r1, r3
 80032ee:	f7fe f906 	bl	80014fe <HAL_GPIO_WritePin>
  TM1638_DIO_HIGH();
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4805      	ldr	r0, [pc, #20]	; (800330c <TM1638_Platform_Init+0xa8>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	0019      	movs	r1, r3
 80032fc:	f7fe f8ff 	bl	80014fe <HAL_GPIO_WritePin>

  return TM1638_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	0018      	movs	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	200000a8 	.word	0x200000a8
 800330c:	50000400 	.word	0x50000400

08003310 <TM1638_Platform_Stop>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_Stop(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  TM1638_STB_HIGH();
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4804      	ldr	r0, [pc, #16]	; (800332c <TM1638_Platform_Stop+0x1c>)
 800331a:	2201      	movs	r2, #1
 800331c:	0019      	movs	r1, r3
 800331e:	f7fe f8ee 	bl	80014fe <HAL_GPIO_WritePin>

  // TM1638_DelayUs(TM1638TM1638_DelayUs);

  return TM1638_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	50000400 	.word	0x50000400

08003330 <TM1638_Platform_Start>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_Start(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  TM1638_STB_LOW();
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4804      	ldr	r0, [pc, #16]	; (800334c <TM1638_Platform_Start+0x1c>)
 800333a:	2200      	movs	r2, #0
 800333c:	0019      	movs	r1, r3
 800333e:	f7fe f8de 	bl	80014fe <HAL_GPIO_WritePin>

  return TM1638_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	50000400 	.word	0x50000400

08003350 <TM1638_Platform_WriteBytes>:
 *         - TM1638_OK: Operation was successful.
 *         - TM1638_FAIL: Operation failed.
 */
TM1638_Result_t
TM1638_Platform_WriteBytes(const uint8_t *Data, uint8_t NumOfBytes)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	000a      	movs	r2, r1
 800335a:	1cfb      	adds	r3, r7, #3
 800335c:	701a      	strb	r2, [r3, #0]
  uint8_t i, j, Buff;

  TM1638_DIO_OUTPUT();
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <TM1638_Platform_WriteBytes+0xf0>)
 8003360:	2280      	movs	r2, #128	; 0x80
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <TM1638_Platform_WriteBytes+0xf0>)
 8003368:	2201      	movs	r2, #1
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	4b34      	ldr	r3, [pc, #208]	; (8003440 <TM1638_Platform_WriteBytes+0xf0>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <TM1638_Platform_WriteBytes+0xf0>)
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <TM1638_Platform_WriteBytes+0xf0>)
 800337a:	4a32      	ldr	r2, [pc, #200]	; (8003444 <TM1638_Platform_WriteBytes+0xf4>)
 800337c:	0019      	movs	r1, r3
 800337e:	0010      	movs	r0, r2
 8003380:	f7fd ff2a 	bl	80011d8 <HAL_GPIO_Init>

  for (j = 0; j < NumOfBytes; j++)
 8003384:	2316      	movs	r3, #22
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e04b      	b.n	8003426 <TM1638_Platform_WriteBytes+0xd6>
  {
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 800338e:	2317      	movs	r3, #23
 8003390:	18fb      	adds	r3, r7, r3
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	2316      	movs	r3, #22
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	18d2      	adds	r2, r2, r3
 80033a0:	2315      	movs	r3, #21
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	7812      	ldrb	r2, [r2, #0]
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e032      	b.n	8003410 <TM1638_Platform_WriteBytes+0xc0>
    {
      TM1638_CLK_LOW();
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <TM1638_Platform_WriteBytes+0xf4>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7fe f8a4 	bl	80014fe <HAL_GPIO_WritePin>
      TM1638_DelayUs(TM1638TM1638_DelayUs);
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	46c0      	nop			; (mov r8, r8)

      if (Buff & 0x01)
 80033bc:	2315      	movs	r3, #21
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	4013      	ands	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TM1638_Platform_WriteBytes+0x88>
        TM1638_DIO_HIGH();
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	481d      	ldr	r0, [pc, #116]	; (8003444 <TM1638_Platform_WriteBytes+0xf4>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	0019      	movs	r1, r3
 80033d2:	f7fe f894 	bl	80014fe <HAL_GPIO_WritePin>
 80033d6:	e006      	b.n	80033e6 <TM1638_Platform_WriteBytes+0x96>
      else
        TM1638_DIO_LOW();
 80033d8:	2380      	movs	r3, #128	; 0x80
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4819      	ldr	r0, [pc, #100]	; (8003444 <TM1638_Platform_WriteBytes+0xf4>)
 80033de:	2200      	movs	r2, #0
 80033e0:	0019      	movs	r1, r3
 80033e2:	f7fe f88c 	bl	80014fe <HAL_GPIO_WritePin>

      TM1638_CLK_HIGH();
 80033e6:	4b17      	ldr	r3, [pc, #92]	; (8003444 <TM1638_Platform_WriteBytes+0xf4>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	2180      	movs	r1, #128	; 0x80
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fe f886 	bl	80014fe <HAL_GPIO_WritePin>
      TM1638_DelayUs(TM1638TM1638_DelayUs);
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	46c0      	nop			; (mov r8, r8)
    for (i = 0, Buff = Data[j]; i < 8; ++i, Buff >>= 1)
 80033f8:	2217      	movs	r2, #23
 80033fa:	18bb      	adds	r3, r7, r2
 80033fc:	18ba      	adds	r2, r7, r2
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	3201      	adds	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	2215      	movs	r2, #21
 8003406:	18bb      	adds	r3, r7, r2
 8003408:	18ba      	adds	r2, r7, r2
 800340a:	7812      	ldrb	r2, [r2, #0]
 800340c:	0852      	lsrs	r2, r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	2317      	movs	r3, #23
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b07      	cmp	r3, #7
 8003418:	d9c7      	bls.n	80033aa <TM1638_Platform_WriteBytes+0x5a>
  for (j = 0; j < NumOfBytes; j++)
 800341a:	2116      	movs	r1, #22
 800341c:	187b      	adds	r3, r7, r1
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	187b      	adds	r3, r7, r1
 8003422:	3201      	adds	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	2316      	movs	r3, #22
 8003428:	18fa      	adds	r2, r7, r3
 800342a:	1cfb      	adds	r3, r7, #3
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d3ac      	bcc.n	800338e <TM1638_Platform_WriteBytes+0x3e>
    }
  }

  return TM1638_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b006      	add	sp, #24
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	200000a8 	.word	0x200000a8
 8003444:	50000400 	.word	0x50000400

08003448 <__errno>:
 8003448:	4b01      	ldr	r3, [pc, #4]	; (8003450 <__errno+0x8>)
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	4770      	bx	lr
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	20000014 	.word	0x20000014

08003454 <__libc_init_array>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	2600      	movs	r6, #0
 8003458:	4d0c      	ldr	r5, [pc, #48]	; (800348c <__libc_init_array+0x38>)
 800345a:	4c0d      	ldr	r4, [pc, #52]	; (8003490 <__libc_init_array+0x3c>)
 800345c:	1b64      	subs	r4, r4, r5
 800345e:	10a4      	asrs	r4, r4, #2
 8003460:	42a6      	cmp	r6, r4
 8003462:	d109      	bne.n	8003478 <__libc_init_array+0x24>
 8003464:	2600      	movs	r6, #0
 8003466:	f001 f891 	bl	800458c <_init>
 800346a:	4d0a      	ldr	r5, [pc, #40]	; (8003494 <__libc_init_array+0x40>)
 800346c:	4c0a      	ldr	r4, [pc, #40]	; (8003498 <__libc_init_array+0x44>)
 800346e:	1b64      	subs	r4, r4, r5
 8003470:	10a4      	asrs	r4, r4, #2
 8003472:	42a6      	cmp	r6, r4
 8003474:	d105      	bne.n	8003482 <__libc_init_array+0x2e>
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	00b3      	lsls	r3, r6, #2
 800347a:	58eb      	ldr	r3, [r5, r3]
 800347c:	4798      	blx	r3
 800347e:	3601      	adds	r6, #1
 8003480:	e7ee      	b.n	8003460 <__libc_init_array+0xc>
 8003482:	00b3      	lsls	r3, r6, #2
 8003484:	58eb      	ldr	r3, [r5, r3]
 8003486:	4798      	blx	r3
 8003488:	3601      	adds	r6, #1
 800348a:	e7f2      	b.n	8003472 <__libc_init_array+0x1e>
 800348c:	08004774 	.word	0x08004774
 8003490:	08004774 	.word	0x08004774
 8003494:	08004774 	.word	0x08004774
 8003498:	08004778 	.word	0x08004778

0800349c <memset>:
 800349c:	0003      	movs	r3, r0
 800349e:	1882      	adds	r2, r0, r2
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d100      	bne.n	80034a6 <memset+0xa>
 80034a4:	4770      	bx	lr
 80034a6:	7019      	strb	r1, [r3, #0]
 80034a8:	3301      	adds	r3, #1
 80034aa:	e7f9      	b.n	80034a0 <memset+0x4>

080034ac <iprintf>:
 80034ac:	b40f      	push	{r0, r1, r2, r3}
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <iprintf+0x30>)
 80034b0:	b513      	push	{r0, r1, r4, lr}
 80034b2:	681c      	ldr	r4, [r3, #0]
 80034b4:	2c00      	cmp	r4, #0
 80034b6:	d005      	beq.n	80034c4 <iprintf+0x18>
 80034b8:	69a3      	ldr	r3, [r4, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <iprintf+0x18>
 80034be:	0020      	movs	r0, r4
 80034c0:	f000 fa04 	bl	80038cc <__sinit>
 80034c4:	ab05      	add	r3, sp, #20
 80034c6:	0020      	movs	r0, r4
 80034c8:	9a04      	ldr	r2, [sp, #16]
 80034ca:	68a1      	ldr	r1, [r4, #8]
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	f000 fbe7 	bl	8003ca0 <_vfiprintf_r>
 80034d2:	bc16      	pop	{r1, r2, r4}
 80034d4:	bc08      	pop	{r3}
 80034d6:	b004      	add	sp, #16
 80034d8:	4718      	bx	r3
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	20000014 	.word	0x20000014

080034e0 <setvbuf>:
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e2:	001d      	movs	r5, r3
 80034e4:	4b5d      	ldr	r3, [pc, #372]	; (800365c <setvbuf+0x17c>)
 80034e6:	b085      	sub	sp, #20
 80034e8:	681e      	ldr	r6, [r3, #0]
 80034ea:	0004      	movs	r4, r0
 80034ec:	000f      	movs	r7, r1
 80034ee:	9200      	str	r2, [sp, #0]
 80034f0:	2e00      	cmp	r6, #0
 80034f2:	d005      	beq.n	8003500 <setvbuf+0x20>
 80034f4:	69b3      	ldr	r3, [r6, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <setvbuf+0x20>
 80034fa:	0030      	movs	r0, r6
 80034fc:	f000 f9e6 	bl	80038cc <__sinit>
 8003500:	4b57      	ldr	r3, [pc, #348]	; (8003660 <setvbuf+0x180>)
 8003502:	429c      	cmp	r4, r3
 8003504:	d161      	bne.n	80035ca <setvbuf+0xea>
 8003506:	6874      	ldr	r4, [r6, #4]
 8003508:	9b00      	ldr	r3, [sp, #0]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d005      	beq.n	800351a <setvbuf+0x3a>
 800350e:	2b01      	cmp	r3, #1
 8003510:	d900      	bls.n	8003514 <setvbuf+0x34>
 8003512:	e09d      	b.n	8003650 <setvbuf+0x170>
 8003514:	2d00      	cmp	r5, #0
 8003516:	da00      	bge.n	800351a <setvbuf+0x3a>
 8003518:	e09a      	b.n	8003650 <setvbuf+0x170>
 800351a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800351c:	07db      	lsls	r3, r3, #31
 800351e:	d405      	bmi.n	800352c <setvbuf+0x4c>
 8003520:	89a3      	ldrh	r3, [r4, #12]
 8003522:	059b      	lsls	r3, r3, #22
 8003524:	d402      	bmi.n	800352c <setvbuf+0x4c>
 8003526:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003528:	f000 fa71 	bl	8003a0e <__retarget_lock_acquire_recursive>
 800352c:	0021      	movs	r1, r4
 800352e:	0030      	movs	r0, r6
 8003530:	f000 f92a 	bl	8003788 <_fflush_r>
 8003534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003536:	2900      	cmp	r1, #0
 8003538:	d008      	beq.n	800354c <setvbuf+0x6c>
 800353a:	0023      	movs	r3, r4
 800353c:	3344      	adds	r3, #68	; 0x44
 800353e:	4299      	cmp	r1, r3
 8003540:	d002      	beq.n	8003548 <setvbuf+0x68>
 8003542:	0030      	movs	r0, r6
 8003544:	f000 fadc 	bl	8003b00 <_free_r>
 8003548:	2300      	movs	r3, #0
 800354a:	6363      	str	r3, [r4, #52]	; 0x34
 800354c:	2300      	movs	r3, #0
 800354e:	61a3      	str	r3, [r4, #24]
 8003550:	6063      	str	r3, [r4, #4]
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	d503      	bpl.n	8003560 <setvbuf+0x80>
 8003558:	0030      	movs	r0, r6
 800355a:	6921      	ldr	r1, [r4, #16]
 800355c:	f000 fad0 	bl	8003b00 <_free_r>
 8003560:	89a3      	ldrh	r3, [r4, #12]
 8003562:	4a40      	ldr	r2, [pc, #256]	; (8003664 <setvbuf+0x184>)
 8003564:	4013      	ands	r3, r2
 8003566:	81a3      	strh	r3, [r4, #12]
 8003568:	9b00      	ldr	r3, [sp, #0]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d100      	bne.n	8003570 <setvbuf+0x90>
 800356e:	e069      	b.n	8003644 <setvbuf+0x164>
 8003570:	ab03      	add	r3, sp, #12
 8003572:	0021      	movs	r1, r4
 8003574:	0030      	movs	r0, r6
 8003576:	aa02      	add	r2, sp, #8
 8003578:	f000 fa4c 	bl	8003a14 <__swhatbuf_r>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	4303      	orrs	r3, r0
 8003580:	81a3      	strh	r3, [r4, #12]
 8003582:	2d00      	cmp	r5, #0
 8003584:	d12b      	bne.n	80035de <setvbuf+0xfe>
 8003586:	9d02      	ldr	r5, [sp, #8]
 8003588:	0028      	movs	r0, r5
 800358a:	f000 faaf 	bl	8003aec <malloc>
 800358e:	1e07      	subs	r7, r0, #0
 8003590:	d153      	bne.n	800363a <setvbuf+0x15a>
 8003592:	9b02      	ldr	r3, [sp, #8]
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	42ab      	cmp	r3, r5
 8003598:	d149      	bne.n	800362e <setvbuf+0x14e>
 800359a:	2501      	movs	r5, #1
 800359c:	426d      	negs	r5, r5
 800359e:	2302      	movs	r3, #2
 80035a0:	89a2      	ldrh	r2, [r4, #12]
 80035a2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80035a4:	4313      	orrs	r3, r2
 80035a6:	2200      	movs	r2, #0
 80035a8:	60a2      	str	r2, [r4, #8]
 80035aa:	0022      	movs	r2, r4
 80035ac:	3247      	adds	r2, #71	; 0x47
 80035ae:	6022      	str	r2, [r4, #0]
 80035b0:	6122      	str	r2, [r4, #16]
 80035b2:	2201      	movs	r2, #1
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	6162      	str	r2, [r4, #20]
 80035ba:	4211      	tst	r1, r2
 80035bc:	d134      	bne.n	8003628 <setvbuf+0x148>
 80035be:	059b      	lsls	r3, r3, #22
 80035c0:	d432      	bmi.n	8003628 <setvbuf+0x148>
 80035c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035c4:	f000 fa24 	bl	8003a10 <__retarget_lock_release_recursive>
 80035c8:	e02e      	b.n	8003628 <setvbuf+0x148>
 80035ca:	4b27      	ldr	r3, [pc, #156]	; (8003668 <setvbuf+0x188>)
 80035cc:	429c      	cmp	r4, r3
 80035ce:	d101      	bne.n	80035d4 <setvbuf+0xf4>
 80035d0:	68b4      	ldr	r4, [r6, #8]
 80035d2:	e799      	b.n	8003508 <setvbuf+0x28>
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <setvbuf+0x18c>)
 80035d6:	429c      	cmp	r4, r3
 80035d8:	d196      	bne.n	8003508 <setvbuf+0x28>
 80035da:	68f4      	ldr	r4, [r6, #12]
 80035dc:	e794      	b.n	8003508 <setvbuf+0x28>
 80035de:	2f00      	cmp	r7, #0
 80035e0:	d0d2      	beq.n	8003588 <setvbuf+0xa8>
 80035e2:	69b3      	ldr	r3, [r6, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <setvbuf+0x10e>
 80035e8:	0030      	movs	r0, r6
 80035ea:	f000 f96f 	bl	80038cc <__sinit>
 80035ee:	9b00      	ldr	r3, [sp, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d102      	bne.n	80035fa <setvbuf+0x11a>
 80035f4:	89a2      	ldrh	r2, [r4, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	81a3      	strh	r3, [r4, #12]
 80035fa:	89a2      	ldrh	r2, [r4, #12]
 80035fc:	2308      	movs	r3, #8
 80035fe:	0011      	movs	r1, r2
 8003600:	6027      	str	r7, [r4, #0]
 8003602:	6127      	str	r7, [r4, #16]
 8003604:	6165      	str	r5, [r4, #20]
 8003606:	4019      	ands	r1, r3
 8003608:	421a      	tst	r2, r3
 800360a:	d01f      	beq.n	800364c <setvbuf+0x16c>
 800360c:	07d3      	lsls	r3, r2, #31
 800360e:	d51b      	bpl.n	8003648 <setvbuf+0x168>
 8003610:	2300      	movs	r3, #0
 8003612:	426d      	negs	r5, r5
 8003614:	60a3      	str	r3, [r4, #8]
 8003616:	61a5      	str	r5, [r4, #24]
 8003618:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800361a:	2301      	movs	r3, #1
 800361c:	000d      	movs	r5, r1
 800361e:	401d      	ands	r5, r3
 8003620:	4219      	tst	r1, r3
 8003622:	d118      	bne.n	8003656 <setvbuf+0x176>
 8003624:	0593      	lsls	r3, r2, #22
 8003626:	d5cc      	bpl.n	80035c2 <setvbuf+0xe2>
 8003628:	0028      	movs	r0, r5
 800362a:	b005      	add	sp, #20
 800362c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800362e:	9801      	ldr	r0, [sp, #4]
 8003630:	f000 fa5c 	bl	8003aec <malloc>
 8003634:	9d01      	ldr	r5, [sp, #4]
 8003636:	1e07      	subs	r7, r0, #0
 8003638:	d0af      	beq.n	800359a <setvbuf+0xba>
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	89a2      	ldrh	r2, [r4, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	e7ce      	b.n	80035e2 <setvbuf+0x102>
 8003644:	2500      	movs	r5, #0
 8003646:	e7aa      	b.n	800359e <setvbuf+0xbe>
 8003648:	60a5      	str	r5, [r4, #8]
 800364a:	e7e5      	b.n	8003618 <setvbuf+0x138>
 800364c:	60a1      	str	r1, [r4, #8]
 800364e:	e7e3      	b.n	8003618 <setvbuf+0x138>
 8003650:	2501      	movs	r5, #1
 8003652:	426d      	negs	r5, r5
 8003654:	e7e8      	b.n	8003628 <setvbuf+0x148>
 8003656:	2500      	movs	r5, #0
 8003658:	e7e6      	b.n	8003628 <setvbuf+0x148>
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	20000014 	.word	0x20000014
 8003660:	080046f8 	.word	0x080046f8
 8003664:	fffff35c 	.word	0xfffff35c
 8003668:	08004718 	.word	0x08004718
 800366c:	080046d8 	.word	0x080046d8

08003670 <__sflush_r>:
 8003670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003672:	898b      	ldrh	r3, [r1, #12]
 8003674:	0005      	movs	r5, r0
 8003676:	000c      	movs	r4, r1
 8003678:	071a      	lsls	r2, r3, #28
 800367a:	d45f      	bmi.n	800373c <__sflush_r+0xcc>
 800367c:	684a      	ldr	r2, [r1, #4]
 800367e:	2a00      	cmp	r2, #0
 8003680:	dc04      	bgt.n	800368c <__sflush_r+0x1c>
 8003682:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003684:	2a00      	cmp	r2, #0
 8003686:	dc01      	bgt.n	800368c <__sflush_r+0x1c>
 8003688:	2000      	movs	r0, #0
 800368a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800368c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800368e:	2f00      	cmp	r7, #0
 8003690:	d0fa      	beq.n	8003688 <__sflush_r+0x18>
 8003692:	2200      	movs	r2, #0
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	682e      	ldr	r6, [r5, #0]
 8003698:	602a      	str	r2, [r5, #0]
 800369a:	001a      	movs	r2, r3
 800369c:	0149      	lsls	r1, r1, #5
 800369e:	400a      	ands	r2, r1
 80036a0:	420b      	tst	r3, r1
 80036a2:	d034      	beq.n	800370e <__sflush_r+0x9e>
 80036a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	075b      	lsls	r3, r3, #29
 80036aa:	d506      	bpl.n	80036ba <__sflush_r+0x4a>
 80036ac:	6863      	ldr	r3, [r4, #4]
 80036ae:	1ac0      	subs	r0, r0, r3
 80036b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <__sflush_r+0x4a>
 80036b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036b8:	1ac0      	subs	r0, r0, r3
 80036ba:	0002      	movs	r2, r0
 80036bc:	6a21      	ldr	r1, [r4, #32]
 80036be:	2300      	movs	r3, #0
 80036c0:	0028      	movs	r0, r5
 80036c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80036c4:	47b8      	blx	r7
 80036c6:	89a1      	ldrh	r1, [r4, #12]
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d106      	bne.n	80036da <__sflush_r+0x6a>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	2b1d      	cmp	r3, #29
 80036d0:	d831      	bhi.n	8003736 <__sflush_r+0xc6>
 80036d2:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <__sflush_r+0x114>)
 80036d4:	40da      	lsrs	r2, r3
 80036d6:	07d3      	lsls	r3, r2, #31
 80036d8:	d52d      	bpl.n	8003736 <__sflush_r+0xc6>
 80036da:	2300      	movs	r3, #0
 80036dc:	6063      	str	r3, [r4, #4]
 80036de:	6923      	ldr	r3, [r4, #16]
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	04cb      	lsls	r3, r1, #19
 80036e4:	d505      	bpl.n	80036f2 <__sflush_r+0x82>
 80036e6:	1c43      	adds	r3, r0, #1
 80036e8:	d102      	bne.n	80036f0 <__sflush_r+0x80>
 80036ea:	682b      	ldr	r3, [r5, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d100      	bne.n	80036f2 <__sflush_r+0x82>
 80036f0:	6560      	str	r0, [r4, #84]	; 0x54
 80036f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036f4:	602e      	str	r6, [r5, #0]
 80036f6:	2900      	cmp	r1, #0
 80036f8:	d0c6      	beq.n	8003688 <__sflush_r+0x18>
 80036fa:	0023      	movs	r3, r4
 80036fc:	3344      	adds	r3, #68	; 0x44
 80036fe:	4299      	cmp	r1, r3
 8003700:	d002      	beq.n	8003708 <__sflush_r+0x98>
 8003702:	0028      	movs	r0, r5
 8003704:	f000 f9fc 	bl	8003b00 <_free_r>
 8003708:	2000      	movs	r0, #0
 800370a:	6360      	str	r0, [r4, #52]	; 0x34
 800370c:	e7bd      	b.n	800368a <__sflush_r+0x1a>
 800370e:	2301      	movs	r3, #1
 8003710:	0028      	movs	r0, r5
 8003712:	6a21      	ldr	r1, [r4, #32]
 8003714:	47b8      	blx	r7
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	d1c5      	bne.n	80036a6 <__sflush_r+0x36>
 800371a:	682b      	ldr	r3, [r5, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0c2      	beq.n	80036a6 <__sflush_r+0x36>
 8003720:	2b1d      	cmp	r3, #29
 8003722:	d001      	beq.n	8003728 <__sflush_r+0xb8>
 8003724:	2b16      	cmp	r3, #22
 8003726:	d101      	bne.n	800372c <__sflush_r+0xbc>
 8003728:	602e      	str	r6, [r5, #0]
 800372a:	e7ad      	b.n	8003688 <__sflush_r+0x18>
 800372c:	2340      	movs	r3, #64	; 0x40
 800372e:	89a2      	ldrh	r2, [r4, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	e7a9      	b.n	800368a <__sflush_r+0x1a>
 8003736:	2340      	movs	r3, #64	; 0x40
 8003738:	430b      	orrs	r3, r1
 800373a:	e7fa      	b.n	8003732 <__sflush_r+0xc2>
 800373c:	690f      	ldr	r7, [r1, #16]
 800373e:	2f00      	cmp	r7, #0
 8003740:	d0a2      	beq.n	8003688 <__sflush_r+0x18>
 8003742:	680a      	ldr	r2, [r1, #0]
 8003744:	600f      	str	r7, [r1, #0]
 8003746:	1bd2      	subs	r2, r2, r7
 8003748:	9201      	str	r2, [sp, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	079b      	lsls	r3, r3, #30
 800374e:	d100      	bne.n	8003752 <__sflush_r+0xe2>
 8003750:	694a      	ldr	r2, [r1, #20]
 8003752:	60a2      	str	r2, [r4, #8]
 8003754:	9b01      	ldr	r3, [sp, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	dc00      	bgt.n	800375c <__sflush_r+0xec>
 800375a:	e795      	b.n	8003688 <__sflush_r+0x18>
 800375c:	003a      	movs	r2, r7
 800375e:	0028      	movs	r0, r5
 8003760:	9b01      	ldr	r3, [sp, #4]
 8003762:	6a21      	ldr	r1, [r4, #32]
 8003764:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003766:	47b0      	blx	r6
 8003768:	2800      	cmp	r0, #0
 800376a:	dc06      	bgt.n	800377a <__sflush_r+0x10a>
 800376c:	2340      	movs	r3, #64	; 0x40
 800376e:	2001      	movs	r0, #1
 8003770:	89a2      	ldrh	r2, [r4, #12]
 8003772:	4240      	negs	r0, r0
 8003774:	4313      	orrs	r3, r2
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	e787      	b.n	800368a <__sflush_r+0x1a>
 800377a:	9b01      	ldr	r3, [sp, #4]
 800377c:	183f      	adds	r7, r7, r0
 800377e:	1a1b      	subs	r3, r3, r0
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	e7e7      	b.n	8003754 <__sflush_r+0xe4>
 8003784:	20400001 	.word	0x20400001

08003788 <_fflush_r>:
 8003788:	690b      	ldr	r3, [r1, #16]
 800378a:	b570      	push	{r4, r5, r6, lr}
 800378c:	0005      	movs	r5, r0
 800378e:	000c      	movs	r4, r1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <_fflush_r+0x12>
 8003794:	2500      	movs	r5, #0
 8003796:	0028      	movs	r0, r5
 8003798:	bd70      	pop	{r4, r5, r6, pc}
 800379a:	2800      	cmp	r0, #0
 800379c:	d004      	beq.n	80037a8 <_fflush_r+0x20>
 800379e:	6983      	ldr	r3, [r0, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <_fflush_r+0x20>
 80037a4:	f000 f892 	bl	80038cc <__sinit>
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <_fflush_r+0x74>)
 80037aa:	429c      	cmp	r4, r3
 80037ac:	d11b      	bne.n	80037e6 <_fflush_r+0x5e>
 80037ae:	686c      	ldr	r4, [r5, #4]
 80037b0:	220c      	movs	r2, #12
 80037b2:	5ea3      	ldrsh	r3, [r4, r2]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ed      	beq.n	8003794 <_fflush_r+0xc>
 80037b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037ba:	07d2      	lsls	r2, r2, #31
 80037bc:	d404      	bmi.n	80037c8 <_fflush_r+0x40>
 80037be:	059b      	lsls	r3, r3, #22
 80037c0:	d402      	bmi.n	80037c8 <_fflush_r+0x40>
 80037c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037c4:	f000 f923 	bl	8003a0e <__retarget_lock_acquire_recursive>
 80037c8:	0028      	movs	r0, r5
 80037ca:	0021      	movs	r1, r4
 80037cc:	f7ff ff50 	bl	8003670 <__sflush_r>
 80037d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037d2:	0005      	movs	r5, r0
 80037d4:	07db      	lsls	r3, r3, #31
 80037d6:	d4de      	bmi.n	8003796 <_fflush_r+0xe>
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	059b      	lsls	r3, r3, #22
 80037dc:	d4db      	bmi.n	8003796 <_fflush_r+0xe>
 80037de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037e0:	f000 f916 	bl	8003a10 <__retarget_lock_release_recursive>
 80037e4:	e7d7      	b.n	8003796 <_fflush_r+0xe>
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <_fflush_r+0x78>)
 80037e8:	429c      	cmp	r4, r3
 80037ea:	d101      	bne.n	80037f0 <_fflush_r+0x68>
 80037ec:	68ac      	ldr	r4, [r5, #8]
 80037ee:	e7df      	b.n	80037b0 <_fflush_r+0x28>
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <_fflush_r+0x7c>)
 80037f2:	429c      	cmp	r4, r3
 80037f4:	d1dc      	bne.n	80037b0 <_fflush_r+0x28>
 80037f6:	68ec      	ldr	r4, [r5, #12]
 80037f8:	e7da      	b.n	80037b0 <_fflush_r+0x28>
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	080046f8 	.word	0x080046f8
 8003800:	08004718 	.word	0x08004718
 8003804:	080046d8 	.word	0x080046d8

08003808 <std>:
 8003808:	2300      	movs	r3, #0
 800380a:	b510      	push	{r4, lr}
 800380c:	0004      	movs	r4, r0
 800380e:	6003      	str	r3, [r0, #0]
 8003810:	6043      	str	r3, [r0, #4]
 8003812:	6083      	str	r3, [r0, #8]
 8003814:	8181      	strh	r1, [r0, #12]
 8003816:	6643      	str	r3, [r0, #100]	; 0x64
 8003818:	0019      	movs	r1, r3
 800381a:	81c2      	strh	r2, [r0, #14]
 800381c:	6103      	str	r3, [r0, #16]
 800381e:	6143      	str	r3, [r0, #20]
 8003820:	6183      	str	r3, [r0, #24]
 8003822:	2208      	movs	r2, #8
 8003824:	305c      	adds	r0, #92	; 0x5c
 8003826:	f7ff fe39 	bl	800349c <memset>
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <std+0x38>)
 800382c:	6263      	str	r3, [r4, #36]	; 0x24
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <std+0x3c>)
 8003830:	6224      	str	r4, [r4, #32]
 8003832:	62a3      	str	r3, [r4, #40]	; 0x28
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <std+0x40>)
 8003836:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <std+0x44>)
 800383a:	6323      	str	r3, [r4, #48]	; 0x30
 800383c:	bd10      	pop	{r4, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	0800423d 	.word	0x0800423d
 8003844:	08004265 	.word	0x08004265
 8003848:	0800429d 	.word	0x0800429d
 800384c:	080042c9 	.word	0x080042c9

08003850 <_cleanup_r>:
 8003850:	b510      	push	{r4, lr}
 8003852:	4902      	ldr	r1, [pc, #8]	; (800385c <_cleanup_r+0xc>)
 8003854:	f000 f8ba 	bl	80039cc <_fwalk_reent>
 8003858:	bd10      	pop	{r4, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	08003789 	.word	0x08003789

08003860 <__sfmoreglue>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	2568      	movs	r5, #104	; 0x68
 8003864:	1e4a      	subs	r2, r1, #1
 8003866:	4355      	muls	r5, r2
 8003868:	000e      	movs	r6, r1
 800386a:	0029      	movs	r1, r5
 800386c:	3174      	adds	r1, #116	; 0x74
 800386e:	f000 f991 	bl	8003b94 <_malloc_r>
 8003872:	1e04      	subs	r4, r0, #0
 8003874:	d008      	beq.n	8003888 <__sfmoreglue+0x28>
 8003876:	2100      	movs	r1, #0
 8003878:	002a      	movs	r2, r5
 800387a:	6001      	str	r1, [r0, #0]
 800387c:	6046      	str	r6, [r0, #4]
 800387e:	300c      	adds	r0, #12
 8003880:	60a0      	str	r0, [r4, #8]
 8003882:	3268      	adds	r2, #104	; 0x68
 8003884:	f7ff fe0a 	bl	800349c <memset>
 8003888:	0020      	movs	r0, r4
 800388a:	bd70      	pop	{r4, r5, r6, pc}

0800388c <__sfp_lock_acquire>:
 800388c:	b510      	push	{r4, lr}
 800388e:	4802      	ldr	r0, [pc, #8]	; (8003898 <__sfp_lock_acquire+0xc>)
 8003890:	f000 f8bd 	bl	8003a0e <__retarget_lock_acquire_recursive>
 8003894:	bd10      	pop	{r4, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	200001ac 	.word	0x200001ac

0800389c <__sfp_lock_release>:
 800389c:	b510      	push	{r4, lr}
 800389e:	4802      	ldr	r0, [pc, #8]	; (80038a8 <__sfp_lock_release+0xc>)
 80038a0:	f000 f8b6 	bl	8003a10 <__retarget_lock_release_recursive>
 80038a4:	bd10      	pop	{r4, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	200001ac 	.word	0x200001ac

080038ac <__sinit_lock_acquire>:
 80038ac:	b510      	push	{r4, lr}
 80038ae:	4802      	ldr	r0, [pc, #8]	; (80038b8 <__sinit_lock_acquire+0xc>)
 80038b0:	f000 f8ad 	bl	8003a0e <__retarget_lock_acquire_recursive>
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	200001a7 	.word	0x200001a7

080038bc <__sinit_lock_release>:
 80038bc:	b510      	push	{r4, lr}
 80038be:	4802      	ldr	r0, [pc, #8]	; (80038c8 <__sinit_lock_release+0xc>)
 80038c0:	f000 f8a6 	bl	8003a10 <__retarget_lock_release_recursive>
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	200001a7 	.word	0x200001a7

080038cc <__sinit>:
 80038cc:	b513      	push	{r0, r1, r4, lr}
 80038ce:	0004      	movs	r4, r0
 80038d0:	f7ff ffec 	bl	80038ac <__sinit_lock_acquire>
 80038d4:	69a3      	ldr	r3, [r4, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <__sinit+0x14>
 80038da:	f7ff ffef 	bl	80038bc <__sinit_lock_release>
 80038de:	bd13      	pop	{r0, r1, r4, pc}
 80038e0:	64a3      	str	r3, [r4, #72]	; 0x48
 80038e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80038e4:	6523      	str	r3, [r4, #80]	; 0x50
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <__sinit+0x68>)
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <__sinit+0x6c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	d101      	bne.n	80038f8 <__sinit+0x2c>
 80038f4:	2301      	movs	r3, #1
 80038f6:	61a3      	str	r3, [r4, #24]
 80038f8:	0020      	movs	r0, r4
 80038fa:	f000 f81f 	bl	800393c <__sfp>
 80038fe:	6060      	str	r0, [r4, #4]
 8003900:	0020      	movs	r0, r4
 8003902:	f000 f81b 	bl	800393c <__sfp>
 8003906:	60a0      	str	r0, [r4, #8]
 8003908:	0020      	movs	r0, r4
 800390a:	f000 f817 	bl	800393c <__sfp>
 800390e:	2200      	movs	r2, #0
 8003910:	2104      	movs	r1, #4
 8003912:	60e0      	str	r0, [r4, #12]
 8003914:	6860      	ldr	r0, [r4, #4]
 8003916:	f7ff ff77 	bl	8003808 <std>
 800391a:	2201      	movs	r2, #1
 800391c:	2109      	movs	r1, #9
 800391e:	68a0      	ldr	r0, [r4, #8]
 8003920:	f7ff ff72 	bl	8003808 <std>
 8003924:	2202      	movs	r2, #2
 8003926:	2112      	movs	r1, #18
 8003928:	68e0      	ldr	r0, [r4, #12]
 800392a:	f7ff ff6d 	bl	8003808 <std>
 800392e:	2301      	movs	r3, #1
 8003930:	61a3      	str	r3, [r4, #24]
 8003932:	e7d2      	b.n	80038da <__sinit+0xe>
 8003934:	080046d4 	.word	0x080046d4
 8003938:	08003851 	.word	0x08003851

0800393c <__sfp>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	0007      	movs	r7, r0
 8003940:	f7ff ffa4 	bl	800388c <__sfp_lock_acquire>
 8003944:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <__sfp+0x88>)
 8003946:	681e      	ldr	r6, [r3, #0]
 8003948:	69b3      	ldr	r3, [r6, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <__sfp+0x18>
 800394e:	0030      	movs	r0, r6
 8003950:	f7ff ffbc 	bl	80038cc <__sinit>
 8003954:	3648      	adds	r6, #72	; 0x48
 8003956:	68b4      	ldr	r4, [r6, #8]
 8003958:	6873      	ldr	r3, [r6, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	d504      	bpl.n	8003968 <__sfp+0x2c>
 800395e:	6833      	ldr	r3, [r6, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d022      	beq.n	80039aa <__sfp+0x6e>
 8003964:	6836      	ldr	r6, [r6, #0]
 8003966:	e7f6      	b.n	8003956 <__sfp+0x1a>
 8003968:	220c      	movs	r2, #12
 800396a:	5ea5      	ldrsh	r5, [r4, r2]
 800396c:	2d00      	cmp	r5, #0
 800396e:	d11a      	bne.n	80039a6 <__sfp+0x6a>
 8003970:	0020      	movs	r0, r4
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <__sfp+0x8c>)
 8003974:	3058      	adds	r0, #88	; 0x58
 8003976:	60e3      	str	r3, [r4, #12]
 8003978:	6665      	str	r5, [r4, #100]	; 0x64
 800397a:	f000 f847 	bl	8003a0c <__retarget_lock_init_recursive>
 800397e:	f7ff ff8d 	bl	800389c <__sfp_lock_release>
 8003982:	0020      	movs	r0, r4
 8003984:	2208      	movs	r2, #8
 8003986:	0029      	movs	r1, r5
 8003988:	6025      	str	r5, [r4, #0]
 800398a:	60a5      	str	r5, [r4, #8]
 800398c:	6065      	str	r5, [r4, #4]
 800398e:	6125      	str	r5, [r4, #16]
 8003990:	6165      	str	r5, [r4, #20]
 8003992:	61a5      	str	r5, [r4, #24]
 8003994:	305c      	adds	r0, #92	; 0x5c
 8003996:	f7ff fd81 	bl	800349c <memset>
 800399a:	6365      	str	r5, [r4, #52]	; 0x34
 800399c:	63a5      	str	r5, [r4, #56]	; 0x38
 800399e:	64a5      	str	r5, [r4, #72]	; 0x48
 80039a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80039a2:	0020      	movs	r0, r4
 80039a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a6:	3468      	adds	r4, #104	; 0x68
 80039a8:	e7d7      	b.n	800395a <__sfp+0x1e>
 80039aa:	2104      	movs	r1, #4
 80039ac:	0038      	movs	r0, r7
 80039ae:	f7ff ff57 	bl	8003860 <__sfmoreglue>
 80039b2:	1e04      	subs	r4, r0, #0
 80039b4:	6030      	str	r0, [r6, #0]
 80039b6:	d1d5      	bne.n	8003964 <__sfp+0x28>
 80039b8:	f7ff ff70 	bl	800389c <__sfp_lock_release>
 80039bc:	230c      	movs	r3, #12
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	e7ef      	b.n	80039a2 <__sfp+0x66>
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	080046d4 	.word	0x080046d4
 80039c8:	ffff0001 	.word	0xffff0001

080039cc <_fwalk_reent>:
 80039cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039ce:	0004      	movs	r4, r0
 80039d0:	0006      	movs	r6, r0
 80039d2:	2700      	movs	r7, #0
 80039d4:	9101      	str	r1, [sp, #4]
 80039d6:	3448      	adds	r4, #72	; 0x48
 80039d8:	6863      	ldr	r3, [r4, #4]
 80039da:	68a5      	ldr	r5, [r4, #8]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	9b00      	ldr	r3, [sp, #0]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	d504      	bpl.n	80039f0 <_fwalk_reent+0x24>
 80039e6:	6824      	ldr	r4, [r4, #0]
 80039e8:	2c00      	cmp	r4, #0
 80039ea:	d1f5      	bne.n	80039d8 <_fwalk_reent+0xc>
 80039ec:	0038      	movs	r0, r7
 80039ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039f0:	89ab      	ldrh	r3, [r5, #12]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d908      	bls.n	8003a08 <_fwalk_reent+0x3c>
 80039f6:	220e      	movs	r2, #14
 80039f8:	5eab      	ldrsh	r3, [r5, r2]
 80039fa:	3301      	adds	r3, #1
 80039fc:	d004      	beq.n	8003a08 <_fwalk_reent+0x3c>
 80039fe:	0029      	movs	r1, r5
 8003a00:	0030      	movs	r0, r6
 8003a02:	9b01      	ldr	r3, [sp, #4]
 8003a04:	4798      	blx	r3
 8003a06:	4307      	orrs	r7, r0
 8003a08:	3568      	adds	r5, #104	; 0x68
 8003a0a:	e7e8      	b.n	80039de <_fwalk_reent+0x12>

08003a0c <__retarget_lock_init_recursive>:
 8003a0c:	4770      	bx	lr

08003a0e <__retarget_lock_acquire_recursive>:
 8003a0e:	4770      	bx	lr

08003a10 <__retarget_lock_release_recursive>:
 8003a10:	4770      	bx	lr
	...

08003a14 <__swhatbuf_r>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	000e      	movs	r6, r1
 8003a18:	001d      	movs	r5, r3
 8003a1a:	230e      	movs	r3, #14
 8003a1c:	5ec9      	ldrsh	r1, [r1, r3]
 8003a1e:	0014      	movs	r4, r2
 8003a20:	b096      	sub	sp, #88	; 0x58
 8003a22:	2900      	cmp	r1, #0
 8003a24:	da07      	bge.n	8003a36 <__swhatbuf_r+0x22>
 8003a26:	2300      	movs	r3, #0
 8003a28:	602b      	str	r3, [r5, #0]
 8003a2a:	89b3      	ldrh	r3, [r6, #12]
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	d411      	bmi.n	8003a54 <__swhatbuf_r+0x40>
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	e00f      	b.n	8003a56 <__swhatbuf_r+0x42>
 8003a36:	466a      	mov	r2, sp
 8003a38:	f000 fd40 	bl	80044bc <_fstat_r>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	dbf2      	blt.n	8003a26 <__swhatbuf_r+0x12>
 8003a40:	23f0      	movs	r3, #240	; 0xf0
 8003a42:	9901      	ldr	r1, [sp, #4]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	4019      	ands	r1, r3
 8003a48:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <__swhatbuf_r+0x4c>)
 8003a4a:	18c9      	adds	r1, r1, r3
 8003a4c:	424b      	negs	r3, r1
 8003a4e:	4159      	adcs	r1, r3
 8003a50:	6029      	str	r1, [r5, #0]
 8003a52:	e7ed      	b.n	8003a30 <__swhatbuf_r+0x1c>
 8003a54:	2340      	movs	r3, #64	; 0x40
 8003a56:	2000      	movs	r0, #0
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	b016      	add	sp, #88	; 0x58
 8003a5c:	bd70      	pop	{r4, r5, r6, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	ffffe000 	.word	0xffffe000

08003a64 <__smakebuf_r>:
 8003a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a66:	2602      	movs	r6, #2
 8003a68:	898b      	ldrh	r3, [r1, #12]
 8003a6a:	0005      	movs	r5, r0
 8003a6c:	000c      	movs	r4, r1
 8003a6e:	4233      	tst	r3, r6
 8003a70:	d006      	beq.n	8003a80 <__smakebuf_r+0x1c>
 8003a72:	0023      	movs	r3, r4
 8003a74:	3347      	adds	r3, #71	; 0x47
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	6123      	str	r3, [r4, #16]
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	6163      	str	r3, [r4, #20]
 8003a7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003a80:	466a      	mov	r2, sp
 8003a82:	ab01      	add	r3, sp, #4
 8003a84:	f7ff ffc6 	bl	8003a14 <__swhatbuf_r>
 8003a88:	9900      	ldr	r1, [sp, #0]
 8003a8a:	0007      	movs	r7, r0
 8003a8c:	0028      	movs	r0, r5
 8003a8e:	f000 f881 	bl	8003b94 <_malloc_r>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d108      	bne.n	8003aa8 <__smakebuf_r+0x44>
 8003a96:	220c      	movs	r2, #12
 8003a98:	5ea3      	ldrsh	r3, [r4, r2]
 8003a9a:	059a      	lsls	r2, r3, #22
 8003a9c:	d4ef      	bmi.n	8003a7e <__smakebuf_r+0x1a>
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	431e      	orrs	r6, r3
 8003aa4:	81a6      	strh	r6, [r4, #12]
 8003aa6:	e7e4      	b.n	8003a72 <__smakebuf_r+0xe>
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <__smakebuf_r+0x84>)
 8003aaa:	62ab      	str	r3, [r5, #40]	; 0x28
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	89a2      	ldrh	r2, [r4, #12]
 8003ab0:	6020      	str	r0, [r4, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	81a3      	strh	r3, [r4, #12]
 8003ab6:	9b00      	ldr	r3, [sp, #0]
 8003ab8:	6120      	str	r0, [r4, #16]
 8003aba:	6163      	str	r3, [r4, #20]
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <__smakebuf_r+0x7a>
 8003ac2:	0028      	movs	r0, r5
 8003ac4:	230e      	movs	r3, #14
 8003ac6:	5ee1      	ldrsh	r1, [r4, r3]
 8003ac8:	f000 fd0a 	bl	80044e0 <_isatty_r>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d006      	beq.n	8003ade <__smakebuf_r+0x7a>
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	4393      	bics	r3, r2
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	2301      	movs	r3, #1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	89a0      	ldrh	r0, [r4, #12]
 8003ae0:	4307      	orrs	r7, r0
 8003ae2:	81a7      	strh	r7, [r4, #12]
 8003ae4:	e7cb      	b.n	8003a7e <__smakebuf_r+0x1a>
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	08003851 	.word	0x08003851

08003aec <malloc>:
 8003aec:	b510      	push	{r4, lr}
 8003aee:	4b03      	ldr	r3, [pc, #12]	; (8003afc <malloc+0x10>)
 8003af0:	0001      	movs	r1, r0
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	f000 f84e 	bl	8003b94 <_malloc_r>
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	20000014 	.word	0x20000014

08003b00 <_free_r>:
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	0005      	movs	r5, r0
 8003b04:	2900      	cmp	r1, #0
 8003b06:	d010      	beq.n	8003b2a <_free_r+0x2a>
 8003b08:	1f0c      	subs	r4, r1, #4
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	da00      	bge.n	8003b12 <_free_r+0x12>
 8003b10:	18e4      	adds	r4, r4, r3
 8003b12:	0028      	movs	r0, r5
 8003b14:	f000 fd16 	bl	8004544 <__malloc_lock>
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <_free_r+0x90>)
 8003b1a:	6813      	ldr	r3, [r2, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <_free_r+0x2c>
 8003b20:	6063      	str	r3, [r4, #4]
 8003b22:	6014      	str	r4, [r2, #0]
 8003b24:	0028      	movs	r0, r5
 8003b26:	f000 fd15 	bl	8004554 <__malloc_unlock>
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	42a3      	cmp	r3, r4
 8003b2e:	d908      	bls.n	8003b42 <_free_r+0x42>
 8003b30:	6821      	ldr	r1, [r4, #0]
 8003b32:	1860      	adds	r0, r4, r1
 8003b34:	4283      	cmp	r3, r0
 8003b36:	d1f3      	bne.n	8003b20 <_free_r+0x20>
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	1841      	adds	r1, r0, r1
 8003b3e:	6021      	str	r1, [r4, #0]
 8003b40:	e7ee      	b.n	8003b20 <_free_r+0x20>
 8003b42:	001a      	movs	r2, r3
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <_free_r+0x4e>
 8003b4a:	42a3      	cmp	r3, r4
 8003b4c:	d9f9      	bls.n	8003b42 <_free_r+0x42>
 8003b4e:	6811      	ldr	r1, [r2, #0]
 8003b50:	1850      	adds	r0, r2, r1
 8003b52:	42a0      	cmp	r0, r4
 8003b54:	d10b      	bne.n	8003b6e <_free_r+0x6e>
 8003b56:	6820      	ldr	r0, [r4, #0]
 8003b58:	1809      	adds	r1, r1, r0
 8003b5a:	1850      	adds	r0, r2, r1
 8003b5c:	6011      	str	r1, [r2, #0]
 8003b5e:	4283      	cmp	r3, r0
 8003b60:	d1e0      	bne.n	8003b24 <_free_r+0x24>
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	1841      	adds	r1, r0, r1
 8003b68:	6011      	str	r1, [r2, #0]
 8003b6a:	6053      	str	r3, [r2, #4]
 8003b6c:	e7da      	b.n	8003b24 <_free_r+0x24>
 8003b6e:	42a0      	cmp	r0, r4
 8003b70:	d902      	bls.n	8003b78 <_free_r+0x78>
 8003b72:	230c      	movs	r3, #12
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	e7d5      	b.n	8003b24 <_free_r+0x24>
 8003b78:	6821      	ldr	r1, [r4, #0]
 8003b7a:	1860      	adds	r0, r4, r1
 8003b7c:	4283      	cmp	r3, r0
 8003b7e:	d103      	bne.n	8003b88 <_free_r+0x88>
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	1841      	adds	r1, r0, r1
 8003b86:	6021      	str	r1, [r4, #0]
 8003b88:	6063      	str	r3, [r4, #4]
 8003b8a:	6054      	str	r4, [r2, #4]
 8003b8c:	e7ca      	b.n	8003b24 <_free_r+0x24>
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	200000bc 	.word	0x200000bc

08003b94 <_malloc_r>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	2303      	movs	r3, #3
 8003b98:	1ccd      	adds	r5, r1, #3
 8003b9a:	439d      	bics	r5, r3
 8003b9c:	3508      	adds	r5, #8
 8003b9e:	0006      	movs	r6, r0
 8003ba0:	2d0c      	cmp	r5, #12
 8003ba2:	d21f      	bcs.n	8003be4 <_malloc_r+0x50>
 8003ba4:	250c      	movs	r5, #12
 8003ba6:	42a9      	cmp	r1, r5
 8003ba8:	d81e      	bhi.n	8003be8 <_malloc_r+0x54>
 8003baa:	0030      	movs	r0, r6
 8003bac:	f000 fcca 	bl	8004544 <__malloc_lock>
 8003bb0:	4925      	ldr	r1, [pc, #148]	; (8003c48 <_malloc_r+0xb4>)
 8003bb2:	680a      	ldr	r2, [r1, #0]
 8003bb4:	0014      	movs	r4, r2
 8003bb6:	2c00      	cmp	r4, #0
 8003bb8:	d11a      	bne.n	8003bf0 <_malloc_r+0x5c>
 8003bba:	4f24      	ldr	r7, [pc, #144]	; (8003c4c <_malloc_r+0xb8>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <_malloc_r+0x38>
 8003bc2:	0021      	movs	r1, r4
 8003bc4:	0030      	movs	r0, r6
 8003bc6:	f000 fb27 	bl	8004218 <_sbrk_r>
 8003bca:	6038      	str	r0, [r7, #0]
 8003bcc:	0029      	movs	r1, r5
 8003bce:	0030      	movs	r0, r6
 8003bd0:	f000 fb22 	bl	8004218 <_sbrk_r>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d12b      	bne.n	8003c30 <_malloc_r+0x9c>
 8003bd8:	230c      	movs	r3, #12
 8003bda:	0030      	movs	r0, r6
 8003bdc:	6033      	str	r3, [r6, #0]
 8003bde:	f000 fcb9 	bl	8004554 <__malloc_unlock>
 8003be2:	e003      	b.n	8003bec <_malloc_r+0x58>
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	dade      	bge.n	8003ba6 <_malloc_r+0x12>
 8003be8:	230c      	movs	r3, #12
 8003bea:	6033      	str	r3, [r6, #0]
 8003bec:	2000      	movs	r0, #0
 8003bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	1b5b      	subs	r3, r3, r5
 8003bf4:	d419      	bmi.n	8003c2a <_malloc_r+0x96>
 8003bf6:	2b0b      	cmp	r3, #11
 8003bf8:	d903      	bls.n	8003c02 <_malloc_r+0x6e>
 8003bfa:	6023      	str	r3, [r4, #0]
 8003bfc:	18e4      	adds	r4, r4, r3
 8003bfe:	6025      	str	r5, [r4, #0]
 8003c00:	e003      	b.n	8003c0a <_malloc_r+0x76>
 8003c02:	6863      	ldr	r3, [r4, #4]
 8003c04:	42a2      	cmp	r2, r4
 8003c06:	d10e      	bne.n	8003c26 <_malloc_r+0x92>
 8003c08:	600b      	str	r3, [r1, #0]
 8003c0a:	0030      	movs	r0, r6
 8003c0c:	f000 fca2 	bl	8004554 <__malloc_unlock>
 8003c10:	0020      	movs	r0, r4
 8003c12:	2207      	movs	r2, #7
 8003c14:	300b      	adds	r0, #11
 8003c16:	1d23      	adds	r3, r4, #4
 8003c18:	4390      	bics	r0, r2
 8003c1a:	1ac2      	subs	r2, r0, r3
 8003c1c:	4298      	cmp	r0, r3
 8003c1e:	d0e6      	beq.n	8003bee <_malloc_r+0x5a>
 8003c20:	1a1b      	subs	r3, r3, r0
 8003c22:	50a3      	str	r3, [r4, r2]
 8003c24:	e7e3      	b.n	8003bee <_malloc_r+0x5a>
 8003c26:	6053      	str	r3, [r2, #4]
 8003c28:	e7ef      	b.n	8003c0a <_malloc_r+0x76>
 8003c2a:	0022      	movs	r2, r4
 8003c2c:	6864      	ldr	r4, [r4, #4]
 8003c2e:	e7c2      	b.n	8003bb6 <_malloc_r+0x22>
 8003c30:	2303      	movs	r3, #3
 8003c32:	1cc4      	adds	r4, r0, #3
 8003c34:	439c      	bics	r4, r3
 8003c36:	42a0      	cmp	r0, r4
 8003c38:	d0e1      	beq.n	8003bfe <_malloc_r+0x6a>
 8003c3a:	1a21      	subs	r1, r4, r0
 8003c3c:	0030      	movs	r0, r6
 8003c3e:	f000 faeb 	bl	8004218 <_sbrk_r>
 8003c42:	1c43      	adds	r3, r0, #1
 8003c44:	d1db      	bne.n	8003bfe <_malloc_r+0x6a>
 8003c46:	e7c7      	b.n	8003bd8 <_malloc_r+0x44>
 8003c48:	200000bc 	.word	0x200000bc
 8003c4c:	200000c0 	.word	0x200000c0

08003c50 <__sfputc_r>:
 8003c50:	6893      	ldr	r3, [r2, #8]
 8003c52:	b510      	push	{r4, lr}
 8003c54:	3b01      	subs	r3, #1
 8003c56:	6093      	str	r3, [r2, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da04      	bge.n	8003c66 <__sfputc_r+0x16>
 8003c5c:	6994      	ldr	r4, [r2, #24]
 8003c5e:	42a3      	cmp	r3, r4
 8003c60:	db07      	blt.n	8003c72 <__sfputc_r+0x22>
 8003c62:	290a      	cmp	r1, #10
 8003c64:	d005      	beq.n	8003c72 <__sfputc_r+0x22>
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	1c58      	adds	r0, r3, #1
 8003c6a:	6010      	str	r0, [r2, #0]
 8003c6c:	7019      	strb	r1, [r3, #0]
 8003c6e:	0008      	movs	r0, r1
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	f000 fb2f 	bl	80042d4 <__swbuf_r>
 8003c76:	0001      	movs	r1, r0
 8003c78:	e7f9      	b.n	8003c6e <__sfputc_r+0x1e>

08003c7a <__sfputs_r>:
 8003c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7c:	0006      	movs	r6, r0
 8003c7e:	000f      	movs	r7, r1
 8003c80:	0014      	movs	r4, r2
 8003c82:	18d5      	adds	r5, r2, r3
 8003c84:	42ac      	cmp	r4, r5
 8003c86:	d101      	bne.n	8003c8c <__sfputs_r+0x12>
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e007      	b.n	8003c9c <__sfputs_r+0x22>
 8003c8c:	7821      	ldrb	r1, [r4, #0]
 8003c8e:	003a      	movs	r2, r7
 8003c90:	0030      	movs	r0, r6
 8003c92:	f7ff ffdd 	bl	8003c50 <__sfputc_r>
 8003c96:	3401      	adds	r4, #1
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d1f3      	bne.n	8003c84 <__sfputs_r+0xa>
 8003c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ca0 <_vfiprintf_r>:
 8003ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca2:	b0a1      	sub	sp, #132	; 0x84
 8003ca4:	0006      	movs	r6, r0
 8003ca6:	000c      	movs	r4, r1
 8003ca8:	001f      	movs	r7, r3
 8003caa:	9203      	str	r2, [sp, #12]
 8003cac:	2800      	cmp	r0, #0
 8003cae:	d004      	beq.n	8003cba <_vfiprintf_r+0x1a>
 8003cb0:	6983      	ldr	r3, [r0, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <_vfiprintf_r+0x1a>
 8003cb6:	f7ff fe09 	bl	80038cc <__sinit>
 8003cba:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <_vfiprintf_r+0x254>)
 8003cbc:	429c      	cmp	r4, r3
 8003cbe:	d11c      	bne.n	8003cfa <_vfiprintf_r+0x5a>
 8003cc0:	6874      	ldr	r4, [r6, #4]
 8003cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cc4:	07db      	lsls	r3, r3, #31
 8003cc6:	d405      	bmi.n	8003cd4 <_vfiprintf_r+0x34>
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	059b      	lsls	r3, r3, #22
 8003ccc:	d402      	bmi.n	8003cd4 <_vfiprintf_r+0x34>
 8003cce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cd0:	f7ff fe9d 	bl	8003a0e <__retarget_lock_acquire_recursive>
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	071b      	lsls	r3, r3, #28
 8003cd8:	d502      	bpl.n	8003ce0 <_vfiprintf_r+0x40>
 8003cda:	6923      	ldr	r3, [r4, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d11d      	bne.n	8003d1c <_vfiprintf_r+0x7c>
 8003ce0:	0021      	movs	r1, r4
 8003ce2:	0030      	movs	r0, r6
 8003ce4:	f000 fb60 	bl	80043a8 <__swsetup_r>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d017      	beq.n	8003d1c <_vfiprintf_r+0x7c>
 8003cec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cee:	07db      	lsls	r3, r3, #31
 8003cf0:	d50d      	bpl.n	8003d0e <_vfiprintf_r+0x6e>
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	4240      	negs	r0, r0
 8003cf6:	b021      	add	sp, #132	; 0x84
 8003cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cfa:	4b7f      	ldr	r3, [pc, #508]	; (8003ef8 <_vfiprintf_r+0x258>)
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	d101      	bne.n	8003d04 <_vfiprintf_r+0x64>
 8003d00:	68b4      	ldr	r4, [r6, #8]
 8003d02:	e7de      	b.n	8003cc2 <_vfiprintf_r+0x22>
 8003d04:	4b7d      	ldr	r3, [pc, #500]	; (8003efc <_vfiprintf_r+0x25c>)
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d1db      	bne.n	8003cc2 <_vfiprintf_r+0x22>
 8003d0a:	68f4      	ldr	r4, [r6, #12]
 8003d0c:	e7d9      	b.n	8003cc2 <_vfiprintf_r+0x22>
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	059b      	lsls	r3, r3, #22
 8003d12:	d4ee      	bmi.n	8003cf2 <_vfiprintf_r+0x52>
 8003d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d16:	f7ff fe7b 	bl	8003a10 <__retarget_lock_release_recursive>
 8003d1a:	e7ea      	b.n	8003cf2 <_vfiprintf_r+0x52>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	ad08      	add	r5, sp, #32
 8003d20:	616b      	str	r3, [r5, #20]
 8003d22:	3320      	adds	r3, #32
 8003d24:	766b      	strb	r3, [r5, #25]
 8003d26:	3310      	adds	r3, #16
 8003d28:	76ab      	strb	r3, [r5, #26]
 8003d2a:	9707      	str	r7, [sp, #28]
 8003d2c:	9f03      	ldr	r7, [sp, #12]
 8003d2e:	783b      	ldrb	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <_vfiprintf_r+0x98>
 8003d34:	2b25      	cmp	r3, #37	; 0x25
 8003d36:	d14e      	bne.n	8003dd6 <_vfiprintf_r+0x136>
 8003d38:	9b03      	ldr	r3, [sp, #12]
 8003d3a:	1afb      	subs	r3, r7, r3
 8003d3c:	9305      	str	r3, [sp, #20]
 8003d3e:	9b03      	ldr	r3, [sp, #12]
 8003d40:	429f      	cmp	r7, r3
 8003d42:	d00d      	beq.n	8003d60 <_vfiprintf_r+0xc0>
 8003d44:	9b05      	ldr	r3, [sp, #20]
 8003d46:	0021      	movs	r1, r4
 8003d48:	0030      	movs	r0, r6
 8003d4a:	9a03      	ldr	r2, [sp, #12]
 8003d4c:	f7ff ff95 	bl	8003c7a <__sfputs_r>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d100      	bne.n	8003d56 <_vfiprintf_r+0xb6>
 8003d54:	e0b5      	b.n	8003ec2 <_vfiprintf_r+0x222>
 8003d56:	696a      	ldr	r2, [r5, #20]
 8003d58:	9b05      	ldr	r3, [sp, #20]
 8003d5a:	4694      	mov	ip, r2
 8003d5c:	4463      	add	r3, ip
 8003d5e:	616b      	str	r3, [r5, #20]
 8003d60:	783b      	ldrb	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d100      	bne.n	8003d68 <_vfiprintf_r+0xc8>
 8003d66:	e0ac      	b.n	8003ec2 <_vfiprintf_r+0x222>
 8003d68:	2201      	movs	r2, #1
 8003d6a:	1c7b      	adds	r3, r7, #1
 8003d6c:	9303      	str	r3, [sp, #12]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	4252      	negs	r2, r2
 8003d72:	606a      	str	r2, [r5, #4]
 8003d74:	a904      	add	r1, sp, #16
 8003d76:	3254      	adds	r2, #84	; 0x54
 8003d78:	1852      	adds	r2, r2, r1
 8003d7a:	602b      	str	r3, [r5, #0]
 8003d7c:	60eb      	str	r3, [r5, #12]
 8003d7e:	60ab      	str	r3, [r5, #8]
 8003d80:	7013      	strb	r3, [r2, #0]
 8003d82:	65ab      	str	r3, [r5, #88]	; 0x58
 8003d84:	9b03      	ldr	r3, [sp, #12]
 8003d86:	2205      	movs	r2, #5
 8003d88:	7819      	ldrb	r1, [r3, #0]
 8003d8a:	485d      	ldr	r0, [pc, #372]	; (8003f00 <_vfiprintf_r+0x260>)
 8003d8c:	f000 fbce 	bl	800452c <memchr>
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	1c5f      	adds	r7, r3, #1
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d120      	bne.n	8003dda <_vfiprintf_r+0x13a>
 8003d98:	682a      	ldr	r2, [r5, #0]
 8003d9a:	06d3      	lsls	r3, r2, #27
 8003d9c:	d504      	bpl.n	8003da8 <_vfiprintf_r+0x108>
 8003d9e:	2353      	movs	r3, #83	; 0x53
 8003da0:	a904      	add	r1, sp, #16
 8003da2:	185b      	adds	r3, r3, r1
 8003da4:	2120      	movs	r1, #32
 8003da6:	7019      	strb	r1, [r3, #0]
 8003da8:	0713      	lsls	r3, r2, #28
 8003daa:	d504      	bpl.n	8003db6 <_vfiprintf_r+0x116>
 8003dac:	2353      	movs	r3, #83	; 0x53
 8003dae:	a904      	add	r1, sp, #16
 8003db0:	185b      	adds	r3, r3, r1
 8003db2:	212b      	movs	r1, #43	; 0x2b
 8003db4:	7019      	strb	r1, [r3, #0]
 8003db6:	9b03      	ldr	r3, [sp, #12]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b2a      	cmp	r3, #42	; 0x2a
 8003dbc:	d016      	beq.n	8003dec <_vfiprintf_r+0x14c>
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	68eb      	ldr	r3, [r5, #12]
 8003dc2:	9f03      	ldr	r7, [sp, #12]
 8003dc4:	783a      	ldrb	r2, [r7, #0]
 8003dc6:	1c78      	adds	r0, r7, #1
 8003dc8:	3a30      	subs	r2, #48	; 0x30
 8003dca:	4684      	mov	ip, r0
 8003dcc:	2a09      	cmp	r2, #9
 8003dce:	d94f      	bls.n	8003e70 <_vfiprintf_r+0x1d0>
 8003dd0:	2900      	cmp	r1, #0
 8003dd2:	d111      	bne.n	8003df8 <_vfiprintf_r+0x158>
 8003dd4:	e017      	b.n	8003e06 <_vfiprintf_r+0x166>
 8003dd6:	3701      	adds	r7, #1
 8003dd8:	e7a9      	b.n	8003d2e <_vfiprintf_r+0x8e>
 8003dda:	4b49      	ldr	r3, [pc, #292]	; (8003f00 <_vfiprintf_r+0x260>)
 8003ddc:	682a      	ldr	r2, [r5, #0]
 8003dde:	1ac0      	subs	r0, r0, r3
 8003de0:	2301      	movs	r3, #1
 8003de2:	4083      	lsls	r3, r0
 8003de4:	4313      	orrs	r3, r2
 8003de6:	602b      	str	r3, [r5, #0]
 8003de8:	9703      	str	r7, [sp, #12]
 8003dea:	e7cb      	b.n	8003d84 <_vfiprintf_r+0xe4>
 8003dec:	9b07      	ldr	r3, [sp, #28]
 8003dee:	1d19      	adds	r1, r3, #4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	9107      	str	r1, [sp, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	db01      	blt.n	8003dfc <_vfiprintf_r+0x15c>
 8003df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dfa:	e004      	b.n	8003e06 <_vfiprintf_r+0x166>
 8003dfc:	425b      	negs	r3, r3
 8003dfe:	60eb      	str	r3, [r5, #12]
 8003e00:	2302      	movs	r3, #2
 8003e02:	4313      	orrs	r3, r2
 8003e04:	602b      	str	r3, [r5, #0]
 8003e06:	783b      	ldrb	r3, [r7, #0]
 8003e08:	2b2e      	cmp	r3, #46	; 0x2e
 8003e0a:	d10a      	bne.n	8003e22 <_vfiprintf_r+0x182>
 8003e0c:	787b      	ldrb	r3, [r7, #1]
 8003e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e10:	d137      	bne.n	8003e82 <_vfiprintf_r+0x1e2>
 8003e12:	9b07      	ldr	r3, [sp, #28]
 8003e14:	3702      	adds	r7, #2
 8003e16:	1d1a      	adds	r2, r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	9207      	str	r2, [sp, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	db2d      	blt.n	8003e7c <_vfiprintf_r+0x1dc>
 8003e20:	9309      	str	r3, [sp, #36]	; 0x24
 8003e22:	2203      	movs	r2, #3
 8003e24:	7839      	ldrb	r1, [r7, #0]
 8003e26:	4837      	ldr	r0, [pc, #220]	; (8003f04 <_vfiprintf_r+0x264>)
 8003e28:	f000 fb80 	bl	800452c <memchr>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d007      	beq.n	8003e40 <_vfiprintf_r+0x1a0>
 8003e30:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <_vfiprintf_r+0x264>)
 8003e32:	682a      	ldr	r2, [r5, #0]
 8003e34:	1ac0      	subs	r0, r0, r3
 8003e36:	2340      	movs	r3, #64	; 0x40
 8003e38:	4083      	lsls	r3, r0
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	3701      	adds	r7, #1
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	7839      	ldrb	r1, [r7, #0]
 8003e42:	1c7b      	adds	r3, r7, #1
 8003e44:	2206      	movs	r2, #6
 8003e46:	4830      	ldr	r0, [pc, #192]	; (8003f08 <_vfiprintf_r+0x268>)
 8003e48:	9303      	str	r3, [sp, #12]
 8003e4a:	7629      	strb	r1, [r5, #24]
 8003e4c:	f000 fb6e 	bl	800452c <memchr>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d045      	beq.n	8003ee0 <_vfiprintf_r+0x240>
 8003e54:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <_vfiprintf_r+0x26c>)
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d127      	bne.n	8003eaa <_vfiprintf_r+0x20a>
 8003e5a:	2207      	movs	r2, #7
 8003e5c:	9b07      	ldr	r3, [sp, #28]
 8003e5e:	3307      	adds	r3, #7
 8003e60:	4393      	bics	r3, r2
 8003e62:	3308      	adds	r3, #8
 8003e64:	9307      	str	r3, [sp, #28]
 8003e66:	696b      	ldr	r3, [r5, #20]
 8003e68:	9a04      	ldr	r2, [sp, #16]
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	616b      	str	r3, [r5, #20]
 8003e6e:	e75d      	b.n	8003d2c <_vfiprintf_r+0x8c>
 8003e70:	210a      	movs	r1, #10
 8003e72:	434b      	muls	r3, r1
 8003e74:	4667      	mov	r7, ip
 8003e76:	189b      	adds	r3, r3, r2
 8003e78:	3909      	subs	r1, #9
 8003e7a:	e7a3      	b.n	8003dc4 <_vfiprintf_r+0x124>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	425b      	negs	r3, r3
 8003e80:	e7ce      	b.n	8003e20 <_vfiprintf_r+0x180>
 8003e82:	2300      	movs	r3, #0
 8003e84:	001a      	movs	r2, r3
 8003e86:	3701      	adds	r7, #1
 8003e88:	606b      	str	r3, [r5, #4]
 8003e8a:	7839      	ldrb	r1, [r7, #0]
 8003e8c:	1c78      	adds	r0, r7, #1
 8003e8e:	3930      	subs	r1, #48	; 0x30
 8003e90:	4684      	mov	ip, r0
 8003e92:	2909      	cmp	r1, #9
 8003e94:	d903      	bls.n	8003e9e <_vfiprintf_r+0x1fe>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0c3      	beq.n	8003e22 <_vfiprintf_r+0x182>
 8003e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8003e9c:	e7c1      	b.n	8003e22 <_vfiprintf_r+0x182>
 8003e9e:	230a      	movs	r3, #10
 8003ea0:	435a      	muls	r2, r3
 8003ea2:	4667      	mov	r7, ip
 8003ea4:	1852      	adds	r2, r2, r1
 8003ea6:	3b09      	subs	r3, #9
 8003ea8:	e7ef      	b.n	8003e8a <_vfiprintf_r+0x1ea>
 8003eaa:	ab07      	add	r3, sp, #28
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	0022      	movs	r2, r4
 8003eb0:	0029      	movs	r1, r5
 8003eb2:	0030      	movs	r0, r6
 8003eb4:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <_vfiprintf_r+0x270>)
 8003eb6:	e000      	b.n	8003eba <_vfiprintf_r+0x21a>
 8003eb8:	bf00      	nop
 8003eba:	9004      	str	r0, [sp, #16]
 8003ebc:	9b04      	ldr	r3, [sp, #16]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	d1d1      	bne.n	8003e66 <_vfiprintf_r+0x1c6>
 8003ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ec4:	07db      	lsls	r3, r3, #31
 8003ec6:	d405      	bmi.n	8003ed4 <_vfiprintf_r+0x234>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	059b      	lsls	r3, r3, #22
 8003ecc:	d402      	bmi.n	8003ed4 <_vfiprintf_r+0x234>
 8003ece:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ed0:	f7ff fd9e 	bl	8003a10 <__retarget_lock_release_recursive>
 8003ed4:	89a3      	ldrh	r3, [r4, #12]
 8003ed6:	065b      	lsls	r3, r3, #25
 8003ed8:	d500      	bpl.n	8003edc <_vfiprintf_r+0x23c>
 8003eda:	e70a      	b.n	8003cf2 <_vfiprintf_r+0x52>
 8003edc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003ede:	e70a      	b.n	8003cf6 <_vfiprintf_r+0x56>
 8003ee0:	ab07      	add	r3, sp, #28
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	0022      	movs	r2, r4
 8003ee6:	0029      	movs	r1, r5
 8003ee8:	0030      	movs	r0, r6
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <_vfiprintf_r+0x270>)
 8003eec:	f000 f882 	bl	8003ff4 <_printf_i>
 8003ef0:	e7e3      	b.n	8003eba <_vfiprintf_r+0x21a>
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	080046f8 	.word	0x080046f8
 8003ef8:	08004718 	.word	0x08004718
 8003efc:	080046d8 	.word	0x080046d8
 8003f00:	08004738 	.word	0x08004738
 8003f04:	0800473e 	.word	0x0800473e
 8003f08:	08004742 	.word	0x08004742
 8003f0c:	00000000 	.word	0x00000000
 8003f10:	08003c7b 	.word	0x08003c7b

08003f14 <_printf_common>:
 8003f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f16:	0015      	movs	r5, r2
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	688a      	ldr	r2, [r1, #8]
 8003f1c:	690b      	ldr	r3, [r1, #16]
 8003f1e:	000c      	movs	r4, r1
 8003f20:	9000      	str	r0, [sp, #0]
 8003f22:	4293      	cmp	r3, r2
 8003f24:	da00      	bge.n	8003f28 <_printf_common+0x14>
 8003f26:	0013      	movs	r3, r2
 8003f28:	0022      	movs	r2, r4
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	3243      	adds	r2, #67	; 0x43
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	2a00      	cmp	r2, #0
 8003f32:	d001      	beq.n	8003f38 <_printf_common+0x24>
 8003f34:	3301      	adds	r3, #1
 8003f36:	602b      	str	r3, [r5, #0]
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	069b      	lsls	r3, r3, #26
 8003f3c:	d502      	bpl.n	8003f44 <_printf_common+0x30>
 8003f3e:	682b      	ldr	r3, [r5, #0]
 8003f40:	3302      	adds	r3, #2
 8003f42:	602b      	str	r3, [r5, #0]
 8003f44:	6822      	ldr	r2, [r4, #0]
 8003f46:	2306      	movs	r3, #6
 8003f48:	0017      	movs	r7, r2
 8003f4a:	401f      	ands	r7, r3
 8003f4c:	421a      	tst	r2, r3
 8003f4e:	d027      	beq.n	8003fa0 <_printf_common+0x8c>
 8003f50:	0023      	movs	r3, r4
 8003f52:	3343      	adds	r3, #67	; 0x43
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	1e5a      	subs	r2, r3, #1
 8003f58:	4193      	sbcs	r3, r2
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	0692      	lsls	r2, r2, #26
 8003f5e:	d430      	bmi.n	8003fc2 <_printf_common+0xae>
 8003f60:	0022      	movs	r2, r4
 8003f62:	9901      	ldr	r1, [sp, #4]
 8003f64:	9800      	ldr	r0, [sp, #0]
 8003f66:	9e08      	ldr	r6, [sp, #32]
 8003f68:	3243      	adds	r2, #67	; 0x43
 8003f6a:	47b0      	blx	r6
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d025      	beq.n	8003fbc <_printf_common+0xa8>
 8003f70:	2306      	movs	r3, #6
 8003f72:	6820      	ldr	r0, [r4, #0]
 8003f74:	682a      	ldr	r2, [r5, #0]
 8003f76:	68e1      	ldr	r1, [r4, #12]
 8003f78:	2500      	movs	r5, #0
 8003f7a:	4003      	ands	r3, r0
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d103      	bne.n	8003f88 <_printf_common+0x74>
 8003f80:	1a8d      	subs	r5, r1, r2
 8003f82:	43eb      	mvns	r3, r5
 8003f84:	17db      	asrs	r3, r3, #31
 8003f86:	401d      	ands	r5, r3
 8003f88:	68a3      	ldr	r3, [r4, #8]
 8003f8a:	6922      	ldr	r2, [r4, #16]
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	dd01      	ble.n	8003f94 <_printf_common+0x80>
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	18ed      	adds	r5, r5, r3
 8003f94:	2700      	movs	r7, #0
 8003f96:	42bd      	cmp	r5, r7
 8003f98:	d120      	bne.n	8003fdc <_printf_common+0xc8>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e010      	b.n	8003fc0 <_printf_common+0xac>
 8003f9e:	3701      	adds	r7, #1
 8003fa0:	68e3      	ldr	r3, [r4, #12]
 8003fa2:	682a      	ldr	r2, [r5, #0]
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	42bb      	cmp	r3, r7
 8003fa8:	ddd2      	ble.n	8003f50 <_printf_common+0x3c>
 8003faa:	0022      	movs	r2, r4
 8003fac:	2301      	movs	r3, #1
 8003fae:	9901      	ldr	r1, [sp, #4]
 8003fb0:	9800      	ldr	r0, [sp, #0]
 8003fb2:	9e08      	ldr	r6, [sp, #32]
 8003fb4:	3219      	adds	r2, #25
 8003fb6:	47b0      	blx	r6
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d1f0      	bne.n	8003f9e <_printf_common+0x8a>
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	4240      	negs	r0, r0
 8003fc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fc2:	2030      	movs	r0, #48	; 0x30
 8003fc4:	18e1      	adds	r1, r4, r3
 8003fc6:	3143      	adds	r1, #67	; 0x43
 8003fc8:	7008      	strb	r0, [r1, #0]
 8003fca:	0021      	movs	r1, r4
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	3145      	adds	r1, #69	; 0x45
 8003fd0:	7809      	ldrb	r1, [r1, #0]
 8003fd2:	18a2      	adds	r2, r4, r2
 8003fd4:	3243      	adds	r2, #67	; 0x43
 8003fd6:	3302      	adds	r3, #2
 8003fd8:	7011      	strb	r1, [r2, #0]
 8003fda:	e7c1      	b.n	8003f60 <_printf_common+0x4c>
 8003fdc:	0022      	movs	r2, r4
 8003fde:	2301      	movs	r3, #1
 8003fe0:	9901      	ldr	r1, [sp, #4]
 8003fe2:	9800      	ldr	r0, [sp, #0]
 8003fe4:	9e08      	ldr	r6, [sp, #32]
 8003fe6:	321a      	adds	r2, #26
 8003fe8:	47b0      	blx	r6
 8003fea:	1c43      	adds	r3, r0, #1
 8003fec:	d0e6      	beq.n	8003fbc <_printf_common+0xa8>
 8003fee:	3701      	adds	r7, #1
 8003ff0:	e7d1      	b.n	8003f96 <_printf_common+0x82>
	...

08003ff4 <_printf_i>:
 8003ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff6:	b08b      	sub	sp, #44	; 0x2c
 8003ff8:	9206      	str	r2, [sp, #24]
 8003ffa:	000a      	movs	r2, r1
 8003ffc:	3243      	adds	r2, #67	; 0x43
 8003ffe:	9307      	str	r3, [sp, #28]
 8004000:	9005      	str	r0, [sp, #20]
 8004002:	9204      	str	r2, [sp, #16]
 8004004:	7e0a      	ldrb	r2, [r1, #24]
 8004006:	000c      	movs	r4, r1
 8004008:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800400a:	2a78      	cmp	r2, #120	; 0x78
 800400c:	d806      	bhi.n	800401c <_printf_i+0x28>
 800400e:	2a62      	cmp	r2, #98	; 0x62
 8004010:	d808      	bhi.n	8004024 <_printf_i+0x30>
 8004012:	2a00      	cmp	r2, #0
 8004014:	d100      	bne.n	8004018 <_printf_i+0x24>
 8004016:	e0c0      	b.n	800419a <_printf_i+0x1a6>
 8004018:	2a58      	cmp	r2, #88	; 0x58
 800401a:	d052      	beq.n	80040c2 <_printf_i+0xce>
 800401c:	0026      	movs	r6, r4
 800401e:	3642      	adds	r6, #66	; 0x42
 8004020:	7032      	strb	r2, [r6, #0]
 8004022:	e022      	b.n	800406a <_printf_i+0x76>
 8004024:	0010      	movs	r0, r2
 8004026:	3863      	subs	r0, #99	; 0x63
 8004028:	2815      	cmp	r0, #21
 800402a:	d8f7      	bhi.n	800401c <_printf_i+0x28>
 800402c:	f7fc f86c 	bl	8000108 <__gnu_thumb1_case_shi>
 8004030:	001f0016 	.word	0x001f0016
 8004034:	fff6fff6 	.word	0xfff6fff6
 8004038:	fff6fff6 	.word	0xfff6fff6
 800403c:	fff6001f 	.word	0xfff6001f
 8004040:	fff6fff6 	.word	0xfff6fff6
 8004044:	00a8fff6 	.word	0x00a8fff6
 8004048:	009a0036 	.word	0x009a0036
 800404c:	fff6fff6 	.word	0xfff6fff6
 8004050:	fff600b9 	.word	0xfff600b9
 8004054:	fff60036 	.word	0xfff60036
 8004058:	009efff6 	.word	0x009efff6
 800405c:	0026      	movs	r6, r4
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	3642      	adds	r6, #66	; 0x42
 8004062:	1d11      	adds	r1, r2, #4
 8004064:	6019      	str	r1, [r3, #0]
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	7033      	strb	r3, [r6, #0]
 800406a:	2301      	movs	r3, #1
 800406c:	e0a7      	b.n	80041be <_printf_i+0x1ca>
 800406e:	6808      	ldr	r0, [r1, #0]
 8004070:	6819      	ldr	r1, [r3, #0]
 8004072:	1d0a      	adds	r2, r1, #4
 8004074:	0605      	lsls	r5, r0, #24
 8004076:	d50b      	bpl.n	8004090 <_printf_i+0x9c>
 8004078:	680d      	ldr	r5, [r1, #0]
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	2d00      	cmp	r5, #0
 800407e:	da03      	bge.n	8004088 <_printf_i+0x94>
 8004080:	232d      	movs	r3, #45	; 0x2d
 8004082:	9a04      	ldr	r2, [sp, #16]
 8004084:	426d      	negs	r5, r5
 8004086:	7013      	strb	r3, [r2, #0]
 8004088:	4b61      	ldr	r3, [pc, #388]	; (8004210 <_printf_i+0x21c>)
 800408a:	270a      	movs	r7, #10
 800408c:	9303      	str	r3, [sp, #12]
 800408e:	e032      	b.n	80040f6 <_printf_i+0x102>
 8004090:	680d      	ldr	r5, [r1, #0]
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	0641      	lsls	r1, r0, #25
 8004096:	d5f1      	bpl.n	800407c <_printf_i+0x88>
 8004098:	b22d      	sxth	r5, r5
 800409a:	e7ef      	b.n	800407c <_printf_i+0x88>
 800409c:	680d      	ldr	r5, [r1, #0]
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	1d08      	adds	r0, r1, #4
 80040a2:	6018      	str	r0, [r3, #0]
 80040a4:	062e      	lsls	r6, r5, #24
 80040a6:	d501      	bpl.n	80040ac <_printf_i+0xb8>
 80040a8:	680d      	ldr	r5, [r1, #0]
 80040aa:	e003      	b.n	80040b4 <_printf_i+0xc0>
 80040ac:	066d      	lsls	r5, r5, #25
 80040ae:	d5fb      	bpl.n	80040a8 <_printf_i+0xb4>
 80040b0:	680d      	ldr	r5, [r1, #0]
 80040b2:	b2ad      	uxth	r5, r5
 80040b4:	4b56      	ldr	r3, [pc, #344]	; (8004210 <_printf_i+0x21c>)
 80040b6:	270a      	movs	r7, #10
 80040b8:	9303      	str	r3, [sp, #12]
 80040ba:	2a6f      	cmp	r2, #111	; 0x6f
 80040bc:	d117      	bne.n	80040ee <_printf_i+0xfa>
 80040be:	2708      	movs	r7, #8
 80040c0:	e015      	b.n	80040ee <_printf_i+0xfa>
 80040c2:	3145      	adds	r1, #69	; 0x45
 80040c4:	700a      	strb	r2, [r1, #0]
 80040c6:	4a52      	ldr	r2, [pc, #328]	; (8004210 <_printf_i+0x21c>)
 80040c8:	9203      	str	r2, [sp, #12]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	6821      	ldr	r1, [r4, #0]
 80040ce:	ca20      	ldmia	r2!, {r5}
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	0608      	lsls	r0, r1, #24
 80040d4:	d550      	bpl.n	8004178 <_printf_i+0x184>
 80040d6:	07cb      	lsls	r3, r1, #31
 80040d8:	d502      	bpl.n	80040e0 <_printf_i+0xec>
 80040da:	2320      	movs	r3, #32
 80040dc:	4319      	orrs	r1, r3
 80040de:	6021      	str	r1, [r4, #0]
 80040e0:	2710      	movs	r7, #16
 80040e2:	2d00      	cmp	r5, #0
 80040e4:	d103      	bne.n	80040ee <_printf_i+0xfa>
 80040e6:	2320      	movs	r3, #32
 80040e8:	6822      	ldr	r2, [r4, #0]
 80040ea:	439a      	bics	r2, r3
 80040ec:	6022      	str	r2, [r4, #0]
 80040ee:	0023      	movs	r3, r4
 80040f0:	2200      	movs	r2, #0
 80040f2:	3343      	adds	r3, #67	; 0x43
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	6863      	ldr	r3, [r4, #4]
 80040f8:	60a3      	str	r3, [r4, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	db03      	blt.n	8004106 <_printf_i+0x112>
 80040fe:	2204      	movs	r2, #4
 8004100:	6821      	ldr	r1, [r4, #0]
 8004102:	4391      	bics	r1, r2
 8004104:	6021      	str	r1, [r4, #0]
 8004106:	2d00      	cmp	r5, #0
 8004108:	d102      	bne.n	8004110 <_printf_i+0x11c>
 800410a:	9e04      	ldr	r6, [sp, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00c      	beq.n	800412a <_printf_i+0x136>
 8004110:	9e04      	ldr	r6, [sp, #16]
 8004112:	0028      	movs	r0, r5
 8004114:	0039      	movs	r1, r7
 8004116:	f7fc f887 	bl	8000228 <__aeabi_uidivmod>
 800411a:	9b03      	ldr	r3, [sp, #12]
 800411c:	3e01      	subs	r6, #1
 800411e:	5c5b      	ldrb	r3, [r3, r1]
 8004120:	7033      	strb	r3, [r6, #0]
 8004122:	002b      	movs	r3, r5
 8004124:	0005      	movs	r5, r0
 8004126:	429f      	cmp	r7, r3
 8004128:	d9f3      	bls.n	8004112 <_printf_i+0x11e>
 800412a:	2f08      	cmp	r7, #8
 800412c:	d109      	bne.n	8004142 <_printf_i+0x14e>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	07db      	lsls	r3, r3, #31
 8004132:	d506      	bpl.n	8004142 <_printf_i+0x14e>
 8004134:	6863      	ldr	r3, [r4, #4]
 8004136:	6922      	ldr	r2, [r4, #16]
 8004138:	4293      	cmp	r3, r2
 800413a:	dc02      	bgt.n	8004142 <_printf_i+0x14e>
 800413c:	2330      	movs	r3, #48	; 0x30
 800413e:	3e01      	subs	r6, #1
 8004140:	7033      	strb	r3, [r6, #0]
 8004142:	9b04      	ldr	r3, [sp, #16]
 8004144:	1b9b      	subs	r3, r3, r6
 8004146:	6123      	str	r3, [r4, #16]
 8004148:	9b07      	ldr	r3, [sp, #28]
 800414a:	0021      	movs	r1, r4
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	9805      	ldr	r0, [sp, #20]
 8004150:	9b06      	ldr	r3, [sp, #24]
 8004152:	aa09      	add	r2, sp, #36	; 0x24
 8004154:	f7ff fede 	bl	8003f14 <_printf_common>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d135      	bne.n	80041c8 <_printf_i+0x1d4>
 800415c:	2001      	movs	r0, #1
 800415e:	4240      	negs	r0, r0
 8004160:	b00b      	add	sp, #44	; 0x2c
 8004162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004164:	2220      	movs	r2, #32
 8004166:	6809      	ldr	r1, [r1, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	6022      	str	r2, [r4, #0]
 800416c:	0022      	movs	r2, r4
 800416e:	2178      	movs	r1, #120	; 0x78
 8004170:	3245      	adds	r2, #69	; 0x45
 8004172:	7011      	strb	r1, [r2, #0]
 8004174:	4a27      	ldr	r2, [pc, #156]	; (8004214 <_printf_i+0x220>)
 8004176:	e7a7      	b.n	80040c8 <_printf_i+0xd4>
 8004178:	0648      	lsls	r0, r1, #25
 800417a:	d5ac      	bpl.n	80040d6 <_printf_i+0xe2>
 800417c:	b2ad      	uxth	r5, r5
 800417e:	e7aa      	b.n	80040d6 <_printf_i+0xe2>
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	680d      	ldr	r5, [r1, #0]
 8004184:	1d10      	adds	r0, r2, #4
 8004186:	6949      	ldr	r1, [r1, #20]
 8004188:	6018      	str	r0, [r3, #0]
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	062e      	lsls	r6, r5, #24
 800418e:	d501      	bpl.n	8004194 <_printf_i+0x1a0>
 8004190:	6019      	str	r1, [r3, #0]
 8004192:	e002      	b.n	800419a <_printf_i+0x1a6>
 8004194:	066d      	lsls	r5, r5, #25
 8004196:	d5fb      	bpl.n	8004190 <_printf_i+0x19c>
 8004198:	8019      	strh	r1, [r3, #0]
 800419a:	2300      	movs	r3, #0
 800419c:	9e04      	ldr	r6, [sp, #16]
 800419e:	6123      	str	r3, [r4, #16]
 80041a0:	e7d2      	b.n	8004148 <_printf_i+0x154>
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	1d11      	adds	r1, r2, #4
 80041a6:	6019      	str	r1, [r3, #0]
 80041a8:	6816      	ldr	r6, [r2, #0]
 80041aa:	2100      	movs	r1, #0
 80041ac:	0030      	movs	r0, r6
 80041ae:	6862      	ldr	r2, [r4, #4]
 80041b0:	f000 f9bc 	bl	800452c <memchr>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d001      	beq.n	80041bc <_printf_i+0x1c8>
 80041b8:	1b80      	subs	r0, r0, r6
 80041ba:	6060      	str	r0, [r4, #4]
 80041bc:	6863      	ldr	r3, [r4, #4]
 80041be:	6123      	str	r3, [r4, #16]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9a04      	ldr	r2, [sp, #16]
 80041c4:	7013      	strb	r3, [r2, #0]
 80041c6:	e7bf      	b.n	8004148 <_printf_i+0x154>
 80041c8:	6923      	ldr	r3, [r4, #16]
 80041ca:	0032      	movs	r2, r6
 80041cc:	9906      	ldr	r1, [sp, #24]
 80041ce:	9805      	ldr	r0, [sp, #20]
 80041d0:	9d07      	ldr	r5, [sp, #28]
 80041d2:	47a8      	blx	r5
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d0c1      	beq.n	800415c <_printf_i+0x168>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	079b      	lsls	r3, r3, #30
 80041dc:	d415      	bmi.n	800420a <_printf_i+0x216>
 80041de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e0:	68e0      	ldr	r0, [r4, #12]
 80041e2:	4298      	cmp	r0, r3
 80041e4:	dabc      	bge.n	8004160 <_printf_i+0x16c>
 80041e6:	0018      	movs	r0, r3
 80041e8:	e7ba      	b.n	8004160 <_printf_i+0x16c>
 80041ea:	0022      	movs	r2, r4
 80041ec:	2301      	movs	r3, #1
 80041ee:	9906      	ldr	r1, [sp, #24]
 80041f0:	9805      	ldr	r0, [sp, #20]
 80041f2:	9e07      	ldr	r6, [sp, #28]
 80041f4:	3219      	adds	r2, #25
 80041f6:	47b0      	blx	r6
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	d0af      	beq.n	800415c <_printf_i+0x168>
 80041fc:	3501      	adds	r5, #1
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	42ab      	cmp	r3, r5
 8004206:	dcf0      	bgt.n	80041ea <_printf_i+0x1f6>
 8004208:	e7e9      	b.n	80041de <_printf_i+0x1ea>
 800420a:	2500      	movs	r5, #0
 800420c:	e7f7      	b.n	80041fe <_printf_i+0x20a>
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	08004749 	.word	0x08004749
 8004214:	0800475a 	.word	0x0800475a

08004218 <_sbrk_r>:
 8004218:	2300      	movs	r3, #0
 800421a:	b570      	push	{r4, r5, r6, lr}
 800421c:	4d06      	ldr	r5, [pc, #24]	; (8004238 <_sbrk_r+0x20>)
 800421e:	0004      	movs	r4, r0
 8004220:	0008      	movs	r0, r1
 8004222:	602b      	str	r3, [r5, #0]
 8004224:	f7fc fe24 	bl	8000e70 <_sbrk>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d103      	bne.n	8004234 <_sbrk_r+0x1c>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d000      	beq.n	8004234 <_sbrk_r+0x1c>
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	bd70      	pop	{r4, r5, r6, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	200001b0 	.word	0x200001b0

0800423c <__sread>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	000c      	movs	r4, r1
 8004240:	250e      	movs	r5, #14
 8004242:	5f49      	ldrsh	r1, [r1, r5]
 8004244:	f000 f98e 	bl	8004564 <_read_r>
 8004248:	2800      	cmp	r0, #0
 800424a:	db03      	blt.n	8004254 <__sread+0x18>
 800424c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800424e:	181b      	adds	r3, r3, r0
 8004250:	6563      	str	r3, [r4, #84]	; 0x54
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	4a02      	ldr	r2, [pc, #8]	; (8004260 <__sread+0x24>)
 8004258:	4013      	ands	r3, r2
 800425a:	81a3      	strh	r3, [r4, #12]
 800425c:	e7f9      	b.n	8004252 <__sread+0x16>
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	ffffefff 	.word	0xffffefff

08004264 <__swrite>:
 8004264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004266:	001f      	movs	r7, r3
 8004268:	898b      	ldrh	r3, [r1, #12]
 800426a:	0005      	movs	r5, r0
 800426c:	000c      	movs	r4, r1
 800426e:	0016      	movs	r6, r2
 8004270:	05db      	lsls	r3, r3, #23
 8004272:	d505      	bpl.n	8004280 <__swrite+0x1c>
 8004274:	230e      	movs	r3, #14
 8004276:	5ec9      	ldrsh	r1, [r1, r3]
 8004278:	2200      	movs	r2, #0
 800427a:	2302      	movs	r3, #2
 800427c:	f000 f942 	bl	8004504 <_lseek_r>
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	4a05      	ldr	r2, [pc, #20]	; (8004298 <__swrite+0x34>)
 8004284:	0028      	movs	r0, r5
 8004286:	4013      	ands	r3, r2
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	0032      	movs	r2, r6
 800428c:	230e      	movs	r3, #14
 800428e:	5ee1      	ldrsh	r1, [r4, r3]
 8004290:	003b      	movs	r3, r7
 8004292:	f000 f875 	bl	8004380 <_write_r>
 8004296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004298:	ffffefff 	.word	0xffffefff

0800429c <__sseek>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	000c      	movs	r4, r1
 80042a0:	250e      	movs	r5, #14
 80042a2:	5f49      	ldrsh	r1, [r1, r5]
 80042a4:	f000 f92e 	bl	8004504 <_lseek_r>
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	1c42      	adds	r2, r0, #1
 80042ac:	d103      	bne.n	80042b6 <__sseek+0x1a>
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <__sseek+0x28>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	bd70      	pop	{r4, r5, r6, pc}
 80042b6:	2280      	movs	r2, #128	; 0x80
 80042b8:	0152      	lsls	r2, r2, #5
 80042ba:	4313      	orrs	r3, r2
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	6560      	str	r0, [r4, #84]	; 0x54
 80042c0:	e7f8      	b.n	80042b4 <__sseek+0x18>
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	ffffefff 	.word	0xffffefff

080042c8 <__sclose>:
 80042c8:	b510      	push	{r4, lr}
 80042ca:	230e      	movs	r3, #14
 80042cc:	5ec9      	ldrsh	r1, [r1, r3]
 80042ce:	f000 f8e3 	bl	8004498 <_close_r>
 80042d2:	bd10      	pop	{r4, pc}

080042d4 <__swbuf_r>:
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d6:	0005      	movs	r5, r0
 80042d8:	000e      	movs	r6, r1
 80042da:	0014      	movs	r4, r2
 80042dc:	2800      	cmp	r0, #0
 80042de:	d004      	beq.n	80042ea <__swbuf_r+0x16>
 80042e0:	6983      	ldr	r3, [r0, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <__swbuf_r+0x16>
 80042e6:	f7ff faf1 	bl	80038cc <__sinit>
 80042ea:	4b22      	ldr	r3, [pc, #136]	; (8004374 <__swbuf_r+0xa0>)
 80042ec:	429c      	cmp	r4, r3
 80042ee:	d12e      	bne.n	800434e <__swbuf_r+0x7a>
 80042f0:	686c      	ldr	r4, [r5, #4]
 80042f2:	69a3      	ldr	r3, [r4, #24]
 80042f4:	60a3      	str	r3, [r4, #8]
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	071b      	lsls	r3, r3, #28
 80042fa:	d532      	bpl.n	8004362 <__swbuf_r+0x8e>
 80042fc:	6923      	ldr	r3, [r4, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d02f      	beq.n	8004362 <__swbuf_r+0x8e>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	6922      	ldr	r2, [r4, #16]
 8004306:	b2f7      	uxtb	r7, r6
 8004308:	1a98      	subs	r0, r3, r2
 800430a:	6963      	ldr	r3, [r4, #20]
 800430c:	b2f6      	uxtb	r6, r6
 800430e:	4283      	cmp	r3, r0
 8004310:	dc05      	bgt.n	800431e <__swbuf_r+0x4a>
 8004312:	0021      	movs	r1, r4
 8004314:	0028      	movs	r0, r5
 8004316:	f7ff fa37 	bl	8003788 <_fflush_r>
 800431a:	2800      	cmp	r0, #0
 800431c:	d127      	bne.n	800436e <__swbuf_r+0x9a>
 800431e:	68a3      	ldr	r3, [r4, #8]
 8004320:	3001      	adds	r0, #1
 8004322:	3b01      	subs	r3, #1
 8004324:	60a3      	str	r3, [r4, #8]
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	6022      	str	r2, [r4, #0]
 800432c:	701f      	strb	r7, [r3, #0]
 800432e:	6963      	ldr	r3, [r4, #20]
 8004330:	4283      	cmp	r3, r0
 8004332:	d004      	beq.n	800433e <__swbuf_r+0x6a>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	07db      	lsls	r3, r3, #31
 8004338:	d507      	bpl.n	800434a <__swbuf_r+0x76>
 800433a:	2e0a      	cmp	r6, #10
 800433c:	d105      	bne.n	800434a <__swbuf_r+0x76>
 800433e:	0021      	movs	r1, r4
 8004340:	0028      	movs	r0, r5
 8004342:	f7ff fa21 	bl	8003788 <_fflush_r>
 8004346:	2800      	cmp	r0, #0
 8004348:	d111      	bne.n	800436e <__swbuf_r+0x9a>
 800434a:	0030      	movs	r0, r6
 800434c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <__swbuf_r+0xa4>)
 8004350:	429c      	cmp	r4, r3
 8004352:	d101      	bne.n	8004358 <__swbuf_r+0x84>
 8004354:	68ac      	ldr	r4, [r5, #8]
 8004356:	e7cc      	b.n	80042f2 <__swbuf_r+0x1e>
 8004358:	4b08      	ldr	r3, [pc, #32]	; (800437c <__swbuf_r+0xa8>)
 800435a:	429c      	cmp	r4, r3
 800435c:	d1c9      	bne.n	80042f2 <__swbuf_r+0x1e>
 800435e:	68ec      	ldr	r4, [r5, #12]
 8004360:	e7c7      	b.n	80042f2 <__swbuf_r+0x1e>
 8004362:	0021      	movs	r1, r4
 8004364:	0028      	movs	r0, r5
 8004366:	f000 f81f 	bl	80043a8 <__swsetup_r>
 800436a:	2800      	cmp	r0, #0
 800436c:	d0c9      	beq.n	8004302 <__swbuf_r+0x2e>
 800436e:	2601      	movs	r6, #1
 8004370:	4276      	negs	r6, r6
 8004372:	e7ea      	b.n	800434a <__swbuf_r+0x76>
 8004374:	080046f8 	.word	0x080046f8
 8004378:	08004718 	.word	0x08004718
 800437c:	080046d8 	.word	0x080046d8

08004380 <_write_r>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	0004      	movs	r4, r0
 8004384:	0008      	movs	r0, r1
 8004386:	0011      	movs	r1, r2
 8004388:	001a      	movs	r2, r3
 800438a:	2300      	movs	r3, #0
 800438c:	4d05      	ldr	r5, [pc, #20]	; (80043a4 <_write_r+0x24>)
 800438e:	602b      	str	r3, [r5, #0]
 8004390:	f7fc fc70 	bl	8000c74 <_write>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d103      	bne.n	80043a0 <_write_r+0x20>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d000      	beq.n	80043a0 <_write_r+0x20>
 800439e:	6023      	str	r3, [r4, #0]
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	200001b0 	.word	0x200001b0

080043a8 <__swsetup_r>:
 80043a8:	4b37      	ldr	r3, [pc, #220]	; (8004488 <__swsetup_r+0xe0>)
 80043aa:	b570      	push	{r4, r5, r6, lr}
 80043ac:	681d      	ldr	r5, [r3, #0]
 80043ae:	0006      	movs	r6, r0
 80043b0:	000c      	movs	r4, r1
 80043b2:	2d00      	cmp	r5, #0
 80043b4:	d005      	beq.n	80043c2 <__swsetup_r+0x1a>
 80043b6:	69ab      	ldr	r3, [r5, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d102      	bne.n	80043c2 <__swsetup_r+0x1a>
 80043bc:	0028      	movs	r0, r5
 80043be:	f7ff fa85 	bl	80038cc <__sinit>
 80043c2:	4b32      	ldr	r3, [pc, #200]	; (800448c <__swsetup_r+0xe4>)
 80043c4:	429c      	cmp	r4, r3
 80043c6:	d10f      	bne.n	80043e8 <__swsetup_r+0x40>
 80043c8:	686c      	ldr	r4, [r5, #4]
 80043ca:	230c      	movs	r3, #12
 80043cc:	5ee2      	ldrsh	r2, [r4, r3]
 80043ce:	b293      	uxth	r3, r2
 80043d0:	0711      	lsls	r1, r2, #28
 80043d2:	d42d      	bmi.n	8004430 <__swsetup_r+0x88>
 80043d4:	06d9      	lsls	r1, r3, #27
 80043d6:	d411      	bmi.n	80043fc <__swsetup_r+0x54>
 80043d8:	2309      	movs	r3, #9
 80043da:	2001      	movs	r0, #1
 80043dc:	6033      	str	r3, [r6, #0]
 80043de:	3337      	adds	r3, #55	; 0x37
 80043e0:	4313      	orrs	r3, r2
 80043e2:	81a3      	strh	r3, [r4, #12]
 80043e4:	4240      	negs	r0, r0
 80043e6:	bd70      	pop	{r4, r5, r6, pc}
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <__swsetup_r+0xe8>)
 80043ea:	429c      	cmp	r4, r3
 80043ec:	d101      	bne.n	80043f2 <__swsetup_r+0x4a>
 80043ee:	68ac      	ldr	r4, [r5, #8]
 80043f0:	e7eb      	b.n	80043ca <__swsetup_r+0x22>
 80043f2:	4b28      	ldr	r3, [pc, #160]	; (8004494 <__swsetup_r+0xec>)
 80043f4:	429c      	cmp	r4, r3
 80043f6:	d1e8      	bne.n	80043ca <__swsetup_r+0x22>
 80043f8:	68ec      	ldr	r4, [r5, #12]
 80043fa:	e7e6      	b.n	80043ca <__swsetup_r+0x22>
 80043fc:	075b      	lsls	r3, r3, #29
 80043fe:	d513      	bpl.n	8004428 <__swsetup_r+0x80>
 8004400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004402:	2900      	cmp	r1, #0
 8004404:	d008      	beq.n	8004418 <__swsetup_r+0x70>
 8004406:	0023      	movs	r3, r4
 8004408:	3344      	adds	r3, #68	; 0x44
 800440a:	4299      	cmp	r1, r3
 800440c:	d002      	beq.n	8004414 <__swsetup_r+0x6c>
 800440e:	0030      	movs	r0, r6
 8004410:	f7ff fb76 	bl	8003b00 <_free_r>
 8004414:	2300      	movs	r3, #0
 8004416:	6363      	str	r3, [r4, #52]	; 0x34
 8004418:	2224      	movs	r2, #36	; 0x24
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	4393      	bics	r3, r2
 800441e:	81a3      	strh	r3, [r4, #12]
 8004420:	2300      	movs	r3, #0
 8004422:	6063      	str	r3, [r4, #4]
 8004424:	6923      	ldr	r3, [r4, #16]
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	2308      	movs	r3, #8
 800442a:	89a2      	ldrh	r2, [r4, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	81a3      	strh	r3, [r4, #12]
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <__swsetup_r+0xa6>
 8004436:	21a0      	movs	r1, #160	; 0xa0
 8004438:	2280      	movs	r2, #128	; 0x80
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	0089      	lsls	r1, r1, #2
 800443e:	0092      	lsls	r2, r2, #2
 8004440:	400b      	ands	r3, r1
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <__swsetup_r+0xa6>
 8004446:	0021      	movs	r1, r4
 8004448:	0030      	movs	r0, r6
 800444a:	f7ff fb0b 	bl	8003a64 <__smakebuf_r>
 800444e:	220c      	movs	r2, #12
 8004450:	5ea3      	ldrsh	r3, [r4, r2]
 8004452:	2001      	movs	r0, #1
 8004454:	001a      	movs	r2, r3
 8004456:	b299      	uxth	r1, r3
 8004458:	4002      	ands	r2, r0
 800445a:	4203      	tst	r3, r0
 800445c:	d00f      	beq.n	800447e <__swsetup_r+0xd6>
 800445e:	2200      	movs	r2, #0
 8004460:	60a2      	str	r2, [r4, #8]
 8004462:	6962      	ldr	r2, [r4, #20]
 8004464:	4252      	negs	r2, r2
 8004466:	61a2      	str	r2, [r4, #24]
 8004468:	2000      	movs	r0, #0
 800446a:	6922      	ldr	r2, [r4, #16]
 800446c:	4282      	cmp	r2, r0
 800446e:	d1ba      	bne.n	80043e6 <__swsetup_r+0x3e>
 8004470:	060a      	lsls	r2, r1, #24
 8004472:	d5b8      	bpl.n	80043e6 <__swsetup_r+0x3e>
 8004474:	2240      	movs	r2, #64	; 0x40
 8004476:	4313      	orrs	r3, r2
 8004478:	81a3      	strh	r3, [r4, #12]
 800447a:	3801      	subs	r0, #1
 800447c:	e7b3      	b.n	80043e6 <__swsetup_r+0x3e>
 800447e:	0788      	lsls	r0, r1, #30
 8004480:	d400      	bmi.n	8004484 <__swsetup_r+0xdc>
 8004482:	6962      	ldr	r2, [r4, #20]
 8004484:	60a2      	str	r2, [r4, #8]
 8004486:	e7ef      	b.n	8004468 <__swsetup_r+0xc0>
 8004488:	20000014 	.word	0x20000014
 800448c:	080046f8 	.word	0x080046f8
 8004490:	08004718 	.word	0x08004718
 8004494:	080046d8 	.word	0x080046d8

08004498 <_close_r>:
 8004498:	2300      	movs	r3, #0
 800449a:	b570      	push	{r4, r5, r6, lr}
 800449c:	4d06      	ldr	r5, [pc, #24]	; (80044b8 <_close_r+0x20>)
 800449e:	0004      	movs	r4, r0
 80044a0:	0008      	movs	r0, r1
 80044a2:	602b      	str	r3, [r5, #0]
 80044a4:	f7fc fcb7 	bl	8000e16 <_close>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d103      	bne.n	80044b4 <_close_r+0x1c>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d000      	beq.n	80044b4 <_close_r+0x1c>
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	bd70      	pop	{r4, r5, r6, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	200001b0 	.word	0x200001b0

080044bc <_fstat_r>:
 80044bc:	2300      	movs	r3, #0
 80044be:	b570      	push	{r4, r5, r6, lr}
 80044c0:	4d06      	ldr	r5, [pc, #24]	; (80044dc <_fstat_r+0x20>)
 80044c2:	0004      	movs	r4, r0
 80044c4:	0008      	movs	r0, r1
 80044c6:	0011      	movs	r1, r2
 80044c8:	602b      	str	r3, [r5, #0]
 80044ca:	f7fc fcae 	bl	8000e2a <_fstat>
 80044ce:	1c43      	adds	r3, r0, #1
 80044d0:	d103      	bne.n	80044da <_fstat_r+0x1e>
 80044d2:	682b      	ldr	r3, [r5, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d000      	beq.n	80044da <_fstat_r+0x1e>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	200001b0 	.word	0x200001b0

080044e0 <_isatty_r>:
 80044e0:	2300      	movs	r3, #0
 80044e2:	b570      	push	{r4, r5, r6, lr}
 80044e4:	4d06      	ldr	r5, [pc, #24]	; (8004500 <_isatty_r+0x20>)
 80044e6:	0004      	movs	r4, r0
 80044e8:	0008      	movs	r0, r1
 80044ea:	602b      	str	r3, [r5, #0]
 80044ec:	f7fc fcab 	bl	8000e46 <_isatty>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d103      	bne.n	80044fc <_isatty_r+0x1c>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d000      	beq.n	80044fc <_isatty_r+0x1c>
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	200001b0 	.word	0x200001b0

08004504 <_lseek_r>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	0004      	movs	r4, r0
 8004508:	0008      	movs	r0, r1
 800450a:	0011      	movs	r1, r2
 800450c:	001a      	movs	r2, r3
 800450e:	2300      	movs	r3, #0
 8004510:	4d05      	ldr	r5, [pc, #20]	; (8004528 <_lseek_r+0x24>)
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	f7fc fca0 	bl	8000e58 <_lseek>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d103      	bne.n	8004524 <_lseek_r+0x20>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d000      	beq.n	8004524 <_lseek_r+0x20>
 8004522:	6023      	str	r3, [r4, #0]
 8004524:	bd70      	pop	{r4, r5, r6, pc}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	200001b0 	.word	0x200001b0

0800452c <memchr>:
 800452c:	b2c9      	uxtb	r1, r1
 800452e:	1882      	adds	r2, r0, r2
 8004530:	4290      	cmp	r0, r2
 8004532:	d101      	bne.n	8004538 <memchr+0xc>
 8004534:	2000      	movs	r0, #0
 8004536:	4770      	bx	lr
 8004538:	7803      	ldrb	r3, [r0, #0]
 800453a:	428b      	cmp	r3, r1
 800453c:	d0fb      	beq.n	8004536 <memchr+0xa>
 800453e:	3001      	adds	r0, #1
 8004540:	e7f6      	b.n	8004530 <memchr+0x4>
	...

08004544 <__malloc_lock>:
 8004544:	b510      	push	{r4, lr}
 8004546:	4802      	ldr	r0, [pc, #8]	; (8004550 <__malloc_lock+0xc>)
 8004548:	f7ff fa61 	bl	8003a0e <__retarget_lock_acquire_recursive>
 800454c:	bd10      	pop	{r4, pc}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	200001a8 	.word	0x200001a8

08004554 <__malloc_unlock>:
 8004554:	b510      	push	{r4, lr}
 8004556:	4802      	ldr	r0, [pc, #8]	; (8004560 <__malloc_unlock+0xc>)
 8004558:	f7ff fa5a 	bl	8003a10 <__retarget_lock_release_recursive>
 800455c:	bd10      	pop	{r4, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	200001a8 	.word	0x200001a8

08004564 <_read_r>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	0004      	movs	r4, r0
 8004568:	0008      	movs	r0, r1
 800456a:	0011      	movs	r1, r2
 800456c:	001a      	movs	r2, r3
 800456e:	2300      	movs	r3, #0
 8004570:	4d05      	ldr	r5, [pc, #20]	; (8004588 <_read_r+0x24>)
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	f7fc fbac 	bl	8000cd0 <_read>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d103      	bne.n	8004584 <_read_r+0x20>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d000      	beq.n	8004584 <_read_r+0x20>
 8004582:	6023      	str	r3, [r4, #0]
 8004584:	bd70      	pop	{r4, r5, r6, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	200001b0 	.word	0x200001b0

0800458c <_init>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr

08004598 <_fini>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr
